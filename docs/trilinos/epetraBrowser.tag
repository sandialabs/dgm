<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>B.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_nonlinear/</path>
    <filename>B_8cc</filename>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>B_8cc.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>B_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basis.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_nonlinear/</path>
    <filename>basis_8cc</filename>
    <includes id="basis_8h" name="basis.h" local="yes" imported="no">basis.h</includes>
  </compound>
  <compound kind="file">
    <name>basis.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_nonlinear/</path>
    <filename>basis_8h</filename>
    <class kind="class">Basis</class>
  </compound>
  <compound kind="file">
    <name>bug1_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/LinearProblemRedistor/</path>
    <filename>bug1__main_8cpp</filename>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__LinearProblemRedistor_8h" name="Epetra_LinearProblemRedistor.h" local="yes" imported="no">Epetra_LinearProblemRedistor.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CREATEREDISTPROBLEM</name>
      <anchorfile>bug1__main_8cpp.html</anchorfile>
      <anchor>acbc0677088aa2ffef0ec4f3cded5f3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkResults</name>
      <anchorfile>bug1__main_8cpp.html</anchorfile>
      <anchor>a88234a5772db545e66035acd374a4b15</anchor>
      <arglist>(bool trans, Epetra_LinearProblemRedistor *redistor, Epetra_LinearProblem *OrigProb, Epetra_LinearProblem *RedistProb, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>bug1__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>error_tolerance</name>
      <anchorfile>bug1__main_8cpp.html</anchorfile>
      <anchor>a0abddaa9db2b32be0369f6865e06e249</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiVector/BuildTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MultiVector/</path>
    <filename>MultiVector_2BuildTestProblems_8cpp</filename>
    <includes id="MultiVector_2BuildTestProblems_8h" name="MultiVector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <member kind="function">
      <type>int</type>
      <name>BuildMatrixTests</name>
      <anchorfile>MultiVector_2BuildTestProblems_8cpp.html</anchorfile>
      <anchor>ae88680d3aab63ecc8c19c2382fed6956</anchor>
      <arglist>(Epetra_MultiVector &amp;C, const char TransA, const char TransB, const double alpha, Epetra_MultiVector &amp;A, Epetra_MultiVector &amp;B, const double beta, Epetra_MultiVector &amp;C_GEMM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BuildMultiVectorTests</name>
      <anchorfile>MultiVector_2BuildTestProblems_8cpp.html</anchorfile>
      <anchor>add0bb8e93df1a4f08fd3b9de69c6b067</anchor>
      <arglist>(Epetra_MultiVector &amp;C, const double alpha, Epetra_MultiVector &amp;A, Epetra_MultiVector &amp;sqrtA, Epetra_MultiVector &amp;B, Epetra_MultiVector &amp;C_alphaA, Epetra_MultiVector &amp;C_alphaAplusB, Epetra_MultiVector &amp;C_plusB, double *const dotvec_AB, double *const norm1_A, double *const norm2_sqrtA, double *const norminf_A, double *const normw_A, Epetra_MultiVector &amp;Weights, double *const minval_A, double *const maxval_A, double *const meanval_A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector/BuildTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Vector/</path>
    <filename>Vector_2BuildTestProblems_8cpp</filename>
    <includes id="Vector_2BuildTestProblems_8h" name="Vector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <member kind="function">
      <type>int</type>
      <name>BuildMatrixTests</name>
      <anchorfile>Vector_2BuildTestProblems_8cpp.html</anchorfile>
      <anchor>a20b5fef1da75265f25f2bdefd5f99022</anchor>
      <arglist>(Epetra_Vector &amp;C, const char TransA, const char TransB, const double alpha, Epetra_Vector &amp;A, Epetra_Vector &amp;B, const double beta, Epetra_Vector &amp;C_GEMM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BuildVectorTests</name>
      <anchorfile>Vector_2BuildTestProblems_8cpp.html</anchorfile>
      <anchor>aadf3d88c8cb88f9386910662382611da</anchor>
      <arglist>(Epetra_Vector &amp;C, const double alpha, Epetra_Vector &amp;A, Epetra_Vector &amp;sqrtA, Epetra_Vector &amp;B, Epetra_Vector &amp;C_alphaA, Epetra_Vector &amp;C_alphaAplusB, Epetra_Vector &amp;C_plusB, double *const dotvec_AB, double *const norm1_A, double *const norm2_sqrtA, double *const norminf_A, double *const normw_A, Epetra_Vector &amp;Weights, double *const minval_A, double *const maxval_A, double *const meanval_A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiVector/BuildTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MultiVector/</path>
    <filename>MultiVector_2BuildTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <member kind="function">
      <type>int</type>
      <name>BuildMatrixTests</name>
      <anchorfile>MultiVector_2BuildTestProblems_8h.html</anchorfile>
      <anchor>a34c4d02cc1503e430c0b879eec3842a2</anchor>
      <arglist>(Epetra_MultiVector &amp;C, const char transa, const char transb, const double alpha, Epetra_MultiVector &amp;A, Epetra_MultiVector &amp;B, const double beta, Epetra_MultiVector &amp;C_GEMM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BuildMultiVectorTests</name>
      <anchorfile>MultiVector_2BuildTestProblems_8h.html</anchorfile>
      <anchor>add0bb8e93df1a4f08fd3b9de69c6b067</anchor>
      <arglist>(Epetra_MultiVector &amp;C, const double alpha, Epetra_MultiVector &amp;A, Epetra_MultiVector &amp;sqrtA, Epetra_MultiVector &amp;B, Epetra_MultiVector &amp;C_alphaA, Epetra_MultiVector &amp;C_alphaAplusB, Epetra_MultiVector &amp;C_plusB, double *const dotvec_AB, double *const norm1_A, double *const norm2_sqrtA, double *const norminf_A, double *const normw_A, Epetra_MultiVector &amp;Weights, double *const minval_A, double *const maxval_A, double *const meanval_A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector/BuildTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Vector/</path>
    <filename>Vector_2BuildTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <member kind="function">
      <type>int</type>
      <name>BuildMatrixTests</name>
      <anchorfile>Vector_2BuildTestProblems_8h.html</anchorfile>
      <anchor>afff22ec841ea1e6f85ef029993fe2d35</anchor>
      <arglist>(Epetra_Vector &amp;C, const char transa, const char transb, const double alpha, Epetra_Vector &amp;A, Epetra_Vector &amp;B, const double beta, Epetra_Vector &amp;C_GEMM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BuildVectorTests</name>
      <anchorfile>Vector_2BuildTestProblems_8h.html</anchorfile>
      <anchor>aadf3d88c8cb88f9386910662382611da</anchor>
      <arglist>(Epetra_Vector &amp;C, const double alpha, Epetra_Vector &amp;A, Epetra_Vector &amp;sqrtA, Epetra_Vector &amp;B, Epetra_Vector &amp;C_alphaA, Epetra_Vector &amp;C_alphaAplusB, Epetra_Vector &amp;C_plusB, double *const dotvec_AB, double *const norm1_A, double *const norm2_sqrtA, double *const norminf_A, double *const normw_A, Epetra_Vector &amp;Weights, double *const minval_A, double *const maxval_A, double *const meanval_A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/C_wrappers/c_main.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/C_wrappers/</path>
    <filename>example_2C__wrappers_2c__main_8c</filename>
    <includes id="Epetra__C__wrappers_8h" name="Epetra_C_wrappers.h" local="yes" imported="no">Epetra_C_wrappers.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2C__wrappers_2c__main_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Map/c_main.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map/</path>
    <filename>test_2Map_2c__main_8c</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Map_2c__main_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Map_LL/c_main.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map_LL/</path>
    <filename>test_2Map__LL_2c__main_8c</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Map__LL_2c__main_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cc_main.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_nonlinear/</path>
    <filename>cc__main_8cc</filename>
    <includes id="basis_8h" name="basis.h" local="yes" imported="no">basis.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockMap/checkmap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap/</path>
    <filename>BlockMap_2checkmap_8cpp</filename>
    <includes id="BlockMap_2checkmap_8h" name="BlockMap/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>BlockMap_2checkmap_8cpp.html</anchorfile>
      <anchor>a2ec280697e6b3bf086bef082f61bc8cd</anchor>
      <arglist>(Epetra_BlockMap &amp;Map, int NumGlobalElements, int NumMyElements, int *MyGlobalElements, int ElementSize, int *ElementSizeList, int NumGlobalPoints, int NumMyPoints, int IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal, bool IsOneToOne)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockMap_LL/checkmap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap_LL/</path>
    <filename>BlockMap__LL_2checkmap_8cpp</filename>
    <includes id="BlockMap__LL_2checkmap_8h" name="BlockMap_LL/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>BlockMap__LL_2checkmap_8cpp.html</anchorfile>
      <anchor>ab2c5f0d7e139a19fa154c9a6bad0e8f0</anchor>
      <arglist>(Epetra_BlockMap &amp;Map, long long NumGlobalElements, int NumMyElements, long long *MyGlobalElements, int ElementSize, int *ElementSizeList, long long NumGlobalPoints, int NumMyPoints, long long IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal, bool IsOneToOne)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map/checkmap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map/</path>
    <filename>Map_2checkmap_8cpp</filename>
    <includes id="Map_2checkmap_8h" name="Map/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>Map_2checkmap_8cpp.html</anchorfile>
      <anchor>a122188faf958e04b8a44d5c3f99c92d2</anchor>
      <arglist>(Epetra_Map &amp;Map, int NumGlobalElements, int NumMyElements, int *MyGlobalElements, int IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map_LL/checkmap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map_LL/</path>
    <filename>Map__LL_2checkmap_8cpp</filename>
    <includes id="Map__LL_2checkmap_8h" name="Map_LL/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>Map__LL_2checkmap_8cpp.html</anchorfile>
      <anchor>a6fc59735bcd69fe5d81869ba537bd7f7</anchor>
      <arglist>(Epetra_Map &amp;Map, long long NumGlobalElements, int NumMyElements, long long *MyGlobalElements, long long IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockMap/checkmap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap/</path>
    <filename>BlockMap_2checkmap_8h</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>BlockMap_2checkmap_8h.html</anchorfile>
      <anchor>a1dbd699b64f9ce92028f6ed87c86ec56</anchor>
      <arglist>(Epetra_BlockMap &amp;Map, int NumGlobalElements, int NumMyElements, int *MyGlobalElements, int ElementSize, int *ElementSizeList, int NumGlobalEquations, int NumMyEquations, int IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal, bool IsOneToOne)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockMap_LL/checkmap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap_LL/</path>
    <filename>BlockMap__LL_2checkmap_8h</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>BlockMap__LL_2checkmap_8h.html</anchorfile>
      <anchor>aae2e751f0de2174c8518177fbb8330ee</anchor>
      <arglist>(Epetra_BlockMap &amp;Map, long long NumGlobalElements, int NumMyElements, long long *MyGlobalElements, int ElementSize, int *ElementSizeList, long long NumGlobalEquations, int NumMyEquations, long long IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal, bool IsOneToOne)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map/checkmap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map/</path>
    <filename>Map_2checkmap_8h</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>Map_2checkmap_8h.html</anchorfile>
      <anchor>a122188faf958e04b8a44d5c3f99c92d2</anchor>
      <arglist>(Epetra_Map &amp;Map, int NumGlobalElements, int NumMyElements, int *MyGlobalElements, int IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map_LL/checkmap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map_LL/</path>
    <filename>Map__LL_2checkmap_8h</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkmap</name>
      <anchorfile>Map__LL_2checkmap_8h.html</anchorfile>
      <anchor>a6fc59735bcd69fe5d81869ba537bd7f7</anchor>
      <arglist>(Epetra_Map &amp;Map, long long NumGlobalElements, int NumMyElements, long long *MyGlobalElements, long long IndexBase, Epetra_Comm &amp;Comm, bool DistributedGlobal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/ImportExport/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/ImportExport/</path>
    <filename>example_2ImportExport_2cxx__main_8cpp</filename>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/ImportExport_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/ImportExport_LL/</path>
    <filename>example_2ImportExport__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/InverseIteration/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/InverseIteration/</path>
    <filename>example_2InverseIteration_2cxx__main_8cpp</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>invIteration</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>a7d51ca8e82b98fca9fd3a42a60162ca3</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, double &amp;lambda, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyInverseSetup</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>afad77e30642e44e9cac28db5807bc7c2</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Ifpack_CrsRiluk *&amp;M)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyInverse</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>a94b28df8f88ae13e909dbc4f4b01a0af</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;x, Epetra_Vector &amp;b, Ifpack_CrsRiluk *M, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyInverseDestroy</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2997293357b2c34778cb04c52c7de114</anchor>
      <arglist>(Ifpack_CrsRiluk *M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BiCGSTAB</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>a01b41070cdcffbebb9362df9b01d34f2</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;x, Epetra_Vector &amp;b, Ifpack_CrsRiluk *M, int Maxiter, double Tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2InverseIteration_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/MapColoring/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/MapColoring/</path>
    <filename>example_2MapColoring_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2MapColoring_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/my_example/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/my_example/</path>
    <filename>example_2my__example_2cxx__main_8cpp</filename>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../../test/epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>example_2my__example_2cxx__main_8cpp.html</anchorfile>
      <anchor>acba5c3a7c3fc7d36bd434e1f30b55201</anchor>
      <arglist>(Epetra_CrsGraph &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSharedOwnership</name>
      <anchorfile>example_2my__example_2cxx__main_8cpp.html</anchorfile>
      <anchor>a44c195ac2bd7a485edf4fcfa34cb8697</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkCopyAndAssignment</name>
      <anchorfile>example_2my__example_2cxx__main_8cpp.html</anchorfile>
      <anchor>adf204a4559492b6bbc34618daad5e6e2</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2my__example_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/my_example_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/my_example_LL/</path>
    <filename>example_2my__example__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../../test/epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>example_2my__example__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a58ff1f5969fd14b796be4277ad9815a0</anchor>
      <arglist>(Epetra_CrsGraph &amp;A, int NumMyRows1, long long NumGlobalRows1, int NumMyNonzeros1, long long NumGlobalNonzeros1, long long *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSharedOwnership</name>
      <anchorfile>example_2my__example__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a44c195ac2bd7a485edf4fcfa34cb8697</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkCopyAndAssignment</name>
      <anchorfile>example_2my__example__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>adf204a4559492b6bbc34618daad5e6e2</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2my__example__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/OSKI/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/OSKI/</path>
    <filename>example_2OSKI_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
  </compound>
  <compound kind="file">
    <name>example/petra_power_method/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_power_method/</path>
    <filename>example_2petra__power__method_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>example_2petra__power__method_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>example_2petra__power__method_2cxx__main_8cpp.html</anchorfile>
      <anchor>abdcff456ae899e76ae2a5cc75d55e455</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, double &amp;lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2petra__power__method_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/petra_power_method_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_power_method_LL/</path>
    <filename>example_2petra__power__method__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>example_2petra__power__method__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>example_2petra__power__method__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>abdcff456ae899e76ae2a5cc75d55e455</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, double &amp;lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2petra__power__method__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/petra_transpose/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_transpose/</path>
    <filename>example_2petra__transpose_2cxx__main_8cpp</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>example_2petra__transpose_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2petra__transpose_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/ReducedLinearProblem/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/ReducedLinearProblem/</path>
    <filename>example_2ReducedLinearProblem_2cxx__main_8cpp</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__CrsSingletonFilter_8h" name="Epetra_CrsSingletonFilter.h" local="yes" imported="no">Epetra_CrsSingletonFilter.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>void</type>
      <name>BiCGSTAB</name>
      <anchorfile>example_2ReducedLinearProblem_2cxx__main_8cpp.html</anchorfile>
      <anchor>a134ad1757c6e0536b479a6a5a01b8a00</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;x, Epetra_Vector &amp;b, Ifpack_CrsRiluk *M, int Maxiter, double Tolerance, double *residual, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Statistics</name>
      <anchorfile>example_2ReducedLinearProblem_2cxx__main_8cpp.html</anchorfile>
      <anchor>ad1f2915292721989d21751fd1a4a719a</anchor>
      <arglist>(const Epetra_CrsSingletonFilter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2ReducedLinearProblem_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/UG_Ex1/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/UG_Ex1/</path>
    <filename>example_2UG__Ex1_2cxx__main_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>double</type>
      <name>power_method</name>
      <anchorfile>example_2UG__Ex1_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab121e39df09a1027f30b3bb0d12d34f4</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2UG__Ex1_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/UG_ExMaps/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/UG_ExMaps/</path>
    <filename>example_2UG__ExMaps_2cxx__main_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2UG__ExMaps_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/verySimple/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/verySimple/</path>
    <filename>example_2verySimple_2cxx__main_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2verySimple_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/verySimple_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/verySimple_LL/</path>
    <filename>example_2verySimple__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2verySimple__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BasicPerfTest/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BasicPerfTest/</path>
    <filename>test_2BasicPerfTest_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__JadMatrix_8h" name="Epetra_JadMatrix.h" local="yes" imported="no">Epetra_JadMatrix.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_HAVE_JADMATRIX</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8e8c0e85bb0f799c3c5336bc3eb64bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_VERY_SHORT_PERFTEST</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a62e81eb4a388a6b6d4fe067939460e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_HAVE_STATICPROFILE</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4771bd0f7244caa2c51fb18f0180284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a654c628e7f388e945982b714bf38dda4</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b, Epetra_Vector *&amp;bt, Epetra_Vector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>af91c8fc9dd1e599a362e3d3e5a11740f</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nrhs, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;bt, Epetra_MultiVector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVbrProblem</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1bd451122662f6bd30a8ef5ccaf59a7c</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nsizes, int *sizes, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_BlockMap *&amp;map, Epetra_VbrMatrix *&amp;A, Epetra_Vector *&amp;b, Epetra_Vector *&amp;bt, Epetra_Vector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVbrProblem</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae2e3417f03121099126124f769be0a54</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nsizes, int *sizes, int nrhs, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_BlockMap *&amp;map, Epetra_VbrMatrix *&amp;A, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;bt, Epetra_MultiVector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateMyGlobalElements</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a821f54a7ac5d3d5ec220fdb6a71725a0</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcs, int myPID, int *&amp;myGlobalElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMatrixTests</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a70966fbe6e3225bb4ee0262ce098d855</anchor>
      <arglist>(Epetra_CrsMatrix *A, Epetra_MultiVector *b, Epetra_MultiVector *bt, Epetra_MultiVector *xexact, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runJadMatrixTests</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a747efd182c25d557df3a1833549b8295</anchor>
      <arglist>(Epetra_JadMatrix *A, Epetra_MultiVector *b, Epetra_MultiVector *bt, Epetra_MultiVector *xexact, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runLUMatrixTests</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4ddb28b0303393cc72d50e347b43e54a</anchor>
      <arglist>(Epetra_CrsMatrix *L, Epetra_MultiVector *bL, Epetra_MultiVector *btL, Epetra_MultiVector *xexactL, Epetra_CrsMatrix *U, Epetra_MultiVector *bU, Epetra_MultiVector *btU, Epetra_MultiVector *xexactU, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BasicPerfTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BasicPerfTest_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BasicPerfTest_LL/</path>
    <filename>test_2BasicPerfTest__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__JadMatrix_8h" name="Epetra_JadMatrix.h" local="yes" imported="no">Epetra_JadMatrix.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_HAVE_JADMATRIX</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8e8c0e85bb0f799c3c5336bc3eb64bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_VERY_SHORT_PERFTEST</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a62e81eb4a388a6b6d4fe067939460e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_HAVE_STATICPROFILE</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4771bd0f7244caa2c51fb18f0180284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a654c628e7f388e945982b714bf38dda4</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b, Epetra_Vector *&amp;bt, Epetra_Vector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>af91c8fc9dd1e599a362e3d3e5a11740f</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nrhs, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;bt, Epetra_MultiVector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVbrProblem</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1bd451122662f6bd30a8ef5ccaf59a7c</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nsizes, int *sizes, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_BlockMap *&amp;map, Epetra_VbrMatrix *&amp;A, Epetra_Vector *&amp;b, Epetra_Vector *&amp;bt, Epetra_Vector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVbrProblem</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae2e3417f03121099126124f769be0a54</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nsizes, int *sizes, int nrhs, const Epetra_Comm &amp;comm, bool verbose, bool summary, Epetra_BlockMap *&amp;map, Epetra_VbrMatrix *&amp;A, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;bt, Epetra_MultiVector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateMyGlobalElements</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a733ad8201cfac28c626a50594a724309</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcs, int myPID, long long *&amp;myGlobalElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMatrixTests</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a70966fbe6e3225bb4ee0262ce098d855</anchor>
      <arglist>(Epetra_CrsMatrix *A, Epetra_MultiVector *b, Epetra_MultiVector *bt, Epetra_MultiVector *xexact, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runJadMatrixTests</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a747efd182c25d557df3a1833549b8295</anchor>
      <arglist>(Epetra_JadMatrix *A, Epetra_MultiVector *b, Epetra_MultiVector *bt, Epetra_MultiVector *xexact, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runLUMatrixTests</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4ddb28b0303393cc72d50e347b43e54a</anchor>
      <arglist>(Epetra_CrsMatrix *L, Epetra_MultiVector *bL, Epetra_MultiVector *btL, Epetra_MultiVector *xexactL, Epetra_CrsMatrix *U, Epetra_MultiVector *bU, Epetra_MultiVector *btU, Epetra_MultiVector *xexactU, bool StaticProfile, bool verbose, bool summary)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BasicPerfTest__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BlockMap/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap/</path>
    <filename>test_2BlockMap_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="BlockMap_2checkmap_8h" name="BlockMap/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BlockMap_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BlockMap_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/BlockMap_LL/</path>
    <filename>test_2BlockMap__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="BlockMap__LL_2checkmap_8h" name="BlockMap_LL/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BlockMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs/Bug_5988_FECrs_buildNonlocalGraph/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs/Bug_5988_FECrs_buildNonlocalGraph/</path>
    <filename>test_2Bugs_2Bug__5988__FECrs__buildNonlocalGraph_2cxx__main_8cpp</filename>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="no" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="no" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="no" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs_2Bug__5988__FECrs__buildNonlocalGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs/Bug_6079_DistObject_CombineMode_flags/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs/Bug_6079_DistObject_CombineMode_flags/</path>
    <filename>test_2Bugs_2Bug__6079__DistObject__CombineMode__flags_2cxx__main_8cpp</filename>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="no" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="no" imported="no">Epetra_FEVector.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>test_2Bugs_2Bug__6079__DistObject__CombineMode__flags_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae1a3968e7947464bee7714f6d43b7002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs_2Bug__6079__DistObject__CombineMode__flags_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs_LL/Bug_5791_StaticProfile_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs_LL/Bug_5791_StaticProfile_LL/</path>
    <filename>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ITYPE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>afa9c89c62b53deb647c3722a1114ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_EPETRA64</name>
      <anchorfile>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>af478bbf0296f6fbbb176164fb4ce7e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINALIZE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5ecb8a21bf363db063fa51238531cfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs__LL_2Bug__5791__StaticProfile__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8be6e60ea81f191308e3638d3b2f6fe0</anchor>
      <arglist>(int narg, char *arg[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs_LL/Bug_5794_IndexBase_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs_LL/Bug_5794_IndexBase_LL/</path>
    <filename>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ITYPE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>afa9c89c62b53deb647c3722a1114ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_EPETRA64</name>
      <anchorfile>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>af478bbf0296f6fbbb176164fb4ce7e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINALIZE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5ecb8a21bf363db063fa51238531cfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs__LL_2Bug__5794__IndexBase__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8be6e60ea81f191308e3638d3b2f6fe0</anchor>
      <arglist>(int narg, char *arg[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs_LL/Bug_5797_Sort_MakeColMap_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs_LL/Bug_5797_Sort_MakeColMap_LL/</path>
    <filename>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ITYPE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>afa9c89c62b53deb647c3722a1114ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_EPETRA64</name>
      <anchorfile>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>af478bbf0296f6fbbb176164fb4ce7e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINALIZE</name>
      <anchorfile>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5ecb8a21bf363db063fa51238531cfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs__LL_2Bug__5797__Sort__MakeColMap__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8be6e60ea81f191308e3638d3b2f6fe0</anchor>
      <arglist>(int narg, char *arg[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs_LL/Bug_5988_FECrs_buildNonlocalGraph_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs_LL/Bug_5988_FECrs_buildNonlocalGraph_LL/</path>
    <filename>test_2Bugs__LL_2Bug__5988__FECrs__buildNonlocalGraph__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="no" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="no" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="no" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs__LL_2Bug__5988__FECrs__buildNonlocalGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Bugs_LL/Bug_6079_DistObject_CombineMode_flags_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Bugs_LL/Bug_6079_DistObject_CombineMode_flags_LL/</path>
    <filename>test_2Bugs__LL_2Bug__6079__DistObject__CombineMode__flags__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="no" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="no" imported="no">Epetra_FEVector.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>test_2Bugs__LL_2Bug__6079__DistObject__CombineMode__flags__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae1a3968e7947464bee7714f6d43b7002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Bugs__LL_2Bug__6079__DistObject__CombineMode__flags__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Comm/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Comm/</path>
    <filename>test_2Comm_2cxx__main_8cpp</filename>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkMpiDataClass</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>a17b1ea8341713337e60e43db9b66f747</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSerialDataClass</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>ad5467e915d66d886185c51727bab91c8</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkCommMethods</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5bac11f708b884f8467b0aa069bd2ca5</anchor>
      <arglist>(Epetra_Comm &amp;petracomm, bool verbose, bool verbose1, int &amp;NumProc, int &amp;rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkRankAndSize</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>abac7dc64c4f38aad912cb79dee62b0dc</anchor>
      <arglist>(Epetra_Comm &amp;petracomm, bool verbose, int rank, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBarrier</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4924bfd41b28f11ea12b070a6c169508</anchor>
      <arglist>(Epetra_Comm &amp;petracomm, bool verbose, int rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkDistributor</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6a3fd362cb225aac18913393dbb4de11</anchor>
      <arglist>(Epetra_Distributor *distr, Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Comm_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsGraph/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsGraph/</path>
    <filename>test_2CrsGraph_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2CrsGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>acba5c3a7c3fc7d36bd434e1f30b55201</anchor>
      <arglist>(Epetra_CrsGraph &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSharedOwnership</name>
      <anchorfile>test_2CrsGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a44c195ac2bd7a485edf4fcfa34cb8697</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkCopyAndAssignment</name>
      <anchorfile>test_2CrsGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>adf204a4559492b6bbc34618daad5e6e2</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsGraph_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsGraph_LL/</path>
    <filename>test_2CrsGraph__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2CrsGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a58ff1f5969fd14b796be4277ad9815a0</anchor>
      <arglist>(Epetra_CrsGraph &amp;A, int NumMyRows1, long long NumGlobalRows1, int NumMyNonzeros1, long long NumGlobalNonzeros1, long long *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSharedOwnership</name>
      <anchorfile>test_2CrsGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a44c195ac2bd7a485edf4fcfa34cb8697</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkCopyAndAssignment</name>
      <anchorfile>test_2CrsGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>adf204a4559492b6bbc34618daad5e6e2</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsMatrix/</path>
    <filename>test_2CrsMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2CrsMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>afee008fc738958de8ef9c6fc2fff982f</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2CrsMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6f051ac28277f02665283407570a1706</anchor>
      <arglist>(bool TransA, Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check_graph_sharing</name>
      <anchorfile>test_2CrsMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6eedfed97d00a6990bfb90a503529560</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsMatrix_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsMatrix_LL/</path>
    <filename>test_2CrsMatrix__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2CrsMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2e1d0f2a163cb4fafd729c3a2a6e1d18</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, int NumMyRows1, long long NumGlobalRows1, int NumMyNonzeros1, long long NumGlobalNonzeros1, long long *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2CrsMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6f051ac28277f02665283407570a1706</anchor>
      <arglist>(bool TransA, Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check_graph_sharing</name>
      <anchorfile>test_2CrsMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6eedfed97d00a6990bfb90a503529560</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsRectMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsRectMatrix/</path>
    <filename>test_2CrsRectMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsRectMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsRectMatrix_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsRectMatrix_LL/</path>
    <filename>test_2CrsRectMatrix__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsRectMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Directory/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Directory/</path>
    <filename>test_2Directory_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <member kind="function">
      <type>int</type>
      <name>directory_test_1</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0be7a08ef50f865ca68a755218bfcb8c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_2</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11d1dd16fc7aa0f8638610296b04cd9d</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_3</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2699e00995de8f8f20fbf5a035dcee63</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_4</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2f5abbe62cc380c9e7a8ac9961cac40c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_5</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a495bb906118789d2a482524b7640730f</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Directory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Directory_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Directory_LL/</path>
    <filename>test_2Directory__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <member kind="function">
      <type>int</type>
      <name>directory_test_1</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0be7a08ef50f865ca68a755218bfcb8c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_2</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11d1dd16fc7aa0f8638610296b04cd9d</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_3</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2699e00995de8f8f20fbf5a035dcee63</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_4</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2f5abbe62cc380c9e7a8ac9961cac40c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>directory_test_5</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a495bb906118789d2a482524b7640730f</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Directory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/EpetraBenchmarkTest/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/EpetraBenchmarkTest/</path>
    <filename>test_2EpetraBenchmarkTest_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2EpetraBenchmarkTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae4b4060f944ec0b68a4cc056367340d9</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, const Epetra_Comm &amp;comm, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b, Epetra_Vector *&amp;bt, Epetra_Vector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2EpetraBenchmarkTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a741380c5e156922bd842ad4605e99d5e</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcsY, int numPoints, int *xoff, int *yoff, int nrhs, const Epetra_Comm &amp;comm, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;bt, Epetra_MultiVector *&amp;xexact, bool StaticProfile, bool MakeLocalOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateMyGlobalElements</name>
      <anchorfile>test_2EpetraBenchmarkTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a821f54a7ac5d3d5ec220fdb6a71725a0</anchor>
      <arglist>(int numNodesX, int numNodesY, int numProcsX, int numProcs, int myPID, int *&amp;myGlobalElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMatrixTests</name>
      <anchorfile>test_2EpetraBenchmarkTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>aeae6df60be74ccb7d5c6681a12cb2966</anchor>
      <arglist>(Epetra_CrsMatrix *A, Epetra_MultiVector *b, Epetra_MultiVector *bt, Epetra_MultiVector *xexact, bool StaticProfile)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2EpetraBenchmarkTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FECrsGraph/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph/</path>
    <filename>test_2FECrsGraph_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="FECrsGraph_2ExecuteTestProblems_8h" name="FECrsGraph/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FECrsGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FECrsGraph_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph_LL/</path>
    <filename>test_2FECrsGraph__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="FECrsGraph__LL_2ExecuteTestProblems_8h" name="FECrsGraph_LL/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FECrsGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FECrsMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix/</path>
    <filename>test_2FECrsMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="FECrsMatrix_2ExecuteTestProblems_8h" name="FECrsMatrix/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FECrsMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FECrsMatrix_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix_LL/</path>
    <filename>test_2FECrsMatrix__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="FECrsMatrix__LL_2ExecuteTestProblems_8h" name="FECrsMatrix_LL/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FECrsMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FEVbrMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVbrMatrix/</path>
    <filename>test_2FEVbrMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="FEVbrMatrix_2ExecuteTestProblems_8h" name="FEVbrMatrix/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FEVbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FEVector/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVector/</path>
    <filename>test_2FEVector_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="yes" imported="no">Epetra_FEVector.h</includes>
    <includes id="FEVector_2ExecuteTestProblems_8h" name="FEVector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__test__functions_8h" name="Epetra_test_functions.h" local="yes" imported="no">../src/Epetra_test_functions.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FEVector_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FusedImportExport/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FusedImportExport/</path>
    <filename>test_2FusedImportExport_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_1</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11e4097fdeb535bd2721537440b937f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_2</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae5b1d9bf9b5a7183e29d6bebe4a34070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_3</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1237b5927e1706f665fe0ff962128c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_4</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>abbddf68b7495923137a12452c8af8e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_5</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a28f4c09efa62dc9a1acd88fb206bd63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_6</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a33eabc5c24d000e7e06237a239235d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>afee008fc738958de8ef9c6fc2fff982f</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6f051ac28277f02665283407570a1706</anchor>
      <arglist>(bool TransA, Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check_graph_sharing</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6eedfed97d00a6990bfb90a503529560</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>test_with_matvec</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae4ac6f0db5a10b078c9ea1c876ef325e</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>test_with_matvec_reduced_maps</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a43aa6c1fd602f7784e5e4c39e51d3bc6</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B, const Epetra_Map &amp;Bfullmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>build_matrix_unfused</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5d85459a0302fb630454563251c9a732</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, Epetra_Import &amp;RowImporter, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>build_matrix_unfused</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a86700ba6534b69e44f9213879283b423</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, Epetra_Export &amp;RowExporter, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_test_matrix</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a9a2c4378af14b85a1369f3a2e5ef18f7</anchor>
      <arglist>(Epetra_MpiComm &amp;Comm, int test_number, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_test_map</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5b5eafb298521e3accdbb57a6d15d576</anchor>
      <arglist>(const Epetra_Map &amp;oldMap, Epetra_Map *&amp;newMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FusedImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/FusedImportExport_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FusedImportExport_LL/</path>
    <filename>test_2FusedImportExport__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_1</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11e4097fdeb535bd2721537440b937f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_2</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae5b1d9bf9b5a7183e29d6bebe4a34070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_3</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1237b5927e1706f665fe0ff962128c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_4</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>abbddf68b7495923137a12452c8af8e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_5</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a28f4c09efa62dc9a1acd88fb206bd63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_TEST_6</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a33eabc5c24d000e7e06237a239235d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>afee008fc738958de8ef9c6fc2fff982f</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6f051ac28277f02665283407570a1706</anchor>
      <arglist>(bool TransA, Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check_graph_sharing</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6eedfed97d00a6990bfb90a503529560</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>test_with_matvec</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae4ac6f0db5a10b078c9ea1c876ef325e</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>test_with_matvec_reduced_maps</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a43aa6c1fd602f7784e5e4c39e51d3bc6</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B, const Epetra_Map &amp;Bfullmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>build_matrix_unfused</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5d85459a0302fb630454563251c9a732</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, Epetra_Import &amp;RowImporter, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>build_matrix_unfused</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a86700ba6534b69e44f9213879283b423</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, Epetra_Export &amp;RowExporter, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_test_matrix</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a9a2c4378af14b85a1369f3a2e5ef18f7</anchor>
      <arglist>(Epetra_MpiComm &amp;Comm, int test_number, Epetra_CrsMatrix *&amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2FusedImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/ImportExport/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/ImportExport/</path>
    <filename>test_2ImportExport_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>special_submap_import_test</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11dbe5c8263a24cb24d612fcc75181d8</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>combine_mode_test</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1cef6954d36c9101f813c81f825745e0</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate_import_constructor_test</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8362e86a18d165282565a54952b12b1c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_import_gid</name>
      <anchorfile>test_2ImportExport_2cxx__main_8cpp.html</anchorfile>
      <anchor>a7c009c622ef9d262fc3837c7d0b26328</anchor>
      <arglist>(const char *name, Epetra_IntVector &amp;Source, Epetra_IntVector &amp;Target, const Epetra_Import &amp;Import)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/ImportExport_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/ImportExport_LL/</path>
    <filename>test_2ImportExport__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__LongLongVector_8h" name="Epetra_LongLongVector.h" local="yes" imported="no">Epetra_LongLongVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>special_submap_import_test</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11dbe5c8263a24cb24d612fcc75181d8</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>combine_mode_test</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1cef6954d36c9101f813c81f825745e0</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate_import_constructor_test</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8362e86a18d165282565a54952b12b1c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_import_gid</name>
      <anchorfile>test_2ImportExport__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a7a99a09f05383b1e5705d48fb2b54d44</anchor>
      <arglist>(const char *name, Epetra_LongLongVector &amp;Source, Epetra_LongLongVector &amp;Target, const Epetra_Import &amp;Import)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IntSerialDense/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/IntSerialDense/</path>
    <filename>test_2IntSerialDense_2cxx__main_8cpp</filename>
    <includes id="Epetra__IntSerialDenseMatrix_8h" name="Epetra_IntSerialDenseMatrix.h" local="yes" imported="no">Epetra_IntSerialDenseMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DataAccess_8h" name="Epetra_DataAccess.h" local="yes" imported="no">Epetra_DataAccess.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>matrixCoverage</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>aac034f9b21b3d1d7bd729740cfb2b6a3</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixCtr</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1fd6b1797c7c30332d0d06939324f876</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixCpyCtr</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3062be9f70d351a4e81d3db0c3292139</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixAssignment</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2153f6debcad97962a62a0b463dcb747</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixExceptions</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>afab9146b9461271dc4e1da505de2f3bc</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vectorCoverage</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2de222c50b1d6f2eb83a3242ab4aafd8</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vectorCtr</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a61d2544f78747d190f5b659f871fb3b7</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vectorCpyCtr</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>aed1bce3bccfad7eac42df264015d0f98</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vectorAssignment</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0e151ab4c6df5beb089d2815a6dc5d22</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vectorExceptions</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>af1dd0a12d84a4d3c64f815746913cbd0</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identicalSignatures</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae8e121bc95684137c24f3170e426e751</anchor>
      <arglist>(Epetra_IntSerialDenseMatrix &amp;a, Epetra_IntSerialDenseMatrix &amp;b, bool testLDA=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seperateData</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3e04e849298f873f745b537a108595f3</anchor>
      <arglist>(Epetra_IntSerialDenseMatrix &amp;a, Epetra_IntSerialDenseMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getRandArray</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4dcb9553f87b2978734e39777375cce4</anchor>
      <arglist>(int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>randomInt</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>afa50c979e3e14c331326a12aa35c3e22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printArray</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a51db6714f25747b7de0daca675363e19</anchor>
      <arglist>(int *array, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMat</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a31d911670dd1ce7312617f66a7dea5dc</anchor>
      <arglist>(const char *name, Epetra_IntSerialDenseMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeading</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac52c0170c02430a3e15cdda5622efec2</anchor>
      <arglist>(const char *heading)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IntSerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/LinearProblemRedistor/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/LinearProblemRedistor/</path>
    <filename>test_2LinearProblemRedistor_2cxx__main_8cpp</filename>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__LinearProblemRedistor_8h" name="Epetra_LinearProblemRedistor.h" local="yes" imported="no">Epetra_LinearProblemRedistor.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CREATE_CONST_MATRIX</name>
      <anchorfile>test_2LinearProblemRedistor_2cxx__main_8cpp.html</anchorfile>
      <anchor>a11e0e4e9865ab6e3072103384a3e14a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkResults</name>
      <anchorfile>test_2LinearProblemRedistor_2cxx__main_8cpp.html</anchorfile>
      <anchor>a88234a5772db545e66035acd374a4b15</anchor>
      <arglist>(bool trans, Epetra_LinearProblemRedistor *redistor, Epetra_LinearProblem *OrigProb, Epetra_LinearProblem *RedistProb, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2LinearProblemRedistor_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>error_tolerance</name>
      <anchorfile>test_2LinearProblemRedistor_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0abddaa9db2b32be0369f6865e06e249</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Map/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map/</path>
    <filename>test_2Map_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Map_2checkmap_8h" name="Map/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkMapDataClass</name>
      <anchorfile>test_2Map_2cxx__main_8cpp.html</anchorfile>
      <anchor>aafd4f19460702b0514f760b7f2554f42</anchor>
      <arglist>(Epetra_Comm &amp;Comm, int verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkLocalMapDataClass</name>
      <anchorfile>test_2Map_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0fb6c5ca02ada3616c3efa3918e96091</anchor>
      <arglist>(Epetra_Comm &amp;Comm, int verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Map_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Map_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Map_LL/</path>
    <filename>test_2Map__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Map__LL_2checkmap_8h" name="Map_LL/checkmap.h" local="yes" imported="no">checkmap.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkMapDataClass</name>
      <anchorfile>test_2Map__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>aafd4f19460702b0514f760b7f2554f42</anchor>
      <arglist>(Epetra_Comm &amp;Comm, int verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkLocalMapDataClass</name>
      <anchorfile>test_2Map__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0fb6c5ca02ada3616c3efa3918e96091</anchor>
      <arglist>(Epetra_Comm &amp;Comm, int verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Map__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/MapColoring/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MapColoring/</path>
    <filename>test_2MapColoring_2cxx__main_8cpp</filename>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2MapColoring_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/MapColoring_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MapColoring_LL/</path>
    <filename>test_2MapColoring__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__LongLongVector_8h" name="Epetra_LongLongVector.h" local="yes" imported="no">Epetra_LongLongVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2MapColoring__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/MultiVector/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MultiVector/</path>
    <filename>test_2MultiVector_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="MultiVector_2BuildTestProblems_8h" name="MultiVector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="MultiVector_2ExecuteTestProblems_8h" name="MultiVector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2MultiVector_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Object/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Object/</path>
    <filename>test_2Object_2cxx__main_8cpp</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Object_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/OSKI/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/OSKI/</path>
    <filename>test_2OSKI_2cxx__main_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2OSKI_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/RowMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/RowMatrix/</path>
    <filename>test_2RowMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__JadMatrix_8h" name="Epetra_JadMatrix.h" local="yes" imported="no">Epetra_JadMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkValues</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab9c6233fb8697356ef2e34f5536e6683</anchor>
      <arglist>(double x, double y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkMultiVectors</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac0818b33a4ca22b2d7bc7cb9185cc3c2</anchor>
      <arglist>(Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab42aa9f98712110647a3ce09bb419e43</anchor>
      <arglist>(Epetra_RowMatrix &amp;A, Epetra_RowMatrix &amp;B, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>powerMethodTests</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a43e1cbc47ab02a65354bb853f31d4beb</anchor>
      <arglist>(Epetra_RowMatrix &amp;A, Epetra_RowMatrix &amp;JadA, Epetra_Map &amp;Map, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>aaa73cc4ec9718b04fbc10d6b8d227014</anchor>
      <arglist>(bool TransA, Epetra_RowMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z0, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2RowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/RowMatrix_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/RowMatrix_LL/</path>
    <filename>test_2RowMatrix__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__JadMatrix_8h" name="Epetra_JadMatrix.h" local="yes" imported="no">Epetra_JadMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkValues</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab9c6233fb8697356ef2e34f5536e6683</anchor>
      <arglist>(double x, double y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkMultiVectors</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac0818b33a4ca22b2d7bc7cb9185cc3c2</anchor>
      <arglist>(Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab42aa9f98712110647a3ce09bb419e43</anchor>
      <arglist>(Epetra_RowMatrix &amp;A, Epetra_RowMatrix &amp;B, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>powerMethodTests</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a43e1cbc47ab02a65354bb853f31d4beb</anchor>
      <arglist>(Epetra_RowMatrix &amp;A, Epetra_RowMatrix &amp;JadA, Epetra_Map &amp;Map, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>aaa73cc4ec9718b04fbc10d6b8d227014</anchor>
      <arglist>(bool TransA, Epetra_RowMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z0, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2RowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/RowMatrixTransposer/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/RowMatrixTransposer/</path>
    <filename>test_2RowMatrixTransposer_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__RowMatrixTransposer_8h" name="Epetra_RowMatrixTransposer.h" local="yes" imported="no">Epetra_RowMatrixTransposer.h</includes>
    <member kind="function">
      <type>int</type>
      <name>checkResults</name>
      <anchorfile>test_2RowMatrixTransposer_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8e1e3a0f0460727533545721cf8fe730</anchor>
      <arglist>(Epetra_RowMatrix *A, Epetra_CrsMatrix *transA, Epetra_MultiVector *xexact, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateCrsProblem</name>
      <anchorfile>test_2RowMatrixTransposer_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab45190f9325837bca86620ee04ee4fe3</anchor>
      <arglist>(int nx, int ny, int npoints, int *xoff, int *yoff, int nrhs, const Epetra_Comm &amp;comm, Epetra_Map *&amp;map, Epetra_CrsMatrix *&amp;A, Epetra_MultiVector *&amp;x, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;xexact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVbrProblem</name>
      <anchorfile>test_2RowMatrixTransposer_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1937733553907b09e656d75796ae2605</anchor>
      <arglist>(int nx, int ny, int npoints, int *xoff, int *yoff, int nsizes, int *sizes, int nrhs, const Epetra_Comm &amp;comm, Epetra_BlockMap *&amp;map, Epetra_VbrMatrix *&amp;A, Epetra_MultiVector *&amp;x, Epetra_MultiVector *&amp;b, Epetra_MultiVector *&amp;xexact)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2RowMatrixTransposer_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SerialDense/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/SerialDense/</path>
    <filename>test_2SerialDense_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseSolver_8h" name="Epetra_SerialDenseSolver.h" local="yes" imported="no">Epetra_SerialDenseSolver.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac03d442a11c6277ca20a0f82f6c20eac</anchor>
      <arglist>(Epetra_SerialDenseSolver &amp;solver, double *A1, int LDA, int N1, int NRHS1, double OneNorm1, double *B1, int LDB1, double *X1, int LDX1, bool Transpose, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateHilbert</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a59700beaf463973a42ed093e80c90bc9</anchor>
      <arglist>(double *A, int LDA, int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Residual</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ada9f7c36b5c7409de33e1303af503d39</anchor>
      <arglist>(int N, int NRHS, double *A, int LDA, bool Transpose, double *X, int LDX, double *B, int LDB, double *resid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixCpyCtr</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3062be9f70d351a4e81d3db0c3292139</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixAssignment</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2153f6debcad97962a62a0b463dcb747</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeading</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac52c0170c02430a3e15cdda5622efec2</anchor>
      <arglist>(const char *heading)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getRandArray</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a48b960769004952494088fe2e481cb6f</anchor>
      <arglist>(int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMat</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a072be2d80091522266a14d22225ddfa4</anchor>
      <arglist>(const char *name, Epetra_SerialDenseMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printArray</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5bac6eec865031fda6661d569821e3e2</anchor>
      <arglist>(double *array, int length)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identicalSignatures</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a73599caa63e757f5a084a6eeec4e8bd8</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;a, Epetra_SerialDenseMatrix &amp;b, bool testLDA=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seperateData</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a667f85c731b423b7614ca8bceff6b49e</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;a, Epetra_SerialDenseMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SerialDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SerialDense_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/SerialDense_LL/</path>
    <filename>test_2SerialDense__LL_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseSolver_8h" name="Epetra_SerialDenseSolver.h" local="yes" imported="no">Epetra_SerialDenseSolver.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac03d442a11c6277ca20a0f82f6c20eac</anchor>
      <arglist>(Epetra_SerialDenseSolver &amp;solver, double *A1, int LDA, int N1, int NRHS1, double OneNorm1, double *B1, int LDB1, double *X1, int LDX1, bool Transpose, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateHilbert</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a59700beaf463973a42ed093e80c90bc9</anchor>
      <arglist>(double *A, int LDA, int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Residual</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ada9f7c36b5c7409de33e1303af503d39</anchor>
      <arglist>(int N, int NRHS, double *A, int LDA, bool Transpose, double *X, int LDX, double *B, int LDB, double *resid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixCpyCtr</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a3062be9f70d351a4e81d3db0c3292139</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixAssignment</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2153f6debcad97962a62a0b463dcb747</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeading</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac52c0170c02430a3e15cdda5622efec2</anchor>
      <arglist>(const char *heading)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getRandArray</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a48b960769004952494088fe2e481cb6f</anchor>
      <arglist>(int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMat</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a072be2d80091522266a14d22225ddfa4</anchor>
      <arglist>(const char *name, Epetra_SerialDenseMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printArray</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a5bac6eec865031fda6661d569821e3e2</anchor>
      <arglist>(double *array, int length)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identicalSignatures</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a73599caa63e757f5a084a6eeec4e8bd8</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;a, Epetra_SerialDenseMatrix &amp;b, bool testLDA=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seperateData</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a667f85c731b423b7614ca8bceff6b49e</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;a, Epetra_SerialDenseMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SerialDense__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SerialSpdDense/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/SerialSpdDense/</path>
    <filename>test_2SerialSpdDense_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__SerialSymDenseMatrix_8h" name="Epetra_SerialSymDenseMatrix.h" local="yes" imported="no">Epetra_SerialSymDenseMatrix.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__SerialSpdDenseSolver_8h" name="Epetra_SerialSpdDenseSolver.h" local="yes" imported="no">Epetra_SerialSpdDenseSolver.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2SerialSpdDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab2bafc4cf45a526215e1752531b9b5ff</anchor>
      <arglist>(Epetra_SerialSpdDenseSolver &amp;solver, double *A1, int LDA, int N1, int NRHS1, double OneNorm1, double *B1, int LDB1, double *X1, int LDX1, bool Upper, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateHilbert</name>
      <anchorfile>test_2SerialSpdDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a59700beaf463973a42ed093e80c90bc9</anchor>
      <arglist>(double *A, int LDA, int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Residual</name>
      <anchorfile>test_2SerialSpdDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0b2fd3bf517b21706c3ff58daefdcc35</anchor>
      <arglist>(int N, int NRHS, double *A, int LDA, double *X, int LDX, double *B, int LDB, double *resid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SerialSpdDense_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SimpleLongLongTest/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/SimpleLongLongTest/</path>
    <filename>test_2SimpleLongLongTest_2cxx__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SimpleLongLongTest_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/VbrMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/VbrMatrix/</path>
    <filename>test_2VbrMatrix_2cxx__main_8cpp</filename>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__VbrRowMatrix_8h" name="Epetra_VbrRowMatrix.h" local="yes" imported="no">Epetra_VbrRowMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__matrix__data_8h" name="Epetra_matrix_data.h" local="yes" imported="no">../src/Epetra_matrix_data.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="enumeration">
      <type></type>
      <name>ConsType</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VariableEntriesPerRow</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8daa8161a06034c4166f63d1bce2e5da6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FixedEntriesPerRow</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8da0b75e2ada638b32faa8ff307413619a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoEntriesPerRow</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8dac09c47af5d17bc6f44d626237cb54ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMapColMap_VEPR</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8dad874c20c5a3f10f5762cc53ab5566a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMapColMap_FEPR</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8da38a2c0ccfb84d145b0f98b1f0be19f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMapColMap_NEPR</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8dabb1dc115cdc281f80c941ca6b0e6dff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WithGraph</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8da1fc18ca3b56a3f681a6451d9629cb42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CopyConstructor</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2ccec67873b4857cf05765f3a7fd9f8daf6f2c307202a8f5c9b3460d00c491852</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkValues</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab9c6233fb8697356ef2e34f5536e6683</anchor>
      <arglist>(double x, double y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkMultiVectors</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>ac0818b33a4ca22b2d7bc7cb9185cc3c2</anchor>
      <arglist>(Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, string message=&quot;&quot;, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkVbrMatrixOptimizedGraph</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4b0a8294d1945a09a8e0b0a3206f482b</anchor>
      <arglist>(Epetra_Comm &amp;comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkVbrRowMatrix</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a04ee4a7f75a424a9c8c1115413b4fcce</anchor>
      <arglist>(Epetra_RowMatrix &amp;A, Epetra_RowMatrix &amp;B, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareValues</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a4df7fe99a868f0ea9b1cc02332ca4ad8</anchor>
      <arglist>(double *A, int LDA, int NumRowsA, int NumColsA, double *B, int LDB, int NumRowsB, int NumColsB)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>accc026dddb21a55e0ab9f0debff1318f</anchor>
      <arglist>(Epetra_VbrMatrix &amp;A, int NumMyRows1, int NumGlobalRows1, int NumMyNonzeros1, int NumGlobalNonzeros1, int NumMyBlockRows1, int NumGlobalBlockRows1, int NumMyBlockNonzeros1, int NumGlobalBlockNonzeros1, int *MyGlobalElements, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>abbd6079e634d5019f96e046e4b10a9c9</anchor>
      <arglist>(bool TransA, Epetra_VbrMatrix &amp;A, Epetra_MultiVector &amp;q, Epetra_MultiVector &amp;z, Epetra_MultiVector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkMergeRedundantEntries</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a482e7e567f3404168b8b8884a236d41b</anchor>
      <arglist>(Epetra_Comm &amp;comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkExtractMyRowCopy</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a559a5d18eedacaaae6915858b5cdbe8a</anchor>
      <arglist>(Epetra_Comm &amp;comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkMatvecSameVectors</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a04c73c40fdb2d0aae3e7907970a64c44</anchor>
      <arglist>(Epetra_Comm &amp;comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkEarlyDelete</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a79bf8995c2a0e6d62de3a835c58cd0bf</anchor>
      <arglist>(Epetra_Comm &amp;comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertVbrToCrs</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a47eee5b2037e851037a5df6407098457</anchor>
      <arglist>(Epetra_VbrMatrix *VbrIn, Epetra_CrsMatrix *&amp;CrsOut)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkmultiply</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8cd5725e724f45e0d06270325324710e</anchor>
      <arglist>(bool transpose, Epetra_VbrMatrix &amp;A, Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Check_Y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TestMatrix</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a6d23e7f990db2cdab8cd8725aad0df48</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose, bool debug, int NumMyElements, int MinSize, int MaxSize, ConsType ConstructorType, bool ExtraBlocks, bool insertlocal, bool symmetric, Epetra_VbrMatrix **PreviousA)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2VbrMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Vector/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Vector/</path>
    <filename>test_2Vector_2cxx__main_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Vector_2BuildTestProblems_8h" name="Vector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="Vector_2ExecuteTestProblems_8h" name="Vector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Vector_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_BasicDirectory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BasicDirectory_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__BasicDirectory_8h" name="Epetra_BasicDirectory.h" local="yes" imported="no">Epetra_BasicDirectory.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_BasicDirectory.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BasicDirectory_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <class kind="class">Epetra_BasicDirectory</class>
  </compound>
  <compound kind="file">
    <name>Epetra_BasicRowMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BasicRowMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__BasicRowMatrix_8h" name="Epetra_BasicRowMatrix.h" local="yes" imported="no">Epetra_BasicRowMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_BasicRowMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BasicRowMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <class kind="class">Epetra_BasicRowMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_BLAS.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BLAS_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__BLAS__wrappers_8h" name="Epetra_BLAS_wrappers.h" local="yes" imported="no">Epetra_BLAS_wrappers.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CHAR_MACRO</name>
      <anchorfile>Epetra__BLAS_8cpp.html</anchorfile>
      <anchor>a4851db723cbdcc37d751d15536baa2cd</anchor>
      <arglist>(char_var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_BLAS.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BLAS_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_BLAS</class>
  </compound>
  <compound kind="file">
    <name>Epetra_BLAS_wrappers.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BLAS__wrappers_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PREFIX</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>add51b53e8b628f95078327028dccb20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Epetra_fcd</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ae7c268b5446b1c3db6a4e5ba3c9008d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DASUM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a0271173b7c23a92ce1ac7cae7b927a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DAXPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a036920f22c4dc03808c385fb4c88c2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DCOPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ae4f899e0b077ef91898383ccecd83dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DDOT_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a454290a6af42804b3e804d4d9f367eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNRM2_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a11b47bc6b3c269a0696b015968c3138b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSCAL_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>addfa27314f361925468c3303e230b587</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IDAMAX_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a0e31933e8f129231e1c9f07a129f23f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>acfdc99fe8188a77fd84a46d84539f2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGER_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>adf07e85c49b305c03cf38df5f216bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTRMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ad4f87f0031f27d87c678c155d09cb9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a25c53349e8068a3b05df1913859ffbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a008525a871e4f2dde8f04d80709ea47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTRMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ad314a138d76c7e85a3a75da29b9bf7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTRSM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a674a2cc842c95d1225d7113c850aaad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYRK_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a62b85b2eaeb3d348943350403fa4dc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSCAL_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>aba5072abdc3055b34c2b47e66649a9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCOPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a92b042ed35681c050dde208def46b477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SAXPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a95f82ce13bf3c46dac8b59bf403f3134</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SDOT_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a0e207464f9eedeb49eacc94b7c200514</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SNRM2_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a915fd8e8118b917f4d033d7f3ea221c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SASUM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ac0d1045bd13e639bd55987ba38f7630c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ISAMAX_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>aaf763147bfc27142555a560b37dccdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ab8aeb3f187004d59f4ed8576030de5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGER_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>acd851ff57409c2812f69f92bcdb08ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a137fdf2f652663a5dc1517916356224b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a36f3accdb2a2b3fa10e33b5f6d4d9297</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>afa5588be7b2399476ad9b956e2c4611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a4f2c95dd5f3b490826e8ddd48325fac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRSM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ab75fec78e295b73599adf07042dcdcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYRK_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a62856765b292a81f9eccf4cbf90eb2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double PREFIX</type>
      <name>DASUM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a9f2905f3fc7748d68ab0e0007e68d19d</anchor>
      <arglist>(const int *n, const double x[], const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DAXPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a7076713e2c49a01d83ce57aa5b58eb37</anchor>
      <arglist>(const int *n, const double *alpha, const double x[], const int *incx, double y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DCOPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a639af1e0e540f481262702b0f33cd6cb</anchor>
      <arglist>(const int *n, const double *x, const int *incx, double *y, const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>double PREFIX</type>
      <name>DDOT_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>aea802194a0d776d6a7d92039736c281b</anchor>
      <arglist>(const int *n, const double x[], const int *incx, const double y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>double PREFIX</type>
      <name>DNRM2_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ab9a6cb4ffae1dba5830fbd0c01ebf748</anchor>
      <arglist>(const int *n, const double x[], const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSCAL_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a8fa99b9a1ebcda3cbaefc66c9ee9468a</anchor>
      <arglist>(const int *n, const double *alpha, double *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>int PREFIX</type>
      <name>IDAMAX_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ae4466d1be9cc0aaa44c17828af5c03a6</anchor>
      <arglist>(const int *n, const double *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>float PREFIX</type>
      <name>SASUM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a09d79a66104653818a19309e7fd527b5</anchor>
      <arglist>(const int *n, const float x[], const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SAXPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>aab387b2b5360c0da41d72e9fab93bf02</anchor>
      <arglist>(const int *n, const float *alpha, const float x[], const int *incx, float y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SCOPY_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>af932d11ed5d618f7bf7ee5f5585b117a</anchor>
      <arglist>(const int *n, const float *x, const int *incx, float *y, const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>float PREFIX</type>
      <name>SDOT_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a78cc0ef6113179f9d52f872e54cdb8d3</anchor>
      <arglist>(const int *n, const float x[], const int *incx, const float y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>float PREFIX</type>
      <name>SNRM2_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>afac30f94ad84e4d87d2c4afe9bd5ea80</anchor>
      <arglist>(const int *n, const float x[], const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSCAL_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ac9aab7eeaf57004e0f4876878b30ea9e</anchor>
      <arglist>(const int *n, const float *alpha, float *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>int PREFIX</type>
      <name>ISAMAX_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>af542fe0234c9aebb3d1378fba598a42b</anchor>
      <arglist>(const int *n, const float *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a0f0d72dbba2326519178fb024408c0a8</anchor>
      <arglist>(Epetra_fcd, const int *m, const int *n, const double *alpha, const double A[], const int *lda, const double x[], const int *incx, const double *beta, double y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTRMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>af1492a4cc127659f2d8f8a205ce3eb02</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, const double *a, const int *lda, double *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGER_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a2e6ea52a0a70fd8f6b2096fe1ebf2ef3</anchor>
      <arglist>(const int *m, const int *n, const double *alpha, const double *x, const int *incx, const double *y, const int *incy, double *a, const int *lda)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ace690fd2ed8d1c56794c803f4233418b</anchor>
      <arglist>(Epetra_fcd, const int *m, const int *n, const float *alpha, const float A[], const int *lda, const float x[], const int *incx, const float *beta, float y[], const int *incy)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STRMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ab233f7ed062b70bab8d58570458e2e78</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, const float *a, const int *lda, float *x, const int *incx)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGER_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a45670649740e3e6e0895b07ddb0ce22e</anchor>
      <arglist>(const int *m, const int *n, const float *alpha, const float *x, const int *incx, const float *y, const int *incy, float *a, const int *lda)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a51ce94bbf175f86c11b68a7cc34d6c12</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *k, const double *alpha, const double *a, const int *lda, const double *b, const int *ldb, const double *beta, double *c, const int *ldc)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>acce6888a452b4f0e8ddb6854e46fa228</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const double *alpha, const double *a, const int *lda, const double *b, const int *ldb, const double *beta, double *c, const int *ldc)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTRMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a57c01a8e49f41fd915b437745cf052a2</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const double *alpha, const double *a, const int *lda, double *b, const int *ldb)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTRSM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>abeaf947bbb087d17f9d242bf9e2dc58c</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const double *alpha, const double *a, const int *lda, double *b, const int *ldb)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>EPETRA_DCRSMV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>ae6abbb36c3c540ecc1814c30bbc4ba19</anchor>
      <arglist>(const int *, const int *, const int *, const double *, const int *, const int *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>EPETRA_DCRSMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a3969391e9fe2b7549c47bbb231f9c473</anchor>
      <arglist>(const int *, const int *, const int *, const double *, const int *, const int *, double *, int *, double *, int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>EPETRA_DCRSSV_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a1651d75adc67c0cce1e53762f383956b</anchor>
      <arglist>(const int *, const int *, const int *, const int *, const int *, const int *, const double *, const int *, const int *, double *, double *, const int *)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>EPETRA_DCRSSM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a0bbc721b9a5347aa488a616e00a4cb0f</anchor>
      <arglist>(const int *, const int *, const int *, const int *, const int *, const int *, const double *, const int *, const int *, double *, const int *, double *, const int *, const int *, const int *)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYRK_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a2c6dd371b3456120e479c306c2180299</anchor>
      <arglist>(Epetra_fcd uplo, Epetra_fcd trans, const int *n, const int *k, const double *alpha, const double *a, const int *lda, const double *beta, double *c, const int *ldc)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a32eeb0c94aa94ee689e5868609e1e3f6</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *k, const float *alpha, const float *a, const int *lda, const float *b, const int *ldb, const float *beta, float *c, const int *ldc)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a6a4c45938bed40fb068b7b2086f726f9</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const float *alpha, const float *a, const int *lda, const float *b, const int *ldb, const float *beta, float *c, const int *ldc)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STRMM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a3d45b542ebefd3e8cc4784dea22cfc72</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const float *alpha, const float *a, const int *lda, float *b, const int *ldb)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STRSM_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>af31a39369de4e61d364c62744d591212</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const float *alpha, const float *a, const int *lda, float *b, const int *ldb)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>XERBLA_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a7648ce581d0f4c2a40d79d896c2368b9</anchor>
      <arglist>(Epetra_fcd, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYRK_F77</name>
      <anchorfile>Epetra__BLAS__wrappers_8h.html</anchorfile>
      <anchor>a96ef9c9062de6190fc889df492ca3717</anchor>
      <arglist>(Epetra_fcd uplo, Epetra_fcd trans, const int *n, const int *k, const float *alpha, const float *a, const int *lda, const float *beta, float *c, const int *ldc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_BlockMap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BlockMap_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_BLOCKMAP_NEW_LID</name>
      <anchorfile>Epetra__BlockMap_8cpp.html</anchorfile>
      <anchor>af3dba0b3ce07d8cd44e442aff0151007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_BlockMap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BlockMap_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__BlockMapData_8h" name="Epetra_BlockMapData.h" local="yes" imported="no">Epetra_BlockMapData.h</includes>
    <class kind="class">Epetra_BlockMap</class>
  </compound>
  <compound kind="file">
    <name>Epetra_BlockMapData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BlockMapData_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__BlockMapData_8h" name="Epetra_BlockMapData.h" local="yes" imported="no">Epetra_BlockMapData.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_BLOCKMAP_NEW_LID</name>
      <anchorfile>Epetra__BlockMapData_8cpp.html</anchorfile>
      <anchor>af3dba0b3ce07d8cd44e442aff0151007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_BlockMapData.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__BlockMapData_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__LongLongSerialDenseVector_8h" name="Epetra_LongLongSerialDenseVector.h" local="yes" imported="no">Epetra_LongLongSerialDenseVector.h</includes>
    <class kind="class">Epetra_HashTable</class>
    <class kind="class">Epetra_BlockMapData</class>
  </compound>
  <compound kind="file">
    <name>Epetra_C_wrappers.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__C__wrappers_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__C__wrappers_8h" name="Epetra_C_wrappers.h" local="yes" imported="no">Epetra_C_wrappers.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_mpicomm_create1</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a748e85e41fa0f5e821b60d18696a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_mpicomm_create2</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a3ca712a62107a47699e7647b34650d31</anchor>
      <arglist>(MPI_Comm *comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_serialcomm_create</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a97ba55663fa08e8936caaa3a003f5f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_comm_mypid</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ab30f6ff9b55b9c68ce23df5ed456c839</anchor>
      <arglist>(EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_comm_numproc</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>af306bf551b4e12593698193e1143c077</anchor>
      <arglist>(EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_comm_barrier</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ab0b9acea7b3f9fd03cd5c9306919bfc0</anchor>
      <arglist>(EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_comm_destroy</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a31102b68c23ef0d3adfbc44ffa576cbb</anchor>
      <arglist>(EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create1</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a4e26187fe04e906192a93aee75696c2f</anchor>
      <arglist>(EPETRA_INT numGlobalElements, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create2</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>af3ac40f2ca78bd46e833c323876e0c38</anchor>
      <arglist>(EPETRA_INT numGlobalElements, EPETRA_INT numMyElements, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create3</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ac4713b56a7272d134db18d3c9da1ccdc</anchor>
      <arglist>(EPETRA_INT numGlobalElements, EPETRA_INT numLocalElements, int *updateList, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create1_64</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a0f3d9236484295f8068f1fa71850b0ef</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalElements, EPETRA_LONG_LONG indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create2_64</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ab88d8823f03886505a427a3f600b05ae</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalElements, EPETRA_INT numMyElements, EPETRA_LONG_LONG indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create3_64</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a74b9b9b24c700e34cdf256228b1d930d</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalElements, EPETRA_INT numLocalElements, long long *updateList, EPETRA_LONG_LONG indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_map_nummyelements</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a34f8bc668dffaf1641a37f064a090937</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>long long MANGLE()</type>
      <name>epetra_map_numglobalelements</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ac061ff8a9df56a97e3d42346dcefe01f</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>int *MANGLE()</type>
      <name>epetra_map_myglobalelements</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ae36f8acb7fe43f875aad25f3b93df767</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>long long *MANGLE()</type>
      <name>epetra_map_myglobalelements_64</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a551db9bec588832ffffa8176abac1f82</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_comm</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a06293583fd40651253092499cc45fa7b</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_map_destroy</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ac74fa7b7d3750f8706abea25bdd72cb5</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_vector_create1</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a93d4af11fc4a55201ec039ab564ef2b6</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_vector_create2</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a517f1753579241a3e4efbfd24face5f2</anchor>
      <arglist>(EPETRA_INT CopyValues, EPETRA_OBJECT_REF map, double *V)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_putscalar</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>ac4d55b54bc3e4e1dd818c4f8845b2ad2</anchor>
      <arglist>(EPETRA_OBJECT_REF x, EPETRA_DOUBLE scalar)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_norm1</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a0c29dcb0855596853e3d12cd90458616</anchor>
      <arglist>(EPETRA_OBJECT_REF x, double *scalar)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_norm2</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>aae9e4b13cf5c290400a8754060e9ead2</anchor>
      <arglist>(EPETRA_OBJECT_REF x, double *scalar)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_random</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a9b682fdc136bb85ce4a4094b1d4378e4</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_update</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>afe62deccc2562c7f7f6aacc720e836e0</anchor>
      <arglist>(EPETRA_OBJECT_REF x, EPETRA_DOUBLE scalara, EPETRA_OBJECT_REF a, EPETRA_DOUBLE scalarb, EPETRA_OBJECT_REF b, EPETRA_DOUBLE scalarx)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_vector_print</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a39bf8dce108b88cc4d988dd48bdd75ca</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_vector_destroy</name>
      <anchorfile>Epetra__C__wrappers_8cpp.html</anchorfile>
      <anchor>a2c3566882f46ae5e7094122972906ea2</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_C_wrappers.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__C__wrappers_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_DEREF</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ab9a200f3c9ea4de77fa3aa99aca1f790</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MANGLE</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a62d020536d4004873b851431ce251782</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>EPETRA_DOUBLE</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a81fc7f2f5c64595c2ea5deffcc2e42d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>EPETRA_INT</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a482571502bd17e9de31f2ab1f29f525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>EPETRA_LONG_LONG</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a5b8da9ba573fe32d489d0e085c6ab29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>EPETRA_OBJECT_PTR</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a82d93fc5fe1b632d90c9a070ca95e458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>EPETRA_OBJECT_REF</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ad0b5363a89309bdd6759f6f870827b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_mpicomm_create1</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a748e85e41fa0f5e821b60d18696a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_mpicomm_create2</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a3ca712a62107a47699e7647b34650d31</anchor>
      <arglist>(MPI_Comm *comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_serialcomm_create</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a97ba55663fa08e8936caaa3a003f5f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_comm_mypid</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a91e814a3525629bf2c3026e36ba13532</anchor>
      <arglist>(EPETRA_OBJECT_REF communicator)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_comm_numproc</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a32e0119b5fc7e5c3c86b0e5d3951132a</anchor>
      <arglist>(EPETRA_OBJECT_REF communicator)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_comm_barrier</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>afdce34dcd9369f19d90f1799b2be6fd4</anchor>
      <arglist>(EPETRA_OBJECT_REF communicator)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_comm_destroy</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a9effde9b47ce77eb1162b5b9e8ecdf6a</anchor>
      <arglist>(EPETRA_OBJECT_REF communicator)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create1</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>aac93f807d4a1ef2199b7a31c2e53c32e</anchor>
      <arglist>(EPETRA_INT numGlobalEquations, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create2</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a8e3d012116bb1e948fcdcf9cd5d95f85</anchor>
      <arglist>(EPETRA_INT numGlobalEquations, EPETRA_INT numMyElements, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create3</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a3c916018762f1f2b5dd3e6bfe44469a9</anchor>
      <arglist>(EPETRA_INT numGlobalEquations, EPETRA_INT numlocalEquations, int *updateList, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create1_64</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ae1d4ebe2b1a8d388ca757b36d29bb459</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalEquations, EPETRA_LONG_LONG indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create2_64</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a2f26e34544d976a8da272e4b1012afda</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalEquations, EPETRA_INT numMyElements, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_create3_64</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a218fbcfba0ed6164f0276b62e2eac052</anchor>
      <arglist>(EPETRA_LONG_LONG numGlobalEquations, EPETRA_INT numlocalEquations, long long *updateList, EPETRA_INT indexBase, EPETRA_OBJECT_REF comm)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_map_nummyelements</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a34f8bc668dffaf1641a37f064a090937</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>long long MANGLE()</type>
      <name>epetra_map_numglobalelements</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ac061ff8a9df56a97e3d42346dcefe01f</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>int *MANGLE()</type>
      <name>epetra_map_myglobalelements</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ae36f8acb7fe43f875aad25f3b93df767</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>long long *MANGLE()</type>
      <name>epetra_map_myglobalelements_64</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a551db9bec588832ffffa8176abac1f82</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_map_comm</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a06293583fd40651253092499cc45fa7b</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_map_destroy</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ac74fa7b7d3750f8706abea25bdd72cb5</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_vector_create1</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a93d4af11fc4a55201ec039ab564ef2b6</anchor>
      <arglist>(EPETRA_OBJECT_REF map)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_OBJECT_PTR MANGLE()</type>
      <name>epetra_vector_create2</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a01cb869fdcd019d20b98ae9f8336363b</anchor>
      <arglist>(EPETRA_INT Copy, EPETRA_OBJECT_REF map, double *V)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_putscalar</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>ac4d55b54bc3e4e1dd818c4f8845b2ad2</anchor>
      <arglist>(EPETRA_OBJECT_REF x, EPETRA_DOUBLE scalar)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_update</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>afe62deccc2562c7f7f6aacc720e836e0</anchor>
      <arglist>(EPETRA_OBJECT_REF x, EPETRA_DOUBLE scalara, EPETRA_OBJECT_REF a, EPETRA_DOUBLE scalarb, EPETRA_OBJECT_REF b, EPETRA_DOUBLE scalarx)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_norm1</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a39d82f24b0f55a0f9f2171559bad128b</anchor>
      <arglist>(EPETRA_OBJECT_REF x, double *result)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_norm2</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a7e95e5c54ac04d277ed696e555415850</anchor>
      <arglist>(EPETRA_OBJECT_REF x, double *result)</arglist>
    </member>
    <member kind="function">
      <type>int MANGLE()</type>
      <name>epetra_vector_random</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a9b682fdc136bb85ce4a4094b1d4378e4</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_vector_print</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a39bf8dce108b88cc4d988dd48bdd75ca</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
    <member kind="function">
      <type>void MANGLE()</type>
      <name>epetra_vector_destroy</name>
      <anchorfile>Epetra__C__wrappers_8h.html</anchorfile>
      <anchor>a2c3566882f46ae5e7094122972906ea2</anchor>
      <arglist>(EPETRA_OBJECT_REF x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_CombineMode.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CombineMode_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>Epetra_CombineMode</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Add</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa0d592a4b562059bc283e00b3704865c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Zero</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fab9f6920de535f04ccfe34d670fa2c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Insert</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa0a84e3d16cff840b05790b811b0152d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InsertAdd</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa49a07de8598ed7e3137658a59dc6e1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Average</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fab3c87ec2c47256239220b24e46acda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Epetra_Max</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa4b4fe7d865569e9053434353175d7fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Epetra_Min</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa7d73983f66c9bb58106670e862e8e067</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbsMax</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa3cf63171cbfdc26175f9909caf3d30ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AbsMin</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fa1313b0c3ed65d5659f72b41f377df9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Epetra_AddLocalAlso</name>
      <anchorfile>Epetra__CombineMode_8h.html</anchorfile>
      <anchor>aae659d58333dccaf8db7230bd834020fafcdd2795a8303b7b44be6acc91af2875</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Comm.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Comm_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_Comm</class>
  </compound>
  <compound kind="file">
    <name>Epetra_CompObject.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CompObject_8cpp</filename>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_CompObject.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CompObject_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
    <class kind="class">Epetra_CompObject</class>
  </compound>
  <compound kind="file">
    <name>Epetra_ConfigDefs.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__ConfigDefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_MAX</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a439f0f25b77064524df9886e9d6d5295</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_MIN</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a1ef97ba08679b4c53105114410cdd791</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_SGN</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a148719b55a9fb023904779b0ff3c70ff</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORTRAN_DISABLED</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a82bbfc642e574b328b60817fcbd6155e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_CHK_ERR</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a85f2377726d8fb4f623d7bd140642834</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_CHK_PTR</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>af35dc26b1ce85606d983bd606d289ee0</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_CHK_REF</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a18b66be39d4ab37c39ca0746bd4cb60d</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>Epetra_MinDouble</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a8c4ed25d086aed7129de171e806791b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>Epetra_MaxDouble</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>ac0e46d919d0cd1d3ed2d208ea2e12ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>Epetra_Overflow</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a14cfeab6e8e76b983ae424bb7efc6898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>Epetra_Underflow</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>ae972211ec6355b0231d9bc1d698cc9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>Epetra_FormatStdout</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a66da95f1254d16c745ee3695b7883672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DefaultTracebackMode</name>
      <anchorfile>Epetra__ConfigDefs_8h.html</anchorfile>
      <anchor>a51c59c63fdcd15cac572c1eaa9ee163a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsGraph_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__LongLongSerialDenseVector_8h" name="Epetra_LongLongSerialDenseVector.h" local="yes" imported="no">Epetra_LongLongSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
    <member kind="function">
      <type>void</type>
      <name>epetra_shellsort</name>
      <anchorfile>Epetra__CrsGraph_8cpp.html</anchorfile>
      <anchor>ae024469778ef5ff558ce681dd9b5d0f9</anchor>
      <arglist>(int *list, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epetra_crsgraph_compress_out_duplicates</name>
      <anchorfile>Epetra__CrsGraph_8cpp.html</anchorfile>
      <anchor>a5da06155d683477161ffc35112c679c9</anchor>
      <arglist>(int len, int *list, int &amp;newlen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsGraph_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__CrsGraphData_8h" name="Epetra_CrsGraphData.h" local="yes" imported="no">Epetra_CrsGraphData.h</includes>
    <class kind="class">Epetra_CrsGraph</class>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsGraphData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsGraphData_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CrsGraphData_8h" name="Epetra_CrsGraphData.h" local="yes" imported="no">Epetra_CrsGraphData.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsGraphData.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsGraphData_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
    <includes id="Epetra__DataAccess_8h" name="Epetra_DataAccess.h" local="yes" imported="no">Epetra_DataAccess.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__LongLongSerialDenseVector_8h" name="Epetra_LongLongSerialDenseVector.h" local="yes" imported="no">Epetra_LongLongSerialDenseVector.h</includes>
    <class kind="class">Epetra_CrsGraphData</class>
    <class kind="struct">Epetra_CrsGraphData::EntriesInOneRow</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData&lt; long long &gt;</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData&lt; int &gt;</class>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
    <includes id="Epetra__BLAS__wrappers_8h" name="Epetra_BLAS_wrappers.h" local="yes" imported="no">Epetra_BLAS_wrappers.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__CrsGraphData_8h" name="Epetra_CrsGraphData.h" local="yes" imported="no">Epetra_CrsGraphData.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Import__Util_8h" name="Epetra_Import_Util.h" local="yes" imported="no">Epetra_Import_Util.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="yes" imported="no">Epetra_Operator.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <class kind="class">Epetra_CrsMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsSingletonFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsSingletonFilter_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__LongLongVector_8h" name="Epetra_LongLongVector.h" local="yes" imported="no">Epetra_LongLongVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__CrsSingletonFilter_8h" name="Epetra_CrsSingletonFilter.h" local="yes" imported="no">Epetra_CrsSingletonFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_CrsSingletonFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__CrsSingletonFilter_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <class kind="class">Epetra_CrsSingletonFilter</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Data.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Data_8cpp</filename>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Data.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Data_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_Data</class>
  </compound>
  <compound kind="file">
    <name>Epetra_DataAccess.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__DataAccess_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>Epetra_DataAccess</name>
      <anchorfile>Epetra__DataAccess_8h.html</anchorfile>
      <anchor>ad1a985e79f94ad63030815a0d7d90928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Copy</name>
      <anchorfile>Epetra__DataAccess_8h.html</anchorfile>
      <anchor>ad1a985e79f94ad63030815a0d7d90928aad81934e8f3b9399beea932f0b0e57d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>View</name>
      <anchorfile>Epetra__DataAccess_8h.html</anchorfile>
      <anchor>ad1a985e79f94ad63030815a0d7d90928a688fad5d6c4f06f049549c2313e93cba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Directory.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Directory_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_Directory</class>
  </compound>
  <compound kind="file">
    <name>Epetra_DistObject.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__DistObject_8cpp</filename>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_DistObject.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__DistObject_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__SrcDistObject_8h" name="Epetra_SrcDistObject.h" local="yes" imported="no">Epetra_SrcDistObject.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <class kind="class">Epetra_DistObject</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Distributor.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Distributor_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_Distributor</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Export.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Export_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Export.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Export_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <class kind="class">Epetra_Export</class>
  </compound>
  <compound kind="file">
    <name>Epetra_FastCrsMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FastCrsMatrix_8cpp</filename>
    <includes id="Epetra__FastCrsMatrix_8h" name="Epetra_FastCrsMatrix.h" local="yes" imported="no">Epetra_FastCrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_FastCrsMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FastCrsMatrix_8h</filename>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="yes" imported="no">Epetra_Operator.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <class kind="class">Epetra_FastCrsOperator</class>
  </compound>
  <compound kind="file">
    <name>Epetra_FECrsGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FECrsGraph_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="yes" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_FECrsGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FECrsGraph_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <class kind="class">Epetra_FECrsGraph</class>
  </compound>
  <compound kind="file">
    <name>Epetra_FECrsMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FECrsMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="no" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="no" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="no" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="no" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="no" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="no" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="no" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_FECrsMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FECrsMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="no" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__CombineMode_8h" name="Epetra_CombineMode.h" local="no" imported="no">Epetra_CombineMode.h</includes>
    <class kind="class">Epetra_FECrsMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_FEVbrMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FEVbrMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__FEVbrMatrix_8h" name="Epetra_FEVbrMatrix.h" local="no" imported="no">Epetra_FEVbrMatrix.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="no" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="no" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="no" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="no" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="no" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="no" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="no" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="no" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_FEVbrMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FEVbrMatrix_8h</filename>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="no" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="no" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <class kind="class">Epetra_FEVbrMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_FEVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FEVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="no" imported="no">Epetra_FEVector.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="no" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="no" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="no" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="no" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="no" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="no" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="no" imported="no">Epetra_SerialDenseVector.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_FEVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__FEVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__CombineMode_8h" name="Epetra_CombineMode.h" local="no" imported="no">Epetra_CombineMode.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="no" imported="no">Epetra_MultiVector.h</includes>
    <class kind="class">Epetra_FEVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Flops.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Flops_8cpp</filename>
    <includes id="Epetra__Flops_8h" name="Epetra_Flops.h" local="yes" imported="no">Epetra_Flops.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Flops.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Flops_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_Flops</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Fortran_wrappers.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Fortran__wrappers_8cpp</filename>
    <includes id="Epetra__C__wrappers_8cpp" name="Epetra_C_wrappers.cpp" local="yes" imported="no">Epetra_C_wrappers.cpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_FORTRAN</name>
      <anchorfile>Epetra__Fortran__wrappers_8cpp.html</anchorfile>
      <anchor>abfe5309d408e388a7c78cd424f7c18b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Fortran_wrappers.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Fortran__wrappers_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_FORTRAN</name>
      <anchorfile>Epetra__Fortran__wrappers_8h.html</anchorfile>
      <anchor>abfe5309d408e388a7c78cd424f7c18b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_OBJECT_PTR</name>
      <anchorfile>Epetra__Fortran__wrappers_8h.html</anchorfile>
      <anchor>a081889b3e2d056f093335b424e7bf779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_ERROR_FLAG</name>
      <anchorfile>Epetra__Fortran__wrappers_8h.html</anchorfile>
      <anchor>a796aa69c4dece6aeea3d244b5c03317d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_GIDTypeSerialDenseVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__GIDTypeSerialDenseVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__LongLongSerialDenseVector_8h" name="Epetra_LongLongSerialDenseVector.h" local="yes" imported="no">Epetra_LongLongSerialDenseVector.h</includes>
    <class kind="class">Epetra_GIDTypeSerialDenseVector</class>
    <class kind="class">Epetra_GIDTypeSerialDenseVector&lt; int &gt;</class>
    <class kind="class">Epetra_GIDTypeSerialDenseVector&lt; long long &gt;</class>
  </compound>
  <compound kind="file">
    <name>Epetra_GIDTypeVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__GIDTypeVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__LongLongVector_8h" name="Epetra_LongLongVector.h" local="yes" imported="no">Epetra_LongLongVector.h</includes>
    <class kind="class">Epetra_GIDTypeVector</class>
    <class kind="class">Epetra_GIDTypeVector&lt; int &gt;</class>
    <class kind="class">Epetra_GIDTypeVector&lt; long long &gt;</class>
  </compound>
  <compound kind="file">
    <name>Epetra_HashTable.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__HashTable_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_HashTable</class>
    <class kind="struct">Epetra_HashTable::Node</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Import.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Import_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Import.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Import_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <class kind="class">Epetra_Import</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Import_Util.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Import__Util_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Import__Util_8h" name="Epetra_Import_Util.h" local="yes" imported="no">Epetra_Import_Util.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <namespace>Epetra_Import_Util</namespace>
    <member kind="function">
      <type>int</type>
      <name>TPackAndPrepareWithOwningPIDs</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a9401308c4023b15bf3f572bc7e919387</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, std::vector&lt; int &gt; &amp;pids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackAndPrepareWithOwningPIDs</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aa39b2cdcdb576dc9489d5d8bbe30b01f</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, std::vector&lt; int &gt; &amp;SourcePids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TUnpackWithOwningPIDsCount</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ad53d542bb0e4ffe11233fc8486aab38c</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackWithOwningPIDsCount</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ad233b537d1e31c435623782b61017499</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TUnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>abf2d29374a4cb081235d93bfda986129</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, int_type *CSR_colind, double *CSR_vals, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aeb743a5ccca637314632bd5d358e10a0</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, int *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a2d7af6e3a06a62e76b435b0968b1e9ae</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, long long *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TLowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ac2180405f6ddcbbdcd218435522dc60d</anchor>
      <arglist>(int N, const int *rowptr, int *colind_LID, const int_type *colind_GID, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, MapType1 &amp;NewColMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a6bca916f0583a6cd5f4a483f1054efd0</anchor>
      <arglist>(int N, const int *rowptr, int *colind, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a765137d806bfc72ff2ad0d88ec5c60ea</anchor>
      <arglist>(int N, const int *rowptr, int *colind_LID, long long *colind_GID, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Import_Util.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Import__Util_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <namespace>Epetra_Import_Util</namespace>
    <member kind="function">
      <type>int</type>
      <name>PackAndPrepareWithOwningPIDs</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aa39b2cdcdb576dc9489d5d8bbe30b01f</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, std::vector&lt; int &gt; &amp;SourcePids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackWithOwningPIDsCount</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ad233b537d1e31c435623782b61017499</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aeb743a5ccca637314632bd5d358e10a0</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, int *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a2d7af6e3a06a62e76b435b0968b1e9ae</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, long long *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a6bca916f0583a6cd5f4a483f1054efd0</anchor>
      <arglist>(int N, const int *rowptr, int *colind, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a765137d806bfc72ff2ad0d88ec5c60ea</anchor>
      <arglist>(int N, const int *rowptr, int *colind_LID, long long *colind_GID, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_IntSerialDenseMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntSerialDenseMatrix_8cpp</filename>
    <includes id="Epetra__IntSerialDenseMatrix_8h" name="Epetra_IntSerialDenseMatrix.h" local="yes" imported="no">Epetra_IntSerialDenseMatrix.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_IntSerialDenseMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntSerialDenseMatrix_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_IntSerialDenseMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_IntSerialDenseVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntSerialDenseVector_8cpp</filename>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_IntSerialDenseVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntSerialDenseVector_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__IntSerialDenseMatrix_8h" name="Epetra_IntSerialDenseMatrix.h" local="yes" imported="no">Epetra_IntSerialDenseMatrix.h</includes>
    <class kind="class">Epetra_IntSerialDenseVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_IntVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_IntVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__IntVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <class kind="class">Epetra_IntVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_InvOperator.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__InvOperator_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Epetra_InvOperator.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__InvOperator_8h</filename>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="yes" imported="no">Epetra_Operator.h</includes>
    <class kind="class">Epetra_InvOperator</class>
  </compound>
  <compound kind="file">
    <name>Epetra_JadMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__JadMatrix_8cpp</filename>
    <includes id="Epetra__JadMatrix_8h" name="Epetra_JadMatrix.h" local="yes" imported="no">Epetra_JadMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>Pragma</name>
      <anchorfile>Epetra__JadMatrix_8cpp.html</anchorfile>
      <anchor>a966e6191e380632b00b042081911b154</anchor>
      <arglist>(S)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_JadMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__JadMatrix_8h</filename>
    <includes id="Epetra__BasicRowMatrix_8h" name="Epetra_BasicRowMatrix.h" local="yes" imported="no">Epetra_BasicRowMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <class kind="class">Epetra_JadMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LAPACK.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LAPACK_8cpp</filename>
    <includes id="Epetra__LAPACK_8h" name="Epetra_LAPACK.h" local="yes" imported="no">Epetra_LAPACK.h</includes>
    <includes id="Epetra__LAPACK__wrappers_8h" name="Epetra_LAPACK_wrappers.h" local="yes" imported="no">Epetra_LAPACK_wrappers.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CHAR_MACRO</name>
      <anchorfile>Epetra__LAPACK_8cpp.html</anchorfile>
      <anchor>a4851db723cbdcc37d751d15536baa2cd</anchor>
      <arglist>(char_var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_LAPACK.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LAPACK_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_LAPACK</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LAPACK_wrappers.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LAPACK__wrappers_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>Epetra_fcd</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ae7c268b5446b1c3db6a4e5ba3c9008d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PREFIX</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>add51b53e8b628f95078327028dccb20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGECON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af991879275eca0da0d0d05b45c9f2da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>acb2906929702447e8a153acc7aa7fdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a47feef6eacf5263b2c3c2994037f027b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a511dc0d16fcb9824c3932f4c6d013d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEHRD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a660a2425988831732996f1578293019f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGELS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a0229bcb2073f45d575e6a39a9cf0cafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGELSS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a687d820cc3c781cf1897d83a675a0d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEQPF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ad87c587ba720c1c703668a4c3c686b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGERFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a3ece36f3d4a60cf40c4a353686cd4531</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGESDD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6f6688084ac906bf24233449131a87f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGESVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>abe81fd3d7a08ff67636a2c76e004ac1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGESV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7654300da70ed865552060f6344217da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGESVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac97f405a39ba3f3c8e0ef1e772e869cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGETRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8d16f73dad99b3ad3153292c8e812f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGEQRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2b25482ef5a53854a9593986c1c5dbb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGETRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ab2482aaf8536f4f91a2b3d2495a2448c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGETRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aec2ec12f5f6992919a40828bc0074e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGGEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6c6df2fd80c2f06a95bf1367b50c2d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGGLSE_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa7d274e5c845f9118ec13ec2da2a8653</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DGGSVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6b4cb8f0f9bca25fab25170c5e52bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DHSEQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>abd62422e9d3d535f0b85fc0ca8893a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLAIC1_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac9f3824c0e75d34b9bb4b82fe3d1a3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLAMCH_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa36e3a34b935617fc725e0bf3334d6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLARFT_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1c339f0b8b8d07c556b842e60fcb86f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DLASWP_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ad3a97617f8ece73e061401a0257fb5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DORGQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a45c9189d0310a09368aeec170534536b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DORGHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a04af55c977d33c98ffcfaa75c3de66b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DORMHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a57b1e4566b7cffb23287e33614872680</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOCON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>adee247502f8ce1d9f0aef353e804fbf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a555c497d093324476853f7a6525605af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPORFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a73c3932504a105fc969a0fb04adf0f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOSV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2f18772771365aa25c9b6a24c57984c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOSVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ae13b25353336cbfe214c99b9b1da9302</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOTRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa709c86ba017ef44acd34fee2e3a859c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOTRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2b07f4fb39565114b9bb43ca6b6e72c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DPOTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8eb76a227861434773cb716ada3feff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSPEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7a6d772b77a53352f8350b0b2a874d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSPGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a08d72359f7b0ca957ed07288f63d6b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSTEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8ebef5870f11ee66e97cdf58fcd37158</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYEVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ab251ee376d1b200502d47b5d60103cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6441fc0f6a67e7ffc739e453bf135e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYEVR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa9f5421b76875389f81ad8478ddaebed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a05d8e12cd87b090f3367fec869e4d7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af77440f9c458c47d4c650cf1f15a0ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DSYGVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aba75954be857e20cd24ca12d6f43ec7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTREVC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>afa7afaed6ee77ebd4e45bf376c82df08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTREXC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8569f3bb41d932ec2175e275c33ae7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DTRTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>adef46d5c75ac6535979d9ca794c87415</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGECON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a29fdc315eebfa3be3dce91d3590b797c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7cbfbb5c0082dd91788fd8373a4aa254</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1f74d3579881f3e7e3cfa7060194d7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a49c2722b310da838d707b1d01a73e32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEHRD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ab747f0ee91a283171ef4fe1d983c3cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGELS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7deecc5a8845f60d90767fc5f9811965</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGELSS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a69a7ca30a69e05707044365f38d0d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEQPF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af1d161562e0729faa0dfd2ed533080fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGERFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a373f0ccf627235abeaab0d8910ff69d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGESDD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac3881aaacd506438299cb32fa6ba0cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGESVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>abb983146a06a71c13abb5a8abf6ee114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGESV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a5dbc2883c8af700735d81abf33839070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGESVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a68145bd72f345024af35220e9ad90053</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGETRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a74d110a71f0360236cefd048e7abc905</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGEQRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6b718dfec0a2a125722c3204f3e9f5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGETRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>adece5a181b0a12b50613062b37bdd4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGETRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>acaa471ec24fedae6b6caa1c74714dace</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGGEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a559f1c7b619fe2c8e785d097f5f775ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGGLSE_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a378dc21ef7b2e42d73b09f853bfe87b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SGGSVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7fd92e1cf528f5108f5dd4501a7a3a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHSEQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a0217f2880a5bbf247eec9ac6143a3f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SLAMCH_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a65d1104bac5630a03631ac2233d07bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SLARFT_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9ee98c5a588f24d5acfaf9d6de3bf6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SORGQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ae9c521167fc127bebf334e724f585fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SORGHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9755ee220236dbe95f81226c626fde4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SORMHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a61709b7e17f41cad667a6350c6e4b293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOCON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8f2f5b669ecc5a1e586235142a8710fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7e2b827e4d2b741a19b3f81012d3f2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPORFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a41aa7f91d8a359876d2fa9a4b348c79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOSV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>adb3ee5b5b86a7d853a2debfe7b8e4ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOSVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a17743b0e38a1abec8622c9729ea0b536</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOTRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ae755d0f43bbc3cfa0041d82d9a634c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOTRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a81bc952560c5e404e52dc5ca92be6139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SPOTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4bfd220ee2511749d03d5ce6c3edbebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSPEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8ec48767ba1e4fd60d591d2b686d08f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSPGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1b529b28112453f1237e3f4bf3bd7510</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSTEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aebbdcc0f20425b8311822a3e1c4acfb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYEVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aaa01e4fce191b0c29cdf09986bc22bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a3006e2d85e77855d1bcf4e8873b4b0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYEVR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a82a5d398eae453a040130505142d2380</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa9a133838e0186659abdce5b203b65ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a20081474dcf450289babc3dfe9859f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSYGVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8e5083e1b8cf2f637e1f18639a60a7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STREVC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a40d0ade7b8853f3a92cdf91026c65afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STREXC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a66fbb548b695ac638e0e3b118fe626bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4af4831870260c89c582e5fb32e9eeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGECON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ad6cf6771a896c31f43be804088ae0c8c</anchor>
      <arglist>(Epetra_fcd norm, const int *n, const double *a, const int *lda, const double *anorm, double *rcond, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a622b72a4e5a0d3ac32f58db9c5c24802</anchor>
      <arglist>(const int *m, const int *n, const double *a, const int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aad35dfba188bac61c0d95451e76878f6</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6e67514e351134ff706094deb22073d6</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, int *ilo, int *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, const int *lwork, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEHRD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4fe5a40ced08e4492040e817c72f1deb</anchor>
      <arglist>(const int *n, const int *ilo, const int *ihi, double *A, const int *lda, double *tau, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGELS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4a6576f2283b3e59a229197b1d2ff3c7</anchor>
      <arglist>(Epetra_fcd ch, const int *m, const int *n, const int *nrhs, double *a, const int *lda, double *b, const int *ldb, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGELSS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a396f9cf863ce85339072e6ca757b155d</anchor>
      <arglist>(const int *m, const int *n, const int *nrhs, double *a, const int *lda, double *b, const int *ldb, double *s, const double *rcond, int *rank, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEQPF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a188daa5108fbe0dee7357fa080ff3714</anchor>
      <arglist>(const int *m, const int *n, double *a, const int *lda, int *jpvt, double *tau, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGERFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a5d8f5897b6863b28d43b9cdf0ac06658</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const double *a, const int *lda, const double *af, const int *ldaf, const int *ipiv, const double *b, const int *ldb, double *x, const int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGESDD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1ddd35415be90f00fcd7d296f70f6ff6</anchor>
      <arglist>(Epetra_fcd, const int *m, const int *n, double *a, const int *lda, double *s, double *u, const int *ldu, double *vt, const int *ldvt, double *work, const int *lwork, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGESVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9352ce47bc0158e676572580be1a5e35</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, double *a, const int *lda, double *s, double *u, const int *ldu, double *vt, const int *ldvt, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGESV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac6b5c4de42a00060b771abc0f7741265</anchor>
      <arglist>(const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGESVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aabfc222083985d345955ec6cc8393c57</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, const int *nrhs, double *a, const int *lda, double *af, const int *ldaf, int *ipiv, Epetra_fcd, double *r, double *c, double *b, const int *ldb, double *x, const int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGETRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8c410f492a434ee1fdd031f8abd87615</anchor>
      <arglist>(const int *m, const int *n, double *a, const int *lda, int *ipiv, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGEQRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9b712bb32d7795fb8baea8f1a71d274e</anchor>
      <arglist>(const int *m, const int *n, double *a, const int *lda, double *tau, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGETRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8fe8102eea99ead3c03c8db4ac73eb4c</anchor>
      <arglist>(const int *n, double *a, const int *lda, int *ipiv, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGETRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a70af58899d28c1e4e9ff688a9576c703</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const double *a, const int *lda, const int *ipiv, double *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGGEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a70dc13eba66086836221026d8829004c</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *b, const int *ldb, double *alphar, double *alphai, double *beta, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGGLSE_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ab5321ef88b984186fe44a8bf59c383cd</anchor>
      <arglist>(const int *m, const int *n, const int *p, double *a, const int *lda, double *b, const int *ldb, double *c, double *d, double *x, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DGGSVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ae7b07d2fdcbdfe8a0802983fa2864762</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *p, int *k, int *l, double *a, const int *lda, double *b, const int *ldb, double *alpha, double *beta, double *u, const int *ldu, double *v, const int *ldv, double *q, const int *ldq, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DHSEQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a16cc5ff417471982759208745897f1c5</anchor>
      <arglist>(Epetra_fcd job, Epetra_fcd, const int *n, const int *ilo, const int *ihi, double *h, const int *ldh, double *wr, double *wi, double *z, const int *ldz, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>double PREFIX</type>
      <name>DLAMCH_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>afe8302e072cf7317cd1475a2507bebd6</anchor>
      <arglist>(Epetra_fcd)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DLARFT_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7fbf049f293d58e3e0ec39e5b4243ff4</anchor>
      <arglist>(Epetra_fcd direct, Epetra_fcd storev, const int *n, const int *k, double *v, const int *ldv, double *tau, double *t, const int *ldt)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DORGQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a31be7ecbac7031b7018b8b6fa6ef129d</anchor>
      <arglist>(const int *m, const int *n, const int *k, double *a, const int *lda, const double *tau, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DORGHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac57afbe2377d57e51d90d289159bf553</anchor>
      <arglist>(const int *n, const int *ilo, const int *ihi, double *a, const int *lda, const double *tau, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DORMHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a47ef8142203ad65a01bbe2012c278393</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *ilo, const int *ihi, const double *a, const int *lda, const double *tau, double *c, const int *ldc, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOCON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7ec97d1c16d68a0eb1030ec021dcdbf9</anchor>
      <arglist>(Epetra_fcd, const int *n, const double *a, const int *lda, const double *anorm, double *rcond, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aac0c2edaed456178fa63aa46b96380cc</anchor>
      <arglist>(const int *n, const double *a, const int *lda, double *s, double *scond, double *amax, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPORFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8ddf4ebfb6e77dcb50629a6f5382a3bf</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const double *a, const int *lda, const double *af, const int *ldaf, const double *b, const int *ldb, double *x, const int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOSV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a0faa6834c50d3fd9f02f1952e67890b5</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const double *a, const int *lda, double *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOSVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa90541cd1792b02c987293d95b6d190b</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, const int *nrhs, double *a, const int *lda, double *af, const int *ldaf, Epetra_fcd, double *s, double *b, const int *ldb, double *x, const int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOTRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9656ecb90e75d2bc3618b8efe7b63ad5</anchor>
      <arglist>(Epetra_fcd, const int *n, double *a, const int *lda, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOTRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac17218c984a4dd3cd35bc5fd7ad67ef8</anchor>
      <arglist>(Epetra_fcd, const int *n, double *a, const int *lda, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DPOTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a202b89d92cb834454d8280471cdf015e</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const double *a, const int *lda, double *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSPEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a64c4f1fd9256821ae29bdfb8480388ac</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, double *ap, double *w, double *z, const int *ldz, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSPGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a98d6fba15f7c52e9151bd3684bf6bf3a</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, const int *n, double *ap, double *bp, double *w, double *z, const int *ldz, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSTEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a53424a4509a152ee764f65988fe22001</anchor>
      <arglist>(Epetra_fcd jobz, const int *n, double *d, double *e, double *z, const int *ldz, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYEVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a328fb5290150db2bf919fc4e433b814d</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *w, double *work, const int *lwork, int *iwork, const int *liwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ab37212e208738f4dbe2a44ec0f30f79a</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *w, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYEVR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a040fd0ed6b7bd7e153e58ee4c25109e4</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, const double *vl, const double *vu, const int *il, const int *iu, const double *abstol, int *m, double *w, double *z, const int *ldz, int *isuppz, double *work, const int *lwork, int *iwork, const int *liwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2a2c161813832e4254b10995d293a562</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, const double *vl, const double *vu, const int *il, const int *iu, const double *abstol, int *m, double *w, double *z, const int *ldz, double *work, const int *lwork, int *iwork, int *ifail, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a33b028e67f02354c8714fcdb1a3f7e9c</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *b, const int *ldb, double *w, double *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DSYGVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a363c76ebcee2e344c8c768a98bddbd27</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, double *a, const int *lda, double *b, const int *ldb, const double *vl, const double *vu, const int *il, const int *iu, const double *abstol, int *m, double *w, double *z, const int *ldz, double *work, const int *lwork, int *iwork, int *ifail, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTREVC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9e129558ee7f8a88a3a7e07d03cc8133</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, int *select, const int *n, const double *t, const int *ldt, double *vl, const int *ldvl, double *vr, const int *ldvr, const int *mm, int *m, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTREXC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af4bb5f0540590475b65956f80b8bf70a</anchor>
      <arglist>(Epetra_fcd, const int *n, double *t, const int *ldt, double *q, const int *ldq, int *ifst, int *ilst, double *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>DTRTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4b7bc97cfeab36ccb4490c3e167a02d1</anchor>
      <arglist>(Epetra_fcd uplo, Epetra_fcd trans, Epetra_fcd diag, const int *n, const int *nrhs, const double *a, const int *lda, double *b, const int *ldb, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGECON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a7352a74b713ea2f5bebe28d0e87ddaf9</anchor>
      <arglist>(Epetra_fcd norm, const int *n, const float *a, const int *lda, const float *anorm, float *rcond, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af41eb831c5c523ee311747cbc7384320</anchor>
      <arglist>(const int *m, const int *n, const float *a, const int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1e975f8dabdd83ccf5b8203cc88a1482</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *wr, float *wi, float *vl, const int *ldvl, float *vr, const int *ldvr, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2964dd58b1e31fa29a287dcf40b6ec55</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *wr, float *wi, float *vl, const int *ldvl, float *vr, const int *ldvr, int *ilo, int *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, const int *lwork, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEHRD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af806900e272b808dd98fed81b0ac7eef</anchor>
      <arglist>(const int *n, const int *ilo, const int *ihi, float *A, const int *lda, float *tau, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGELS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>ac889132eb6cc6a5cf2592e38de11de4b</anchor>
      <arglist>(Epetra_fcd ch, const int *m, const int *n, const int *nrhs, float *a, const int *lda, float *b, const int *ldb, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGELSS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a652557d7f392000efee154494e75ad94</anchor>
      <arglist>(const int *m, const int *n, const int *nrhs, float *a, const int *lda, float *b, const int *ldb, float *s, const float *rcond, int *rank, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEQPF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a0b7ff5fd0920bdb41b66c89b2fea9d13</anchor>
      <arglist>(const int *m, const int *n, float *a, const int *lda, int *jpvt, float *tau, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGERFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a6b2706814bf50c29d7c991b7e381b49e</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const float *a, const int *lda, const float *af, const int *ldaf, const int *ipiv, const float *b, const int *ldb, float *x, const int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGESDD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a88bee213f10774db708b964084f84656</anchor>
      <arglist>(Epetra_fcd, const int *m, const int *n, float *a, const int *lda, float *s, float *u, const int *ldu, float *vt, const int *ldvt, float *work, const int *lwork, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGESVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a463ac238728e6ebe2cd68109e03c53c8</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, float *a, const int *lda, float *s, float *u, const int *ldu, float *vt, const int *ldvt, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGESV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa6acf0bec48c70a369414f426fb99e97</anchor>
      <arglist>(const int *n, const int *nrhs, float *a, const int *lda, int *ipiv, float *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGESVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8f42b2e5dda4d78cd5bf656c2d5eb0da</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, const int *nrhs, float *a, const int *lda, float *af, const int *ldaf, int *ipiv, Epetra_fcd, float *r, float *c, float *b, const int *ldb, float *x, const int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGETRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a94f9cd283071d9d7966141854a9c38f8</anchor>
      <arglist>(const int *m, const int *n, float *a, const int *lda, int *ipiv, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGEQRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a96c54945d3c07da4568722a4be17b2ae</anchor>
      <arglist>(const int *m, const int *n, float *a, const int *lda, float *tau, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGETRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a3b8ad91f98d857e274504f28d4acfbd1</anchor>
      <arglist>(const int *n, float *a, const int *lda, int *ipiv, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGETRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a894984d28e557f7e09633574996e4241</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const float *a, const int *lda, const int *ipiv, float *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGGEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a646397392eb4f34219108567fe0905de</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *b, const int *ldb, float *alphar, float *alphai, float *beta, float *vl, const int *ldvl, float *vr, const int *ldvr, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGGLSE_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aefc7ff3b6f1a7019fd18f1af6d7095e5</anchor>
      <arglist>(const int *m, const int *n, const int *p, float *a, const int *lda, float *b, const int *ldb, float *c, float *d, float *x, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SGGSVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1d37578758e6e4cc22aa1c13bd2548e5</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *p, int *k, int *l, float *a, const int *lda, float *b, const int *ldb, float *alpha, float *beta, float *u, const int *ldu, float *v, const int *ldv, float *q, const int *ldq, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SHSEQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a14a95fe0e9b32fb2d270572754b58f36</anchor>
      <arglist>(Epetra_fcd job, Epetra_fcd, const int *n, const int *ilo, const int *ihi, float *h, const int *ldh, float *wr, float *wi, float *z, const int *ldz, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>float PREFIX</type>
      <name>SLAMCH_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1c41c01d94f1c847cad41c6ce3c66c56</anchor>
      <arglist>(Epetra_fcd)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SLARFT_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a409cd78b8ff86bf09678159ee4de9890</anchor>
      <arglist>(Epetra_fcd direct, Epetra_fcd storev, const int *n, const int *k, float *v, const int *ldv, float *tau, float *t, const int *ldt)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SORGQR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aad18ed022da9f66270a74424b1a15e41</anchor>
      <arglist>(const int *m, const int *n, const int *k, float *a, const int *lda, const float *tau, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SORGHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>af7e859bf26d9673aa8bcff752ee2a65e</anchor>
      <arglist>(const int *n, const int *ilo, const int *ihi, float *a, const int *lda, const float *tau, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SORMHR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1ca4b8503d3f8212918281fae12523b0</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *m, const int *n, const int *ilo, const int *ihi, const float *a, const int *lda, const float *tau, float *c, const int *ldc, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOCON_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a14a34264e0d08383ee9dab0d20d2e3aa</anchor>
      <arglist>(Epetra_fcd, const int *n, const float *a, const int *lda, const float *anorm, float *rcond, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOEQU_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa0d0395a914dc740eb627d4d33c43b3f</anchor>
      <arglist>(const int *n, const float *a, const int *lda, float *s, float *scond, float *amax, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPORFS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aace2441a091429057996a153edcd3400</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const float *a, const int *lda, const float *af, const int *ldaf, const float *b, const int *ldb, float *x, const int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOSV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a8aaaec006d4dd182740a336c50e49371</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const float *a, const int *lda, float *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOSVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a998e1632af764fc8e3d6811228a7a0b5</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, const int *nrhs, float *a, const int *lda, float *af, const int *ldaf, Epetra_fcd, float *s, float *b, const int *ldb, float *x, const int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOTRF_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a3eb1b4bd7d6301ec8c47ef0598a7c462</anchor>
      <arglist>(Epetra_fcd, const int *n, float *a, const int *lda, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOTRI_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a9f15f344686e9b08aeb131a38ab37d7a</anchor>
      <arglist>(Epetra_fcd, const int *n, float *a, const int *lda, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SPOTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a62ab70b3572b38942d4aec02140e3c77</anchor>
      <arglist>(Epetra_fcd, const int *n, const int *nrhs, const float *a, const int *lda, float *x, const int *ldx, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSPEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>acb3da7cc164c6a71e815a6520f315460</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, float *ap, float *w, float *z, const int *ldz, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSPGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a4a4247205bb71ef6da7f25446700e684</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, const int *n, float *ap, float *bp, float *w, float *z, const int *ldz, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSTEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a2c20552bc7ddc3a7e99fd010e85ae423</anchor>
      <arglist>(Epetra_fcd jobz, const int *n, float *d, float *e, float *z, const int *ldz, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYEVD_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>adcadae9c9a07fea5cb4147560790dec1</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *w, float *work, const int *lwork, int *iwork, const int *liwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYEV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a0223e137734ec7654714682a2af68b67</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *w, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYEVR_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a42486e4f83227e1b0054f11a70d90959</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, const float *vl, const float *vu, const int *il, const int *iu, const float *abstol, int *m, float *w, float *z, const int *ldz, int *isuppz, float *work, const int *lwork, int *iwork, const int *liwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYEVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a3ba7d06ea2b10209569a27632cdf2d92</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, const float *vl, const float *vu, const int *il, const int *iu, const float *abstol, int *m, float *w, float *z, const int *ldz, float *work, const int *lwork, int *iwork, int *ifail, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYGV_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aa062bbbfeb3268bda53dc7521305b925</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *b, const int *ldb, float *w, float *work, const int *lwork, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>SSYGVX_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>aeea60226a2d87212c9462e2e28a9d4b9</anchor>
      <arglist>(const int *itype, Epetra_fcd, Epetra_fcd, Epetra_fcd, const int *n, float *a, const int *lda, float *b, const int *ldb, const float *vl, const float *vu, const int *il, const int *iu, const float *abstol, int *m, float *w, float *z, const int *ldz, float *work, const int *lwork, int *iwork, int *ifail, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STREVC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a1a155216e056dc18a29b60975e3ba9c3</anchor>
      <arglist>(Epetra_fcd, Epetra_fcd, int *select, const int *n, const float *t, const int *ldt, float *vl, const int *ldvl, float *vr, const int *ldvr, const int *mm, int *m, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STREXC_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a08ce5d9ca7594c5bd6a2466638e91ff7</anchor>
      <arglist>(Epetra_fcd, const int *n, float *t, const int *ldt, float *q, const int *ldq, int *ifst, int *ilst, float *work, int *info)</arglist>
    </member>
    <member kind="function">
      <type>void PREFIX</type>
      <name>STRTRS_F77</name>
      <anchorfile>Epetra__LAPACK__wrappers_8h.html</anchorfile>
      <anchor>a45055c9546ca960451ef6d70514a30d0</anchor>
      <arglist>(Epetra_fcd uplo, Epetra_fcd trans, Epetra_fcd diag, const int *n, const int *nrhs, const float *a, const int *lda, float *b, const int *ldb, int *info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_LinearProblem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LinearProblem_8cpp</filename>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LinearProblem.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LinearProblem_8h</filename>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="yes" imported="no">Epetra_Operator.h</includes>
    <class kind="class">Epetra_LinearProblem</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LinearProblemRedistor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LinearProblemRedistor_8cpp</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__RowMatrixTransposer_8h" name="Epetra_RowMatrixTransposer.h" local="yes" imported="no">Epetra_RowMatrixTransposer.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__LinearProblem_8h" name="Epetra_LinearProblem.h" local="yes" imported="no">Epetra_LinearProblem.h</includes>
    <includes id="Epetra__LinearProblemRedistor_8h" name="Epetra_LinearProblemRedistor.h" local="yes" imported="no">Epetra_LinearProblemRedistor.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LinearProblemRedistor.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LinearProblemRedistor_8h</filename>
    <class kind="class">Epetra_LinearProblemRedistor</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LocalMap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LocalMap_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LocalMap.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LocalMap_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <class kind="class">Epetra_LocalMap</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongSerialDenseMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongSerialDenseMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__LongLongSerialDenseMatrix_8h" name="Epetra_LongLongSerialDenseMatrix.h" local="yes" imported="no">Epetra_LongLongSerialDenseMatrix.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongSerialDenseMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongSerialDenseMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_LongLongSerialDenseMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongSerialDenseVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongSerialDenseVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__LongLongSerialDenseVector_8h" name="Epetra_LongLongSerialDenseVector.h" local="yes" imported="no">Epetra_LongLongSerialDenseVector.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongSerialDenseVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongSerialDenseVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__LongLongSerialDenseMatrix_8h" name="Epetra_LongLongSerialDenseMatrix.h" local="yes" imported="no">Epetra_LongLongSerialDenseMatrix.h</includes>
    <class kind="class">Epetra_LongLongSerialDenseVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__LongLongVector_8h" name="Epetra_LongLongVector.h" local="yes" imported="no">Epetra_LongLongVector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_LongLongVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__LongLongVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <class kind="class">Epetra_LongLongVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Map.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Map_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Map.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Map_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <class kind="class">Epetra_Map</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MapColoring.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MapColoring_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__HashTable_8h" name="Epetra_HashTable.h" local="yes" imported="no">Epetra_HashTable.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__MapColoring_8h" name="Epetra_MapColoring.h" local="yes" imported="no">Epetra_MapColoring.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MapColoring.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MapColoring_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <class kind="class">Epetra_HashTable</class>
    <class kind="class">Epetra_MapColoring</class>
    <class kind="struct">Epetra_MapColoring::ListItem</class>
  </compound>
  <compound kind="file">
    <name>Epetra_matrix_data.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/src/</path>
    <filename>Epetra__matrix__data_8cpp</filename>
    <includes id="Epetra__matrix__data_8h" name="Epetra_matrix_data.h" local="no" imported="no">Epetra_matrix_data.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="no" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="no" imported="no">Epetra_Util.h</includes>
    <namespace>epetra_test</namespace>
    <member kind="function">
      <type>void</type>
      <name>get_node_ids</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>aad1d0b8b33173ebb40eb80acec17a1c1</anchor>
      <arglist>(int elem_id, int *node_ids)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>nodes_per_elem</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>a33863298af87f81f38c4b064231fc362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_matrix_data.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/src/</path>
    <filename>Epetra__matrix__data_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">epetra_test::matrix_data</class>
    <namespace>epetra_test</namespace>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiComm.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiComm_8cpp</filename>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiComm.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiComm_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__MpiDistributor_8h" name="Epetra_MpiDistributor.h" local="yes" imported="no">Epetra_MpiDistributor.h</includes>
    <includes id="Epetra__BasicDirectory_8h" name="Epetra_BasicDirectory.h" local="yes" imported="no">Epetra_BasicDirectory.h</includes>
    <includes id="Epetra__MpiCommData_8h" name="Epetra_MpiCommData.h" local="yes" imported="no">Epetra_MpiCommData.h</includes>
    <class kind="class">Epetra_MpiComm</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiCommData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiCommData_8cpp</filename>
    <includes id="Epetra__MpiCommData_8h" name="Epetra_MpiCommData.h" local="yes" imported="no">Epetra_MpiCommData.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiCommData.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiCommData_8h</filename>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
    <class kind="class">Epetra_MpiCommData</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiDistributor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiDistributor_8cpp</filename>
    <includes id="Epetra__MpiDistributor_8h" name="Epetra_MpiDistributor.h" local="yes" imported="no">Epetra_MpiDistributor.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiDistributor.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiDistributor_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <class kind="class">Epetra_MpiDistributor</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiSmpComm.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiSmpComm_8cpp</filename>
    <includes id="Epetra__MpiSmpComm_8h" name="Epetra_MpiSmpComm.h" local="yes" imported="no">Epetra_MpiSmpComm.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiSmpComm.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiSmpComm_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__MpiDistributor_8h" name="Epetra_MpiDistributor.h" local="yes" imported="no">Epetra_MpiDistributor.h</includes>
    <includes id="Epetra__MpiSmpCommData_8h" name="Epetra_MpiSmpCommData.h" local="yes" imported="no">Epetra_MpiSmpCommData.h</includes>
    <class kind="class">Epetra_MpiSmpComm</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiSmpCommData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiSmpCommData_8cpp</filename>
    <includes id="Epetra__MpiSmpCommData_8h" name="Epetra_MpiSmpCommData.h" local="yes" imported="no">Epetra_MpiSmpCommData.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MpiSmpCommData.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MpiSmpCommData_8h</filename>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
    <class kind="class">Epetra_MpiSmpCommData</class>
  </compound>
  <compound kind="file">
    <name>Epetra_MultiVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MultiVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_MultiVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__MultiVector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="yes" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <class kind="class">Epetra_MultiVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Object.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Object_8cpp</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Object.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Object_8h</filename>
    <includes id="Epetra__CombineMode_8h" name="Epetra_CombineMode.h" local="yes" imported="no">Epetra_CombineMode.h</includes>
    <includes id="Epetra__DataAccess_8h" name="Epetra_DataAccess.h" local="yes" imported="no">Epetra_DataAccess.h</includes>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_Object</class>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_TEST_FOR_EXCEPTION</name>
      <anchorfile>Epetra__Object_8h.html</anchorfile>
      <anchor>a80a03ae538a69d87ee54807a91edc05a</anchor>
      <arglist>(throw_exception_test, errCode, msg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Epetra__Object_8h.html</anchorfile>
      <anchor>a205840a760654db358b5208b487fe6ce</anchor>
      <arglist>(std::ostream &amp;os, const Epetra_Object &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_OffsetIndex.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OffsetIndex_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__OffsetIndex_8h" name="Epetra_OffsetIndex.h" local="yes" imported="no">Epetra_OffsetIndex.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OffsetIndex.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OffsetIndex_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_OffsetIndex</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Operator.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Operator_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_Operator</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiError.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiError_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiError.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiError_8h</filename>
    <class kind="class">Epetra_OskiError</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiMatrix_8h</filename>
    <includes id="Epetra__OskiMultiVector_8h" name="Epetra_OskiMultiVector.h" local="yes" imported="no">Epetra_OskiMultiVector.h</includes>
    <includes id="Epetra__OskiVector_8h" name="Epetra_OskiVector.h" local="yes" imported="no">Epetra_OskiVector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__OskiPermutation_8h" name="Epetra_OskiPermutation.h" local="yes" imported="no">Epetra_OskiPermutation.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <class kind="class">Epetra_OskiMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiMultiVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiMultiVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiMultiVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiMultiVector_8h</filename>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <class kind="class">Epetra_OskiMultiVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiPermutation.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiPermutation_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiPermutation.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiPermutation_8h</filename>
    <includes id="Epetra__OskiMatrix_8h" name="Epetra_OskiMatrix.h" local="yes" imported="no">Epetra_OskiMatrix.h</includes>
    <includes id="Epetra__OskiMultiVector_8h" name="Epetra_OskiMultiVector.h" local="yes" imported="no">Epetra_OskiMultiVector.h</includes>
    <class kind="class">Epetra_OskiPermutation</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiUtils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiUtils_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiUtils.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiUtils_8h</filename>
    <class kind="class">Epetra_OskiUtils</class>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiVector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_OskiVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__OskiVector_8h</filename>
    <includes id="Epetra__OskiMultiVector_8h" name="Epetra_OskiMultiVector.h" local="yes" imported="no">Epetra_OskiMultiVector.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <class kind="class">Epetra_OskiVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_RowMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__RowMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="yes" imported="no">Epetra_Operator.h</includes>
    <includes id="Epetra__SrcDistObject_8h" name="Epetra_SrcDistObject.h" local="yes" imported="no">Epetra_SrcDistObject.h</includes>
    <class kind="class">Epetra_RowMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_RowMatrixTransposer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__RowMatrixTransposer_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__RowMatrixTransposer_8h" name="Epetra_RowMatrixTransposer.h" local="yes" imported="no">Epetra_RowMatrixTransposer.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="yes" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_RowMatrixTransposer.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__RowMatrixTransposer_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="no" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_RowMatrixTransposer</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialComm.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialComm_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__BasicDirectory_8h" name="Epetra_BasicDirectory.h" local="yes" imported="no">Epetra_BasicDirectory.h</includes>
    <includes id="Epetra__SerialDistributor_8h" name="Epetra_SerialDistributor.h" local="yes" imported="no">Epetra_SerialDistributor.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialComm.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialComm_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__SerialCommData_8h" name="Epetra_SerialCommData.h" local="yes" imported="no">Epetra_SerialCommData.h</includes>
    <class kind="class">Epetra_SerialComm</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialCommData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialCommData_8cpp</filename>
    <includes id="Epetra__SerialCommData_8h" name="Epetra_SerialCommData.h" local="yes" imported="no">Epetra_SerialCommData.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialCommData.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialCommData_8h</filename>
    <includes id="Epetra__Data_8h" name="Epetra_Data.h" local="yes" imported="no">Epetra_Data.h</includes>
    <class kind="class">Epetra_SerialCommData</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseMatrix_8cpp</filename>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__SerialSymDenseMatrix_8h" name="Epetra_SerialSymDenseMatrix.h" local="yes" imported="no">Epetra_SerialSymDenseMatrix.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__SerialDenseOperator_8h" name="Epetra_SerialDenseOperator.h" local="yes" imported="no">Epetra_SerialDenseOperator.h</includes>
    <class kind="class">Epetra_SerialDenseMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseOperator.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseOperator_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_SerialDenseOperator</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseSolver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseSolver_8cpp</filename>
    <includes id="Epetra__SerialDenseSolver_8h" name="Epetra_SerialDenseSolver.h" local="yes" imported="no">Epetra_SerialDenseSolver.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseSolver.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseSolver_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__LAPACK_8h" name="Epetra_LAPACK.h" local="yes" imported="no">Epetra_LAPACK.h</includes>
    <class kind="class">Epetra_SerialDenseSolver</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseSVD.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseSVD_8cpp</filename>
    <includes id="Epetra__SerialDenseSVD_8h" name="Epetra_SerialDenseSVD.h" local="yes" imported="no">Epetra_SerialDenseSVD.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseSVD.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseSVD_8h</filename>
    <includes id="Epetra__SerialDenseOperator_8h" name="Epetra_SerialDenseOperator.h" local="yes" imported="no">Epetra_SerialDenseOperator.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="yes" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__LAPACK_8h" name="Epetra_LAPACK.h" local="yes" imported="no">Epetra_LAPACK.h</includes>
    <class kind="class">Epetra_SerialDenseSVD</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseVector_8cpp</filename>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDenseVector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDenseVector_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <class kind="class">Epetra_SerialDenseVector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDistributor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDistributor_8cpp</filename>
    <includes id="Epetra__SerialDistributor_8h" name="Epetra_SerialDistributor.h" local="yes" imported="no">Epetra_SerialDistributor.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="yes" imported="no">Epetra_SerialComm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialDistributor.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialDistributor_8h</filename>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <class kind="class">Epetra_SerialDistributor</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialSpdDenseSolver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialSpdDenseSolver_8cpp</filename>
    <includes id="Epetra__SerialSpdDenseSolver_8h" name="Epetra_SerialSpdDenseSolver.h" local="yes" imported="no">Epetra_SerialSpdDenseSolver.h</includes>
    <includes id="Epetra__SerialSymDenseMatrix_8h" name="Epetra_SerialSymDenseMatrix.h" local="yes" imported="no">Epetra_SerialSymDenseMatrix.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialSpdDenseSolver.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialSpdDenseSolver_8h</filename>
    <includes id="Epetra__SerialDenseSolver_8h" name="Epetra_SerialDenseSolver.h" local="yes" imported="no">Epetra_SerialDenseSolver.h</includes>
    <class kind="class">Epetra_SerialSpdDenseSolver</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialSymDenseMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialSymDenseMatrix_8cpp</filename>
    <includes id="Epetra__SerialSymDenseMatrix_8h" name="Epetra_SerialSymDenseMatrix.h" local="yes" imported="no">Epetra_SerialSymDenseMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_SerialSymDenseMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SerialSymDenseMatrix_8h</filename>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <class kind="class">Epetra_SerialSymDenseMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_SrcDistObject.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__SrcDistObject_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <class kind="class">Epetra_SrcDistObject</class>
  </compound>
  <compound kind="file">
    <name>epetra_test_err.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/</path>
    <filename>epetra__test__err_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPETRA_TEST_ERR</name>
      <anchorfile>epetra__test__err_8h.html</anchorfile>
      <anchor>afd74792dc8ddcf2d8e96566c260145d9</anchor>
      <arglist>(a, b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_test_functions.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/src/</path>
    <filename>Epetra__test__functions_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="no" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="no" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="no" imported="no">Epetra_MpiComm.h</includes>
    <namespace>epetra_test</namespace>
    <member kind="function">
      <type>bool</type>
      <name>global_check_for_flag_on_proc_0</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>a17c9ed8b19842979e7ed47ed45766929</anchor>
      <arglist>(const char *flag, int numargs, char **strargs, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>create_comm</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab48b54595ab18e6d73169f6533ec0e20</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_matrices</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab53a9212dec6a8356c33c3b7a5eaf27b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_matrices_LL</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ad6f38660e0322038cf6dca90e1af0acd</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_test_functions.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/src/</path>
    <filename>Epetra__test__functions_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <namespace>epetra_test</namespace>
    <member kind="function">
      <type>bool</type>
      <name>global_check_for_flag_on_proc_0</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>a17c9ed8b19842979e7ed47ed45766929</anchor>
      <arglist>(const char *flag, int numargs, char **strargs, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>create_comm</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab48b54595ab18e6d73169f6533ec0e20</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_matrices</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab53a9212dec6a8356c33c3b7a5eaf27b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Time.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Time_8cpp</filename>
    <includes id="Epetra__Time_8h" name="Epetra_Time.h" local="yes" imported="no">Epetra_Time.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Time.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Time_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <class kind="class">Epetra_Time</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Util.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Util_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Util_8h" name="Epetra_Util.h" local="yes" imported="no">Epetra_Util.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Directory_8h" name="Epetra_Directory.h" local="yes" imported="no">Epetra_Directory.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="yes" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__GIDTypeVector_8h" name="Epetra_GIDTypeVector.h" local="yes" imported="no">Epetra_GIDTypeVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <member kind="function" static="yes">
      <type>static Epetra_Map</type>
      <name>TCreate_Root_Map</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>a1bef3f273247a1c23d7e775018094ad4</anchor>
      <arglist>(const Epetra_Map &amp;usermap, int root)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>a58f03fd29aa11c4d8cdcb12144024b8e</anchor>
      <arglist>(T item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>a58e2f7613b2d540c026a1d982c571888</anchor>
      <arglist>(int item, const int *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>aab02e04b485af902f6801ad663d299c7</anchor>
      <arglist>(long long item, const long long *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>a4a29862d9e921470c594457615743097</anchor>
      <arglist>(T item, const int *list, const T *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>af1264f6e437b0d231e47e96442db3c76</anchor>
      <arglist>(int item, const int *list, const int *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>a203993b5d9aae1e84cdd13a2d0df3a88</anchor>
      <arglist>(long long item, const int *list, const long long *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_ExtractHbData</name>
      <anchorfile>Epetra__Util_8cpp.html</anchorfile>
      <anchor>ad7c5c08ef28be1b728f09bd9b4440e40</anchor>
      <arglist>(Epetra_CrsMatrix *A, Epetra_MultiVector *LHS, Epetra_MultiVector *RHS, int &amp;M, int &amp;N, int &amp;nz, int *&amp;ptr, int *&amp;ind, double *&amp;val, int &amp;Nrhs, double *&amp;rhs, int &amp;ldrhs, double *&amp;lhs, int &amp;ldlhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_Util.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Util_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Object_8h" name="Epetra_Object.h" local="yes" imported="no">Epetra_Object.h</includes>
    <class kind="class">Epetra_Util</class>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a58f03fd29aa11c4d8cdcb12144024b8e</anchor>
      <arglist>(T item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_LIB_DLL_EXPORT int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a7880430b787e1efeb4384da76883f2e5</anchor>
      <arglist>(int item, const int *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_LIB_DLL_EXPORT int</type>
      <name>Epetra_Util_binary_search</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a664482da0e0e8095aa12a946c6e57815</anchor>
      <arglist>(long long item, const long long *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a4a29862d9e921470c594457615743097</anchor>
      <arglist>(T item, const int *list, const T *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_LIB_DLL_EXPORT int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a6f45013a747c1497ff810566d1092fae</anchor>
      <arglist>(int item, const int *list, const int *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>EPETRA_LIB_DLL_EXPORT int</type>
      <name>Epetra_Util_binary_search_aux</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a5020d73fab6bfde588b51f5a9829d4da</anchor>
      <arglist>(long long item, const int *list, const long long *aux_list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_insert_empty_positions</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>ac7a6855f9d45938fffcadae1322148c6</anchor>
      <arglist>(T *&amp;array, int &amp;usedLength, int &amp;allocatedLength, int insertOffset, int numPositions, int allocChunkSize=32)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_insert</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>a6279c514f3c9de4ab10ce38e49897192</anchor>
      <arglist>(T item, int offset, T *&amp;list, int &amp;usedLength, int &amp;allocatedLength, int allocChunkSize=32)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Epetra_Util_ExtractHbData</name>
      <anchorfile>Epetra__Util_8h.html</anchorfile>
      <anchor>ad7c5c08ef28be1b728f09bd9b4440e40</anchor>
      <arglist>(Epetra_CrsMatrix *A, Epetra_MultiVector *LHS, Epetra_MultiVector *RHS, int &amp;M, int &amp;N, int &amp;nz, int *&amp;ptr, int *&amp;ind, double *&amp;val, int &amp;Nrhs, double *&amp;rhs, int &amp;ldrhs, double *&amp;lhs, int &amp;ldlhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Epetra_VbrMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__VbrMatrix_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="yes" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Distributor_8h" name="Epetra_Distributor.h" local="yes" imported="no">Epetra_Distributor.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_VbrMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__VbrMatrix_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="no" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__DistObject_8h" name="Epetra_DistObject.h" local="no" imported="no">Epetra_DistObject.h</includes>
    <includes id="Epetra__CompObject_8h" name="Epetra_CompObject.h" local="no" imported="no">Epetra_CompObject.h</includes>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="no" imported="no">Epetra_BLAS.h</includes>
    <includes id="Epetra__RowMatrix_8h" name="Epetra_RowMatrix.h" local="no" imported="no">Epetra_RowMatrix.h</includes>
    <includes id="Epetra__Operator_8h" name="Epetra_Operator.h" local="no" imported="no">Epetra_Operator.h</includes>
    <includes id="Epetra__CrsGraph_8h" name="Epetra_CrsGraph.h" local="no" imported="no">Epetra_CrsGraph.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="no" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <class kind="class">Epetra_VbrMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_VbrRowMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__VbrRowMatrix_8h</filename>
    <includes id="Epetra__BasicRowMatrix_8h" name="Epetra_BasicRowMatrix.h" local="yes" imported="no">Epetra_BasicRowMatrix.h</includes>
    <includes id="Epetra__VbrMatrix_8h" name="Epetra_VbrMatrix.h" local="yes" imported="no">Epetra_VbrMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <class kind="class">Epetra_VbrRowMatrix</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Vector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Vector_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
  </compound>
  <compound kind="file">
    <name>Epetra_Vector.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Vector_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <class kind="class">Epetra_Vector</class>
  </compound>
  <compound kind="file">
    <name>Epetra_Version.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/src/</path>
    <filename>Epetra__Version_8h</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>Epetra_Version</name>
      <anchorfile>Epetra__Version_8h.html</anchorfile>
      <anchor>aa3ca1503c10538d8ba4cf127ee3f6225</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsGraph/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph/</path>
    <filename>FECrsGraph_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FECrsGraph_2ExecuteTestProblems_8h" name="FECrsGraph/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="yes" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Young1</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a4e4c80fb1d7495c5bc1b378547342cfb</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsGraph_LL/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph_LL/</path>
    <filename>FECrsGraph__LL_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FECrsGraph__LL_2ExecuteTestProblems_8h" name="FECrsGraph_LL/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__FECrsGraph_8h" name="Epetra_FECrsGraph.h" local="yes" imported="no">Epetra_FECrsGraph.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Young1</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a4e4c80fb1d7495c5bc1b378547342cfb</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsMatrix/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix/</path>
    <filename>FECrsMatrix_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FECrsMatrix_2ExecuteTestProblems_8h" name="FECrsMatrix/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="yes" imported="no">Epetra_FEVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__matrix__data_8h" name="Epetra_matrix_data.h" local="no" imported="no">../src/Epetra_matrix_data.h</includes>
    <includes id="Epetra__test__functions_8h" name="Epetra_test_functions.h" local="no" imported="no">../src/Epetra_test_functions.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>submatrix_formats</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad8a7a9cac5383001040a86f55d4ae074</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsMatrix_LL/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix_LL/</path>
    <filename>FECrsMatrix__LL_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FECrsMatrix__LL_2ExecuteTestProblems_8h" name="FECrsMatrix_LL/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="yes" imported="no">Epetra_FEVector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseMatrix_8h" name="Epetra_SerialDenseMatrix.h" local="yes" imported="no">Epetra_SerialDenseMatrix.h</includes>
    <includes id="Epetra__matrix__data_8h" name="Epetra_matrix_data.h" local="no" imported="no">../src/Epetra_matrix_data.h</includes>
    <includes id="Epetra__test__functions_8h" name="Epetra_test_functions.h" local="no" imported="no">../src/Epetra_test_functions.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>submatrix_formats</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad8a7a9cac5383001040a86f55d4ae074</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEVbrMatrix/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVbrMatrix/</path>
    <filename>FEVbrMatrix_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FEVbrMatrix_2ExecuteTestProblems_8h" name="FEVbrMatrix/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FEVbrMatrix_8h" name="Epetra_FEVbrMatrix.h" local="yes" imported="no">Epetra_FEVbrMatrix.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="no" imported="no">Epetra_FEVector.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>quad1</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a07f1d02056c16e3ac7e74bec25a97919</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>quad2</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a3775c0529272fd57ba8d7a47c0a3a671</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a76204cf11f6dd114a18aeecb2a1d8a91</anchor>
      <arglist>(const Epetra_Map &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEVector/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVector/</path>
    <filename>FEVector_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="FEVector_2ExecuteTestProblems_8h" name="FEVector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntSerialDenseVector_8h" name="Epetra_IntSerialDenseVector.h" local="yes" imported="no">Epetra_IntSerialDenseVector.h</includes>
    <includes id="Epetra__SerialDenseVector_8h" name="Epetra_SerialDenseVector.h" local="yes" imported="no">Epetra_SerialDenseVector.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ab8b365624caa1a4ce584816946a17201</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec0</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a282f230db271a3ff22b4fa1e17b0bdd3</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec1</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ac8df62cea2a0e89b446422b436e2d6ce</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec2</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a7520c491f46cf5042ffea455e8a6e001</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec3</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a02d9d30a90f5f76273c00bbd3a2517bb</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec4</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ab103130482946d53d60244e6058a4e7a</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec5</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ae778b065388a5f71c110d86ba2f9eec5</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec6</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a78809445b7d825fdd98c762705bed4a6</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec7</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ad3e4aac5e11e355637644214b59485f6</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiVector/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MultiVector/</path>
    <filename>MultiVector_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="MultiVector_2ExecuteTestProblems_8h" name="MultiVector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="MultiVector_2BuildTestProblems_8h" name="MultiVector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__IntVector_8h" name="Epetra_IntVector.h" local="yes" imported="no">Epetra_IntVector.h</includes>
    <includes id="Epetra__Import_8h" name="Epetra_Import.h" local="yes" imported="no">Epetra_Import.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MatrixTests</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a969e4b4e73d8062afb3a685e6e8ac00e</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const Epetra_LocalMap &amp;LocalMap, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ab8b365624caa1a4ce584816946a17201</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a0976d533adfe5acf2342d2448fe29fb1</anchor>
      <arglist>(bool verbose, double *Residual, int NumVectors)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual1</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a2ae18baa30b5248931d1e55b72a44b79</anchor>
      <arglist>(bool verbose, double *Residual, int NumVectors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector/ExecuteTestProblems.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Vector/</path>
    <filename>Vector_2ExecuteTestProblems_8cpp</filename>
    <includes id="Epetra__BLAS_8h" name="Epetra_BLAS.h" local="yes" imported="no">Epetra_BLAS.h</includes>
    <includes id="Vector_2ExecuteTestProblems_8h" name="Vector/ExecuteTestProblems.h" local="yes" imported="no">ExecuteTestProblems.h</includes>
    <includes id="Vector_2BuildTestProblems_8h" name="Vector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MatrixTests</name>
      <anchorfile>Vector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a55a80817dc9d100ceb82c67f33ed3835</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const Epetra_LocalMap &amp;LocalMap, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VectorTests</name>
      <anchorfile>Vector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>ab6b6cd3d333e33d65ea10ee2b415d521</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual</name>
      <anchorfile>Vector_2ExecuteTestProblems_8cpp.html</anchorfile>
      <anchor>a8310e30f14337a422c713fb595a7457d</anchor>
      <arglist>(bool verbose, double *Residual)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsGraph/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph/</path>
    <filename>FECrsGraph_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Young1</name>
      <anchorfile>FECrsGraph_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a4e4c80fb1d7495c5bc1b378547342cfb</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsGraph_LL/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsGraph_LL/</path>
    <filename>FECrsGraph__LL_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Young1</name>
      <anchorfile>FECrsGraph__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a4e4c80fb1d7495c5bc1b378547342cfb</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsMatrix/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix/</path>
    <filename>FECrsMatrix_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>submatrix_formats</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad8a7a9cac5383001040a86f55d4ae074</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FECrsMatrix_LL/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix_LL/</path>
    <filename>FECrsMatrix__LL_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FECrsMatrix_8h" name="Epetra_FECrsMatrix.h" local="yes" imported="no">Epetra_FECrsMatrix.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>Drumm1</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa96cfd756c46efffe3436106150c96a8</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm2</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aeb1f47417127e0fd46eb911a3cc38267</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Drumm3</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a7b87ac7e8b08e70da73e88ed4bd827fe</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>submatrix_formats</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad8a7a9cac5383001040a86f55d4ae074</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rectangular</name>
      <anchorfile>FECrsMatrix__LL_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad20339b6541d0b8f6ca28742c168b041</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEVbrMatrix/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVbrMatrix/</path>
    <filename>FEVbrMatrix_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <member kind="function">
      <type>int</type>
      <name>quad1</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a07f1d02056c16e3ac7e74bec25a97919</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>quad2</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a3775c0529272fd57ba8d7a47c0a3a671</anchor>
      <arglist>(const Epetra_Map &amp;map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a76204cf11f6dd114a18aeecb2a1d8a91</anchor>
      <arglist>(const Epetra_Map &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>four_quads</name>
      <anchorfile>FEVbrMatrix_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>aa3bef89f2d082e3c0f35dfff8328219b</anchor>
      <arglist>(const Epetra_Comm &amp;Comm, bool preconstruct_graph, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEVector/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVector/</path>
    <filename>FEVector_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="yes" imported="no">Epetra_FEVector.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ab8b365624caa1a4ce584816946a17201</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec0</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a282f230db271a3ff22b4fa1e17b0bdd3</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec1</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ac8df62cea2a0e89b446422b436e2d6ce</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec2</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a7520c491f46cf5042ffea455e8a6e001</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec3</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a02d9d30a90f5f76273c00bbd3a2517bb</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec4</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ab103130482946d53d60244e6058a4e7a</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec5</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ae778b065388a5f71c110d86ba2f9eec5</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec6</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a78809445b7d825fdd98c762705bed4a6</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fevec7</name>
      <anchorfile>FEVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ad3e4aac5e11e355637644214b59485f6</anchor>
      <arglist>(Epetra_Comm &amp;Comm, bool verbose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiVector/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/MultiVector/</path>
    <filename>MultiVector_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__MultiVector_8h" name="Epetra_MultiVector.h" local="yes" imported="no">Epetra_MultiVector.h</includes>
    <includes id="MultiVector_2BuildTestProblems_8h" name="MultiVector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MatrixTests</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a2de4b6ba1d82bbb8dd5d7af282cb2fcd</anchor>
      <arglist>(const Epetra_BlockMap &amp;map, const Epetra_LocalMap &amp;LocalMap, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiVectorTests</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ab8b365624caa1a4ce584816946a17201</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int NumVectors, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a0976d533adfe5acf2342d2448fe29fb1</anchor>
      <arglist>(bool verbose, double *Residual, int NumVectors)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual1</name>
      <anchorfile>MultiVector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a2ae18baa30b5248931d1e55b72a44b79</anchor>
      <arglist>(bool verbose, double *Residual, int NumVectors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector/ExecuteTestProblems.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Vector/</path>
    <filename>Vector_2ExecuteTestProblems_8h</filename>
    <includes id="Epetra__BlockMap_8h" name="Epetra_BlockMap.h" local="yes" imported="no">Epetra_BlockMap.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__LocalMap_8h" name="Epetra_LocalMap.h" local="yes" imported="no">Epetra_LocalMap.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Vector_2BuildTestProblems_8h" name="Vector/BuildTestProblems.h" local="yes" imported="no">BuildTestProblems.h</includes>
    <includes id="epetra__test__err_8h" name="epetra_test_err.h" local="yes" imported="no">../epetra_test_err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>MatrixTests</name>
      <anchorfile>Vector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a1ee0324afe0090cd0887461622920a4e</anchor>
      <arglist>(const Epetra_BlockMap &amp;map, const Epetra_LocalMap &amp;LocalMap, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VectorTests</name>
      <anchorfile>Vector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>ab6b6cd3d333e33d65ea10ee2b415d521</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BadResidual</name>
      <anchorfile>Vector_2ExecuteTestProblems_8h.html</anchorfile>
      <anchor>a8310e30f14337a422c713fb595a7457d</anchor>
      <arglist>(bool verbose, double *Residual)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fematrix2.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix/</path>
    <filename>fematrix2_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fematrix2_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/fematrix2.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FECrsMatrix_LL/</path>
    <filename>LL_2fematrix2_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>LL_2fematrix2_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fevector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/FEVector/</path>
    <filename>fevector_8cpp</filename>
    <includes id="Epetra__FEVector_8h" name="Epetra_FEVector.h" local="yes" imported="no">Epetra_FEVector.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fevector_8cpp.html</anchorfile>
      <anchor>a2c3f6775325c30275d11c6abee2db6a0</anchor>
      <arglist>(int, char **)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>browser/doc/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/browser/doc/</path>
    <filename>browser_2doc_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>example/Lessons/Lesson01-Init/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson01-Init/</path>
    <filename>example_2Lessons_2Lesson01-Init_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>example/Lessons/Lesson02-Map-Vector/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson02-Map-Vector/</path>
    <filename>example_2Lessons_2Lesson02-Map-Vector_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>example/Lessons/Lesson03-Power-Method/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson03-Power-Method/</path>
    <filename>example_2Lessons_2Lesson03-Power-Method_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>example/Lessons/Lesson04-Sparse-Matrix-Fill/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson04-Sparse-Matrix-Fill/</path>
    <filename>example_2Lessons_2Lesson04-Sparse-Matrix-Fill_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>example/Lessons/Lesson05-Redistribution/index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson05-Redistribution/</path>
    <filename>example_2Lessons_2Lesson05-Redistribution_2index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>lesson01_mpi_on_its_own.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson01-Init/</path>
    <filename>lesson01__mpi__on__its__own_8cpp</filename>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>exampleRoutine</name>
      <anchorfile>lesson01__mpi__on__its__own_8cpp.html</anchorfile>
      <anchor>a13440410d4fa0805c80ac026cce0dda1</anchor>
      <arglist>(const Epetra_Comm &amp;comm, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson01__mpi__on__its__own_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson01_mpi_only_through_Epetra.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson01-Init/</path>
    <filename>lesson01__mpi__only__through__Epetra_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>exampleRoutine</name>
      <anchorfile>lesson01__mpi__only__through__Epetra_8cpp.html</anchorfile>
      <anchor>a13440410d4fa0805c80ac026cce0dda1</anchor>
      <arglist>(const Epetra_Comm &amp;comm, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson01__mpi__only__through__Epetra_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson01_no_mpi.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson01-Init/</path>
    <filename>lesson01__no__mpi_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>exampleRoutine</name>
      <anchorfile>lesson01__no__mpi_8cpp.html</anchorfile>
      <anchor>a13440410d4fa0805c80ac026cce0dda1</anchor>
      <arglist>(const Epetra_Comm &amp;comm, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson01__no__mpi_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson02_init_map_vec.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson02-Map-Vector/</path>
    <filename>lesson02__init__map__vec_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="no" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>exampleRoutine</name>
      <anchorfile>lesson02__init__map__vec_8cpp.html</anchorfile>
      <anchor>a13440410d4fa0805c80ac026cce0dda1</anchor>
      <arglist>(const Epetra_Comm &amp;comm, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson02__init__map__vec_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson02_read_modify_vec.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson02-Map-Vector/</path>
    <filename>lesson02__read__modify__vec_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="no" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>void</type>
      <name>exampleRoutine</name>
      <anchorfile>lesson02__read__modify__vec_8cpp.html</anchorfile>
      <anchor>a13440410d4fa0805c80ac026cce0dda1</anchor>
      <arglist>(const Epetra_Comm &amp;comm, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson02__read__modify__vec_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson03_power_method.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson03-Power-Method/</path>
    <filename>lesson03__power__method_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="no" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="no" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>double</type>
      <name>powerMethod</name>
      <anchorfile>lesson03__power__method_8cpp.html</anchorfile>
      <anchor>a86768e57e9c79a9a392d2c827da70d20</anchor>
      <arglist>(const Epetra_Operator &amp;A, const int niters, const double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson03__power__method_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lesson05_redistribution.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/Lessons/Lesson05-Redistribution/</path>
    <filename>lesson05__redistribution_8cpp</filename>
    <includes id="Epetra__SerialComm_8h" name="Epetra_SerialComm.h" local="no" imported="no">Epetra_SerialComm.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="no" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__Export_8h" name="Epetra_Export.h" local="no" imported="no">Epetra_Export.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="no" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="no" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="no" imported="no">Epetra_Version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EXAMPLE_USES_64BIT_GLOBAL_INDICES</name>
      <anchorfile>lesson05__redistribution_8cpp.html</anchorfile>
      <anchor>a02687267239541920643b276c7ca4c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>global_ordinal_type</name>
      <anchorfile>lesson05__redistribution_8cpp.html</anchorfile>
      <anchor>aaf7f2b784ad22f465bfb6d1457866fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>createCrsMatrix</name>
      <anchorfile>lesson05__redistribution_8cpp.html</anchorfile>
      <anchor>a931471241b390a35733671932b1b9682</anchor>
      <arglist>(const Epetra_Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>example</name>
      <anchorfile>lesson05__redistribution_8cpp.html</anchorfile>
      <anchor>a7d83d55bf4d0db7e8860c05b7daa1d52</anchor>
      <arglist>(const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>lesson05__redistribution_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_nonlinear/</path>
    <filename>main_8cc</filename>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>main_8cc.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>main_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memorytest_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsMatrix/</path>
    <filename>memorytest__main_8cpp</filename>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>memorytest__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/memorytest_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/CrsMatrix_LL/</path>
    <filename>LL_2memorytest__main_8cpp</filename>
    <includes id="Epetra__ConfigDefs_8h" name="Epetra_ConfigDefs.h" local="yes" imported="no">Epetra_ConfigDefs.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <includes id="Epetra__MpiComm_8h" name="Epetra_MpiComm.h" local="yes" imported="no">Epetra_MpiComm.h</includes>
    <includes id="Epetra__Version_8h" name="Epetra_Version.h" local="yes" imported="no">Epetra_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>LL_2memorytest__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>power_method.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/UG_Ex1/</path>
    <filename>power__method_8cpp</filename>
    <includes id="Epetra__Comm_8h" name="Epetra_Comm.h" local="yes" imported="no">Epetra_Comm.h</includes>
    <includes id="Epetra__Map_8h" name="Epetra_Map.h" local="yes" imported="no">Epetra_Map.h</includes>
    <includes id="Epetra__Vector_8h" name="Epetra_Vector.h" local="yes" imported="no">Epetra_Vector.h</includes>
    <includes id="Epetra__CrsMatrix_8h" name="Epetra_CrsMatrix.h" local="yes" imported="no">Epetra_CrsMatrix.h</includes>
    <member kind="function">
      <type>double</type>
      <name>power_method</name>
      <anchorfile>power__method_8cpp.html</anchorfile>
      <anchor>ab121e39df09a1027f30b3bb0d12d34f4</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rectMatrixTest.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/example/petra_howle/</path>
    <filename>rectMatrixTest_8cc</filename>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Petra_RDP_CRS_Matrix *</type>
      <name>readMatrixIn</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>a03d7f3fbc14ecaf000628c71ea89de23</anchor>
      <arglist>(FILE *dataFile, Petra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Petra_RDP_CRS_Matrix *</type>
      <name>readRectMatrixIn</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>a7b57bd1ed588d2eb1d368b71233cddc4</anchor>
      <arglist>(FILE *dataFile, Petra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Petra_RDP_Vector *</type>
      <name>readVectorIn</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>aac682d0a060cfdb18d1f36653eec1271</anchor>
      <arglist>(FILE *dataFile, Petra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matVecTest</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>a9dccd6c27c8666b0e1c5541baa5cc501</anchor>
      <arglist>(Petra_RDP_CRS_Matrix *Aptr, Petra_RDP_Vector *xptr, Petra_RDP_Vector *bptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>rectMatrixTest_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simple_mpi.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Comm/</path>
    <filename>simple__mpi_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>simple__mpi_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threaded_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/epetra/test/Comm/</path>
    <filename>threaded__main_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>threaded__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Basis</name>
    <filename>classBasis.html</filename>
    <member kind="function">
      <type></type>
      <name>Basis</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a5d5d39d14a48a6cbd232bdfabb6430a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Basis</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>afc87e4031544e0a3ab49a87a20fa3b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBasis</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a5bd573e58c8c7ad51f0e618d0b1979c0</anchor>
      <arglist>(int gp, double *x, double *u)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>phi</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a54b883c3bccf886679b2a061e2382f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>dphide</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>afbe824b4a84a214026c06429c8375727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>uu</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>aac42fadb30a3e3661d2d7ce5f81ea090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xx</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a28f46edadc8c02c47fd2b8244f599f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>duu</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a8112c1985f70586b2ecec0b1213d9725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eta</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>aa4131fe08c8ea42bec16f1be41749457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wt</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>a0d198dc553d74a069128164b7c43e32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dx</name>
      <anchorfile>classBasis.html</anchorfile>
      <anchor>ad147b5277ada00e27fef91d559a16697</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Epetra_CrsGraphData::EntriesInOneRow</name>
    <filename>structEpetra__CrsGraphData_1_1EntriesInOneRow.html</filename>
    <templarg>int_type</templarg>
    <member kind="function">
      <type>void</type>
      <name>AddEntry</name>
      <anchorfile>structEpetra__CrsGraphData_1_1EntriesInOneRow.html</anchorfile>
      <anchor>a29f606cdb23971e3f34cf43f39e22221</anchor>
      <arglist>(const int_type col_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEntries</name>
      <anchorfile>structEpetra__CrsGraphData_1_1EntriesInOneRow.html</anchorfile>
      <anchor>a2daab6fe153741b6200bb4c8b2a69f88</anchor>
      <arglist>(const int n_cols, const int_type *col_nums)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int_type &gt;</type>
      <name>entries_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1EntriesInOneRow.html</anchorfile>
      <anchor>a48892860720bc65ba8779791ed753fde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_BasicDirectory</name>
    <filename>classEpetra__BasicDirectory.html</filename>
    <base virtualness="virtual">Epetra_Directory</base>
    <member kind="function">
      <type>const int *</type>
      <name>AllMinGIDs</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a4217b6cf01d3af78f4724058eff11c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const long long *</type>
      <name>AllMinGIDs</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>af2dda35dc4fbda5c374c20208e0388ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_BasicDirectory &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>aff7a506ccc4f4b1dab17470c84471ce9</anchor>
      <arglist>(const Epetra_BasicDirectory &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_ProcListArrays</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a3da72e63c198663ba4ef202fc1536c92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addProcToList</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a8a2ce92ef1ab210b005fa603009d8c80</anchor>
      <arglist>(int proc, int LID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Generate</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>aa878f480418cad985b8afad8a5d8f46a</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const Epetra_Map &amp;</type>
      <name>DirectoryMap</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a04868e6cd939ed4f11e8dd01dfefdd07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const int_type *</type>
      <name>AllMinGIDs</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a0bd727a6ca8de3d72e44d6164de58067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GetDirectoryEntries</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>affc5c036ddee78ac151df0e6a312a638</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int NumEntries, const int_type *GlobalEntries, int *Procs, int *LocalEntries, int *EntrySizes, bool high_rank_sharing_procs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>DirectoryMap_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>aab1e979bf3279e07e7caf95d4910ebcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ProcList_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a8b67223ccffd08ddfcc7dde70be8c5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>ProcListLists_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a8522f85d61a2e483e6fd52b02472f7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ProcListLens_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>aa45f6fda1badfa77cb657b09654ff7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcLists_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>ac2d5dcdf8d98456a52947fc5431475be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>entryOnMultipleProcs_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a45b8501a2853c2d535e2ae0d1d35d98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>LocalIndexList_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>ae398ba6d256fed28b22a30d77623deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>SizeList_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a5493967eca322e47f033e939f951353f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>SizeIsConst_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a42599c368b28e279f4d56a4b69e4e651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>AllMinGIDs_int_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a2a8ba02948a7fd60e03bf5da2b1ffb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long *</type>
      <name>AllMinGIDs_LL_</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a7617a367dbdc64ba356a65f16f58f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BasicDirectory</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a30aae472b572d1af70f25a3ef1860a00</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BasicDirectory</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a5130743a795b9a49af35a0af79499ba4</anchor>
      <arglist>(const Epetra_BasicDirectory &amp;Directory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_BasicDirectory</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a583ecf49adcf781b9b37d7131c024dba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDirectoryEntries</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>add1a42332ec32bf222d6bb0eb0f00195</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int NumEntries, const int *GlobalEntries, int *Procs, int *LocalEntries, int *EntrySizes, bool high_rank_sharing_procs=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDirectoryEntries</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>ac18215cb5a6a087dc697736b80443f66</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int NumEntries, const long long *GlobalEntries, int *Procs, int *LocalEntries, int *EntrySizes, bool high_rank_sharing_procs=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GIDsAllUniquelyOwned</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a3cf6a44972255bf0299f6b6d4810c864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__BasicDirectory.html</anchorfile>
      <anchor>a3336cb9503fddaf843dcdfb9a75aec05</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_BasicRowMatrix</name>
    <filename>classEpetra__BasicRowMatrix.html</filename>
    <base>Epetra_CompObject</base>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a3752cfdbe79843cb1830e599d5f81917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateImportVector</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>af466dee06c2cd6ec6dcf516897a4e20f</anchor>
      <arglist>(int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateExportVector</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ac1c73264096e1afbdbf71c9cc5379cce</anchor>
      <arglist>(int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetImportExport</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a997be9e78d94501fd13afd36dca7d34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Comm *</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ada48afb5efc4e97968dc3cdb32b931db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map</type>
      <name>OperatorDomainMap_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aeb4aadc66ee7f7a18e016c7de4db7b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map</type>
      <name>OperatorRangeMap_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a799f368f9948e2b16ad7feddb93d8a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map</type>
      <name>RowMatrixRowMap_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a98246b76417296ce7a515617f29331c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map</type>
      <name>RowMatrixColMap_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>afeb006ce21b55c7a22d2aa0186c65142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a8b7a7d821622ad3cfa15e505359bd8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a7e9e38eef4948863929ceb94ea0f456c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>acd88a96916ffa2d78c42a2eca5bea50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormInf_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ac5c8b212221c2b6125ecadcbce848518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormOne_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a74e3b5005c3ec4fbc4ce1409c095132c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ae5cef2102c45181bd7f9238014b9b326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>acbd043142b1dcd32b84fd4f4eb4cb0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ad97b9c125c7e44632e580860373f5ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HasNormInf_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a8df5dacf349eedbbeafd2e19a9a94801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>LowerTriangular_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>af0d0089781c54480714e039bf69c7d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UpperTriangular_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a41ca93f9c6b606ed61c5d294d43a6a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HaveStructureConstants_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a554fee5f19df060986370b87e10371e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HaveNumericConstants_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a1dd82a7b8f07b3d0e03b43d0895a2db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HaveMaps_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aea5ca4916c7020b1a76202e045ef4949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ImportVector_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a18cdc5f9426b71006a98e5ff18671418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ExportVector_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ad71d510493c031532d126d1e2a6370b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Import *</type>
      <name>Importer_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a75e36dc51b27ba4771dd30a34d2ae175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Export *</type>
      <name>Exporter_</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ac7232d4cb83e3539f631e7f26bbfd2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BasicRowMatrix</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a80c1ee5b9a79bc112ac13bed6110b64c</anchor>
      <arglist>(const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_BasicRowMatrix</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a757d8682127d4a0e8a66223ac73f3043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaps</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a0b402cc45f8db02a7d7f5f789cd983d4</anchor>
      <arglist>(const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaps</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a378abd1a73e045bbdda4b233e21e3498</anchor>
      <arglist>(const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap, const Epetra_Map &amp;DomainMap, const Epetra_Map &amp;RangeMap)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a941129f987b0ea0ae34314bc0efa24e2</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a75e53cda9a8b20eb2b9d5533e06b90a0</anchor>
      <arglist>(int CurEntry, double *&amp;Value, int &amp;RowIndex, int &amp;ColIndex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aa18e2b67b7d22488e7591538b8e7514f</anchor>
      <arglist>(int CurEntry, double const *&amp;Value, int &amp;RowIndex, int &amp;ColIndex) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>adbb647235f26b90302626346bd4f60fa</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a62f50eb10bd0111ce21db142b26e999a</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a271e90514994b2e187eae10ee4f754d1</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a1aeebb297d05a24797b82929aba560bb</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>abf67893b68bae2a65bca929d6081e6c8</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a41cab81299ac6e7cfc432bf5101d5c4c</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a131efab50ba49826e0581bacf3fdfb4c</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a46c64b7fc6c7ebe91c4806e7459f7801</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>abf7c3388e1044b961ad5816702070e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>af31047d4cf4f6841f06899a171d71544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a94cc0de8e438a493765b8fc36b5a48cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a4ad56f0696f28997b1a2fb232beb8d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a263c4e6af01479fd813c9850bf0aa7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ad73e4e350ba6f99c597c701987bff4d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a76bb9b596ed5af4f70e85d5b008b452b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>acab467f3eb2509dc88757a3381072ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a3d79aba801dd1015957e21083dceaf95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aaf4baee41bf7782b9ff93c20e1867cb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a8156ba39e63bde21ef045ab250969db0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ae04f1803af268be43fa71fb769d203cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a7c720fb66e3c0f5cab30fef84812b580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a4dd9f6aa8d065ca8e44ff34bc2cd0d62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>accd16e1bd7a28c5e3c18a7d70d79442a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>adf894a99704e69baa8b90104e13d7e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a2536cc73550acb44a48ba1cffc01f055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>afaad8a1854ec6521b708c26af4b5b1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a1e1a11bbc5f528578a716e51c38cbf13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>af67d62c6ed949edba0c0aee2d769d3cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a8d0c31b864ca8ae37c07d13efc5f3a75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a5a7e929fd32185699a9570a432f8edb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a809dcaa219888c8f65ad81984f2a1e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a979649e0640ace5ba5ad07a1fb42143b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a10385cec02ba697dfe0d3999af0339d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a2bba0f499cfe091089bd8f4bc8feae0d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aa0113bf35f27ec1cdbdf71e1963990be</anchor>
      <arglist>(bool use_transpose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a32770db9c9ae9517bc9a26f97518ca75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ac1c9a8b885c52fc5766b22ad1927a580</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ae915d99bd62265684570a9a003f1b0ac</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a35b914b9a46b1193c891e31b9121b6c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a0775a3e18cc3bae84b7d67700d222f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>Importer</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>a77cf5b9f0440301624de15fb85e89274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Export *</type>
      <name>Exporter</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>aed86e44ab23714256cca987e3f514e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeStructureConstants</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>ac939e09fe6e556923c33f0c97f14d933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeNumericConstants</name>
      <anchorfile>classEpetra__BasicRowMatrix.html</anchorfile>
      <anchor>acb7d5af69fd1e72b5a1f6c31cc5d926a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_BLAS</name>
    <filename>classEpetra__BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>Epetra_BLAS</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a8e4e2d564543a813e06462a599ed5b88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BLAS</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a40a2dc7741eea3b947a11280c0ad7ba3</anchor>
      <arglist>(const Epetra_BLAS &amp;BLAS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_BLAS</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a65cd61f7e045c7a41d75e4b073b116e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>ASUM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a23af89a9c61b3e5de03d93df7ce49b5c</anchor>
      <arglist>(const int N, const float *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ASUM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a75b6c1eef8e2ba0158fa9040f65543d3</anchor>
      <arglist>(const int N, const double *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>DOT</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a1cf741923ec0f2716b17dbda77a9bda2</anchor>
      <arglist>(const int N, const float *X, const float *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DOT</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>ae6ee511471ae622a5b84b4009379e96a</anchor>
      <arglist>(const int N, const double *X, const double *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>NRM2</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a22a12191844edb5c6240485051d56cc0</anchor>
      <arglist>(const int N, const float *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NRM2</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>adda9ce1b6a04d4ca867a2b7070692a5a</anchor>
      <arglist>(const int N, const double *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a6330118fdecdcacd5275ee165e7c8d54</anchor>
      <arglist>(const int N, const float ALPHA, float *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>add6fa15d402ea0d9ec8e17a2ddbeac87</anchor>
      <arglist>(const int N, const double ALPHA, double *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>ac0a7d2c6f6ed43afc6fc6759d3fa1e43</anchor>
      <arglist>(const int N, const float *X, float *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>aeb6c05132437d0dabc7941e4002b4e6e</anchor>
      <arglist>(const int N, const double *X, double *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IAMAX</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a78707fab046dad32813cd43ca9c47c6d</anchor>
      <arglist>(const int N, const float *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IAMAX</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a9ff11dd825b62058137deb00128ea393</anchor>
      <arglist>(const int N, const double *X, const int INCX=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a00392d08db6c1496bba1796e82918159</anchor>
      <arglist>(const int N, const float ALPHA, const float *X, float *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a76948455926e537176177506ebf446ce</anchor>
      <arglist>(const int N, const double ALPHA, const double *X, double *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a3fd15a592caf9b557f15101e3c1c9420</anchor>
      <arglist>(const char TRANS, const int M, const int N, const float ALPHA, const float *A, const int LDA, const float *X, const float BETA, float *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a9d2747a01ca8c910e2d8ce7e269e8dd0</anchor>
      <arglist>(const char TRANS, const int M, const int N, const double ALPHA, const double *A, const int LDA, const double *X, const double BETA, double *Y, const int INCX=1, const int INCY=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>acf62a034c9f700b89f37c95c4316d5c7</anchor>
      <arglist>(const char TRANSA, const char TRANSB, const int M, const int N, const int K, const float ALPHA, const float *A, const int LDA, const float *B, const int LDB, const float BETA, float *C, const int LDC) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a707a13b43c9cd69615264f62d662d6fd</anchor>
      <arglist>(const char TRANSA, const char TRANSB, const int M, const int N, const int K, const double ALPHA, const double *A, const int LDA, const double *B, const int LDB, const double BETA, double *C, const int LDC) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>ad22cf93dd1383cbb7468df5247b1baf0</anchor>
      <arglist>(const char SIDE, const char UPLO, const int M, const int N, const float ALPHA, const float *A, const int LDA, const float *B, const int LDB, const float BETA, float *C, const int LDC) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a8915dd5dd97a20ddc9b75f65a8da813d</anchor>
      <arglist>(const char SIDE, const char UPLO, const int M, const int N, const double ALPHA, const double *A, const int LDA, const double *B, const int LDB, const double BETA, double *C, const int LDC) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a6229f5ec8fa7134939dff3b020f13566</anchor>
      <arglist>(const char SIDE, const char UPLO, const char TRANSA, const char DIAG, const int M, const int N, const float ALPHA, const float *A, const int LDA, float *B, const int LDB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a64985053cc6aa8be4f135bd48a081bf8</anchor>
      <arglist>(const char SIDE, const char UPLO, const char TRANSA, const char DIAG, const int M, const int N, const double ALPHA, const double *A, const int LDA, double *B, const int LDB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYRK</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>ab950fc1d5d208fb3c059e9757b52a6a1</anchor>
      <arglist>(const char UPLO, const char TRANS, const int N, const int K, const float ALPHA, const float *A, const int LDA, const float BETA, float *C, const int LDC) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYRK</name>
      <anchorfile>classEpetra__BLAS.html</anchorfile>
      <anchor>a6dc23e4f9b535d1bf5d11b5070300a4f</anchor>
      <arglist>(const char UPLO, const char TRANS, const int N, const int K, const double ALPHA, const double *A, const int LDA, const double BETA, double *C, const int LDC) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_BlockMap</name>
    <filename>classEpetra__BlockMap.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesIsType</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad6d3d4f4a59d8f6230677029985a73b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesIsType</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad6d3d4f4a59d8f6230677029985a73b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aec89fefa5cc46e08d3973c5c3da6ba8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_BlockMapData *</type>
      <name>BlockMapData_</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a88105ec1d2085d7d0f33ccfc0b19e69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>GlobalToLocalSetup</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>af812cd1083d0a5e8e7e53cb9e7603e9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>DetermineIsOneToOne</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a6d7e77541a19841ca8ea32d0d327ec0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>IsDistributedGlobal</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a9218d40c9284f59f8771e9f60c82753c</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CheckValidNGE</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>af2b758128705899f2d7b9e592eaaf53d</anchor>
      <arglist>(long long NumGlobalElements)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>EndOfConstructorOps</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>abbccfbb7dab92ad7af09368e095898f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstructAutoUniform</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a508344f0d936b37c6d789f38bacda423</anchor>
      <arglist>(long long NumGlobal_Elements, int Element_Size, long long Index_Base, const Epetra_Comm &amp;comm, bool IsLongLong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstructUserLinear</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a1968f878096ca9d4f0aa29e48bbe557c</anchor>
      <arglist>(long long NumGlobal_Elements, int NumMy_Elements, int Element_Size, long long Index_Base, const Epetra_Comm &amp;comm, bool IsLongLong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstructUserConstant</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ae1882373eca7a8c1bd9f7c28c463f57d</anchor>
      <arglist>(int_type NumGlobal_Elements, int NumMy_Elements, const int_type *myGlobalElements, int Element_Size, int_type indexBase, const Epetra_Comm &amp;comm, bool IsLongLong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstructUserVariable</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5b2c48dd7b6ef710b958fa0909780ed5</anchor>
      <arglist>(int_type NumGlobal_Elements, int NumMy_Elements, const int_type *myGlobalElements, const int *elementSizeList, int_type indexBase, const Epetra_Comm &amp;comm, bool IsLongLong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstructUserConstantNoComm</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad92cf65a19426e2518cd99974c0b5bc8</anchor>
      <arglist>(int_type NumGlobal_Elements, int NumMy_Elements, const int_type *myGlobalElements, int ElementSize, int_type indexBase, const Epetra_Comm &amp;comm, bool IsLongLong, bool UserIsDistributedGlobal, int_type UserMinAllGID, int_type UserMaxAllGID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int_type &amp;</type>
      <name>MyGlobalElementVal</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>add26fabce765b1d99c09243788287ed7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int_type</type>
      <name>MyGlobalElementValGet</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a2d5030f0a1f350defbd475042951092e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>SizeMyGlobalElement</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a09841df589f2c48494c8c093f5cea2e5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>TGlobalToLocalSetup</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a67f4d79809a622786e20ddbe7f064408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long &amp;</type>
      <name>MyGlobalElementVal</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aca2e8d4b17daa6555ee32b7ad1ac5b73</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long</type>
      <name>MyGlobalElementValGet</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>acc26d871d3f913c8414e0ee076972f89</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>SizeMyGlobalElement</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a18ba81f2f77f7b223be581f8833b8909</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int &amp;</type>
      <name>MyGlobalElementVal</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ae09a18a1af192f09fbb1f842d841bba8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MyGlobalElementValGet</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a33e877e64f5ab8cf1c5831ba97984e6c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>SizeMyGlobalElement</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a18ba81f2f77f7b223be581f8833b8909</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_Directory</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ac3372eb5708115b3095f01b37e6c1815</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_LocalMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a8ce93d8ef91ad3ef3d550c2bc25e7c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5941203fc98a8d9bdb79a32d070b4583</anchor>
      <arglist>(int NumGlobalElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>acad6020893a957cf3c988bbcd451d219</anchor>
      <arglist>(long long NumGlobalElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ae84119650a054c6834e4a2e5cbe00f6a</anchor>
      <arglist>(long long NumGlobalElements, int ElementSize, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aa41066a9457d18d8bf5c64c873a95480</anchor>
      <arglist>(int NumGlobalElements, int NumMyElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a8c7ce35d94418a03743493b53f3a775c</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ab1ad9d0577fd081333865c55ac830474</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, int ElementSize, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>afe05ca45ffccf1d037b497702dcc4971</anchor>
      <arglist>(int NumGlobalElements, int NumMyElements, const int *MyGlobalElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad56b6ff9481f3cdd3591148ed811156e</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, int ElementSize, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a67123632de53ad834b7fc56629ebf1d5</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, int ElementSize, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a911491bf44f662dfba5f74c804480a42</anchor>
      <arglist>(int NumGlobalElements, int NumMyElements, const int *MyGlobalElements, const int *ElementSizeList, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>adbde77884bcb0fc0f7572878ec7a014f</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, const int *ElementSizeList, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5d66f592c9dfc49b1a9ebaa45860cdf9</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, const int *ElementSizeList, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>add5e453a9d1231ccfae2f4b2a63c736f</anchor>
      <arglist>(long long NumGlobal_Elements, int NumMy_Elements, const long long *myGlobalElements, int ElementSize, int indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, long long UserMinAllGID, long long UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a7d145a1099a3da42727a7b7519e25239</anchor>
      <arglist>(long long NumGlobal_Elements, int NumMy_Elements, const long long *myGlobalElements, int ElementSize, long long indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, long long UserMinAllGID, long long UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a07f2fec5e782fc7e8ed3eb65b33e0f5a</anchor>
      <arglist>(int NumGlobal_Elements, int NumMy_Elements, const int *myGlobalElements, int ElementSize, int indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, int UserMinAllGID, int UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a920e6a54a30f51e8e114c94e1c71d315</anchor>
      <arglist>(const Epetra_BlockMap &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>abf6f2ce7f5359f8d3479ba01c5c32794</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoteIDList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4776cc8a95a62fd9dbc52c38e6d1abf6</anchor>
      <arglist>(int NumIDs, const int *GIDList, int *PIDList, int *LIDList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoteIDList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a3e6c57c609ddd9c7d13cdb2bf05c1b62</anchor>
      <arglist>(int NumIDs, const long long *GIDList, int *PIDList, int *LIDList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoteIDList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4a31090fb97db5dde0848e0008d02d54</anchor>
      <arglist>(int NumIDs, const int *GIDList, int *PIDList, int *LIDList, int *SizeList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoteIDList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a117f94fd6bfdae54e8330db3264a54cd</anchor>
      <arglist>(int NumIDs, const long long *GIDList, int *PIDList, int *LIDList, int *SizeList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4a157ce2b2b18f427a0c180fa859ee2d</anchor>
      <arglist>(int GID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>abad61afd2259342178c5f68c9b304376</anchor>
      <arglist>(long long GID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a6a59f067d4ea8a8d4135d356ee7dccb8</anchor>
      <arglist>(int LID) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GID64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad3e06f0f3626bdd410df2701a0bcff19</anchor>
      <arglist>(int LID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindLocalElementID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ab14177fa574331709bab0a67826e6e97</anchor>
      <arglist>(int PointID, int &amp;ElementID, int &amp;ElementOffset) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a47757d1dc20c1b4249c7600ac26571ff</anchor>
      <arglist>(int GID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>adb715e2a2142d901be1846ca213e28b0</anchor>
      <arglist>(long long GID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a455e9bea5b0a8c98a686288b5623dfbd</anchor>
      <arglist>(int lid) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAllGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a7f65fd6c9b1f686220a902ad734a32d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MinAllGID64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ab8a40f545fad6e288701d6aff7a5424b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAllGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ac2e161a5b9e61746e2562822541f53e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MaxAllGID64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a8b94dcc109b018b9eb432d5a742fedd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinMyGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a0e60d4b956e1684011192008af796c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MinMyGID64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a8d95e1fd943a5a87b3390b577e419eea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxMyGID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>acb2a6ae98e2175493a7db90c8e9aa16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MaxMyGID64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ad89c7662209195099d79b196b750c84e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinLID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aeef2c8d87a131cbf694aa4c6e429230a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxLID</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a23eb08f4961b3c4915a02af09f88be7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a11444b4505151532285779aa2edd0c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalElements64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a2921152a9937b653fc6cb0b764dcb461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5c424f65970b65cc4bfd141202086276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4df7828ef4eb591d542cde9cfd923793</anchor>
      <arglist>(int *MyGlobalElementList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>af33516e388b02ca6605a888d0c9c38d9</anchor>
      <arglist>(long long *MyGlobalElementList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyGlobalElementsPtr</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>acbebbfc97e006f42846a07b99ef87921</anchor>
      <arglist>(int *&amp;MyGlobalElementList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyGlobalElementsPtr</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a66eb190ada4ce5c194e6abdb36fb71e1</anchor>
      <arglist>(long long *&amp;MyGlobalElementList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a1e8c2135e3d56f7e448195bb4300c2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a56b9cf1d8068e2f8b73a0b5d35c3b309</anchor>
      <arglist>(int LID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FirstPointInElement</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aaa471673a8882ab42609764bb0d31de6</anchor>
      <arglist>(int LID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4237313745bc3d165252a0a0acfd0aed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a2a5f8bc1e8136001039343034aede042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalPoints</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a236b5627ebc42f7bc64233d9efa109a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalPoints64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a1852b46ff8f43c374ca50b2efd169788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyPoints</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ac8e87730c0b0829fb17014a7382914bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinMyElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a51571f41be07567db06149ee63c9f82f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxMyElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a25d01121e3a1649502dbcf826cdea1d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a834380cf0c257a8c8a08fd855d835697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a8b8b0702490b981c661846af888ec8da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UniqueGIDs</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a19f63ec90134ff0674292f1802f36bc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesInt</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a15909f790aeeec317c33802d251088cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesLongLong</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a99607c161d63643ee48fd9e547614460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesIsType</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>adf9a9cd531aa9c27d9ed08a8a01ad7b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesTypeValid</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a14d9675d3e29c47cde1f2547406e1342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GlobalIndicesTypeMatch</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a9200acb7948a984287e1f66c7bf2df76</anchor>
      <arglist>(const Epetra_BlockMap &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ConstantElementSize</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a0b184fda60c2bc1b1d010374a2f3995f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SameAs</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5afd0d39f48d69c73be463536bac8c35</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointSameAs</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a5032057792f46e4c2fd8da1425a7772a</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LinearMap</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4a9095814042ad887c36592526afa398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DistributedGlobal</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>af4e95402fb269dd7b02cf64017be5384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>MyGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a71ffcf52cd3dbca583b17a59baa58338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long *</type>
      <name>MyGlobalElements64</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a85671e7830b632c6927f18a5e47bb727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MyGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>aac0a02d94b32f170b69d490abc2d37c1</anchor>
      <arglist>(const int *&amp;IntGIDs, const long long *&amp;LLGIDs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MyGlobalElements</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a969e881c68b6b020bea77bfab381b7a4</anchor>
      <arglist>(int *&amp;IntGIDs, long long *&amp;LLGIDs)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>FirstPointInElementList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a6a3048ea0e6b1cb8b3e43ce901eb5df5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ElementSizeList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a709fae5aa4092dcef3b8ab7abcb8ca8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>PointToElementList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>ac80a3b326ffd173cf5c6287ff83eff91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ElementSizeList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a11e162fa34695f3b280415d4bfe25240</anchor>
      <arglist>(int *ElementSizeList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FirstPointInElementList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a854f0cb4217beaec8621c6e8b43b1c68</anchor>
      <arglist>(int *FirstPointInElementList) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PointToElementList</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a6acfd10177ec9e4074223c3fcc7c0227</anchor>
      <arglist>(int *PointToElementList) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a06b87d5302a3d9756d16e174a71fd1cf</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a2e563f82e0a9314285e19f17678b562e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOneToOne</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a422ef5e272d9841fb5fb7ddb692234ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_BlockMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a6c16e9e5f1f6b9f45443f3350fe3a8b6</anchor>
      <arglist>(const Epetra_BlockMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReferenceCount</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a63f1c0f558d0d4b5c2e04d163d7b2c18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMapData *</type>
      <name>DataPtr</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a4dd810da75902803280c8a65072e850b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_BlockMap *</type>
      <name>RemoveEmptyProcesses</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a73bb666e4ed07aa15fb12c824e68b85c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_BlockMap *</type>
      <name>ReplaceCommWithSubset</name>
      <anchorfile>classEpetra__BlockMap.html</anchorfile>
      <anchor>a2a32229a0a3db1650f0a5fdf9680a703</anchor>
      <arglist>(const Epetra_Comm *Comm) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_BlockMapData</name>
    <filename>classEpetra__BlockMapData.html</filename>
    <base>Epetra_Data</base>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_BlockMapData</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ac57464d7a2bcd7fcb46aead87501b181</anchor>
      <arglist>(const Epetra_BlockMapData &amp;BlockMapData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_BlockMapData &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ad6af98c78d57b81fa5abda125a9fdf11</anchor>
      <arglist>(const Epetra_BlockMapData &amp;BlockMapData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm *</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ac8520c4965a65d9b1aafbe37c4be38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Directory *</type>
      <name>Directory_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a94a4f50edd41ed36e96522bf1b1e137d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>LID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a54d71e36309f2051964021affa9ac75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>MyGlobalElements_int_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a38b91dad7c0c441260257b5fd4b9035c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_LongLongSerialDenseVector</type>
      <name>MyGlobalElements_LL_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ad412ad95b47f5337e2f7a3650fe690e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>FirstPointInElementList_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>aa8c8dc317f945491937b857acc755271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>ElementSizeList_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a5c7fcd2ad52854b296458d1d7f4dcc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>PointToElementList_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ae0ad24898ae8462b0abe1311a690f4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalElements_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>aaeeba87bccb931cbdb12ff6c933dce19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyElements_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a3983e6d937bcecfcdc7b159994df2d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>IndexBase_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a0a2681b2cb1b9bc23dab17b13dd83deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a8135d4d5736d3b84f538e50e3a3868df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MinMyElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a179f4a2d202f80ec0e43b67484f6a66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxMyElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a135200d6f0d81dd0fb242f5c02e65bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MinElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a71f8d62fc3d328eaadda2d46d3885b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a70982f741975c70bbacf258f7d2a578d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>MinAllGID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a4f6b973efa47abba25979908091e05fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>MaxAllGID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>aa7f7b1d9af7e6ba265f042fb77c05619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>MinMyGID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>aa0c041da20411a50fecf8436638005cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>MaxMyGID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a301676d5faa85ae0e9afa6b3789829f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MinLID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a34fa78faca0574d4887b65c67cd181fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxLID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a6bfca5967921948c89c2aa6c4d6af3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalPoints_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a3b476c00ddf7f3c3d1194af753b1f664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyPoints_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a4fdae8da505af44705d677276614a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ConstantElementSize_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a691c2721ae1ce49d5b4564e44ac7acd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>LinearMap_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a2abae7f3535676a5dbacd9d967fefec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DistributedGlobal_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>afb75c11deb9d4cfff3bd3b9aea92282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OneToOneIsDetermined_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a0f535aaa5b967843b52722972139281c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OneToOne_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a7bb9c543d043667aee9368157303214b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>GlobalIndicesInt_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a6f520fcaadaae691aefe4237f7ba3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>GlobalIndicesLongLong_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>af7ffd7b107925426bec986ea7ad0c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>LastContiguousGID_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a1e2e05b0349b3b49149ec2f6168ee402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LastContiguousGIDLoc_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>af37f580f9ceaa6415a9de67d569d7a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_HashTable&lt; int &gt; *</type>
      <name>LIDHash_</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>a3f5c8b5cf69ad68691b26a16c111660c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>af6b2f2a23a1ca2da1695f92fc8a26119</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>af24ccea53cac6cd363420732fef3e3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_BlockMapData</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ab62362c61d04d997f5af2f84e677d448</anchor>
      <arglist>(long long NumGlobalElements, int ElementSize, long long IndexBase, const Epetra_Comm &amp;Comm, bool IsLongLong)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Epetra_BlockMapData</name>
      <anchorfile>classEpetra__BlockMapData.html</anchorfile>
      <anchor>ab6c59fa2ca2d718628cb20b28f367029</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Comm</name>
    <filename>classEpetra__Comm.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Epetra_Comm *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a6ecb9ef653d28a0487ad260114f41143</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Comm</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a10eab80966bbed7e08a0ea523e903a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Barrier</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a892dba1c9aa0bf2253cf95a765d48733</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ac809e16486c56e588fdc335ef0882806</anchor>
      <arglist>(double *MyVals, int Count, int Root) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>afa60256e839e88cc639e2c1c3574a39f</anchor>
      <arglist>(int *MyVals, int Count, int Root) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a3656a04dddd5347a1b2de9d33e825e23</anchor>
      <arglist>(long *MyVals, int Count, int Root) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a9f7fee9dbb9094200cce492370f4287e</anchor>
      <arglist>(long long *MyVals, int Count, int Root) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aae051c15c149d28d6f7b2d1bfe4545fa</anchor>
      <arglist>(char *MyVals, int Count, int Root) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a260f5aa9dec4dd77d0e64f92b1e4542c</anchor>
      <arglist>(double *MyVals, double *AllVals, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ad159cd3a7e09ef0fc0beedae5cb3d2a5</anchor>
      <arglist>(int *MyVals, int *AllVals, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a31d640f8ef8ef2faf0d1ce76ac9430af</anchor>
      <arglist>(long *MyVals, long *AllVals, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aa9e27465f3ea9c91d4e85109506d7b26</anchor>
      <arglist>(long long *MyVals, long long *AllVals, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aedb1084b9c723bcef38f3ab764ca80a1</anchor>
      <arglist>(double *PartialSums, double *GlobalSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>af48b9ee5a4a6c0699237ca2996af7da5</anchor>
      <arglist>(int *PartialSums, int *GlobalSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a93568601bafeaa535203a965bf24cb80</anchor>
      <arglist>(long *PartialSums, long *GlobalSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ad28eab46cac40bb86def88c2a1c73c6b</anchor>
      <arglist>(long long *PartialSums, long long *GlobalSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aa5a2c97c3a6461eab4ffe140c9035cdf</anchor>
      <arglist>(double *PartialMaxs, double *GlobalMaxs, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ac850a2e48b9dc6611dcfd46366240da8</anchor>
      <arglist>(int *PartialMaxs, int *GlobalMaxs, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a6e5f2c1cba8aba3ca9703fb152a835e6</anchor>
      <arglist>(long *PartialMaxs, long *GlobalMaxs, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ae9bb0a469d73ed58ff6d815e8020202d</anchor>
      <arglist>(long long *PartialMaxs, long long *GlobalMaxs, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a171c85c3638d616c8f85b2b17f2810ad</anchor>
      <arglist>(double *PartialMins, double *GlobalMins, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a5162156f00a663e5d36c4e43191555b8</anchor>
      <arglist>(int *PartialMins, int *GlobalMins, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aa59b95f2cf9650a81e3c2393d6c32272</anchor>
      <arglist>(long *PartialMins, long *GlobalMins, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a834dd80afb0bfc0b0dddb5c6b74fe2bc</anchor>
      <arglist>(long long *PartialMins, long long *GlobalMins, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a8125a1f8aeda873a7a45bceb74a2de98</anchor>
      <arglist>(double *MyVals, double *ScanSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a47b911b6fccab7d6236c2ee6613695f9</anchor>
      <arglist>(int *MyVals, int *ScanSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a24b0ff129e2c7d05c6459cadaefdc485</anchor>
      <arglist>(long *MyVals, long *ScanSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ad608cb396f922e7259283e64d6768e6a</anchor>
      <arglist>(long long *MyVals, long long *ScanSums, int Count) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MyPID</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aa7adbd25c56220bf7df1a80571e5c9c0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumProc</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a20a001e1ff46572529ebf256ceb7abae</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Epetra_Distributor *</type>
      <name>CreateDistributor</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>a611a097af0ce2577bef6632f1317974d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Epetra_Directory *</type>
      <name>CreateDirectory</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>aad86cc9c5d267c8132c702cf770ea154</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PrintInfo</name>
      <anchorfile>classEpetra__Comm.html</anchorfile>
      <anchor>ad9fc59955773ae10c6da3ad1ca6d342c</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_CompObject</name>
    <filename>classEpetra__CompObject.html</filename>
    <member kind="function">
      <type>Epetra_CompObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>af363a7b1cf9cdc2aa86c43ed1888b6e2</anchor>
      <arglist>(const Epetra_CompObject &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Flops *</type>
      <name>FlopCounter_</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a4095552501f59c9dc407185a4944759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CompObject</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a72d50bb3df3487828adb4d4b8f9a282b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CompObject</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a3d1109b4825ca8fa5043c57c83227c56</anchor>
      <arglist>(const Epetra_CompObject &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_CompObject</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>ae66ae15141fb93aeb5df674f6282fc04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFlopCounter</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a665dd8befefacf0e5f188ea8a011bd80</anchor>
      <arglist>(const Epetra_Flops &amp;FlopCounter_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFlopCounter</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a0ac5e8ba25d3ff75dd93ee5d85f46c5b</anchor>
      <arglist>(const Epetra_CompObject &amp;CompObject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetFlopCounter</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a78028e410947150bba43f206d0c0b0ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Flops *</type>
      <name>GetFlopCounter</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a8ddef3c0fac2bd32ab9071e8027c90bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a663656296881a4c0860fec4bacc4e7ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Flops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>aa2f0cd911a9a22b18f0057ccd45a2798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a6416eaea8c55d902f5461f4b12cf9a21</anchor>
      <arglist>(int Flops_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a9a6a79cb36ded3e08dfaddf1cd96960f</anchor>
      <arglist>(long int Flops_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a443ff377857c60c2357089be6949a97f</anchor>
      <arglist>(long long Flops_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a46a5b3e510c5b69d69ff4e1e4c2cfb11</anchor>
      <arglist>(double Flops_in) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__CompObject.html</anchorfile>
      <anchor>a85f2b9f2bece3e2ff3d0cb90d0511762</anchor>
      <arglist>(float Flops_in) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_CrsGraph</name>
    <filename>classEpetra__CrsGraph.html</filename>
    <base>Epetra_DistObject</base>
    <member kind="function">
      <type>Epetra_CrsGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a9de6aaa2f969e3255a4a43b4d14461fa</anchor>
      <arglist>(const Epetra_CrsGraph &amp;Source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>All_Indices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a44c25b3a695de08ec8c136930fc313e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>IndexOffset</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a247a6d351f12955a9b06b2d29f26fb60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>NumIndicesPerRow</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab44ae1abcc50287081c59f5d31757bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>NumAllocatedIndicesPerRow</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4edf18aca770845627cae836ab750d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int **</type>
      <name>Indices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>adb89a95a0cb41139c0fd038b6df7fd12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>Indices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a60eb701607c7ebefc3b291bb212f2fc5</anchor>
      <arglist>(int LocalRow) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int_type **</type>
      <name>TIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8f7011cd7ed4dc671bc23757ebc18f2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int_type *</type>
      <name>TIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aafdbd353cebf245ccaf09f5f4bad9176</anchor>
      <arglist>(int LocalRow) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IndicesAreContiguous</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aeaebc5d3de455d4da3f093d00a697b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StaticProfile</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae9292872a52d86daeb457730e265f9af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>GlobalConstantsComputed</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5bab65250ac05e1f7e0795c77002f8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a65fd1905815bf38dd02bcdfc7e4a8a69</anchor>
      <arglist>(int LocalRow, int Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a51aa2351a350f57d6b534472c8e03013</anchor>
      <arglist>(int NumIndices, const int *Indices, int Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a0e72ba7700062a656d3e6ebe6a64ade6</anchor>
      <arglist>(int LocalRow, long long Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>afeb8e7b8e8976242a6fa4e12953ecf98</anchor>
      <arglist>(int NumIndices, const long long *Indices, long long Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindMyIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8e517e72f2f8bbfc94efe945309aba55</anchor>
      <arglist>(int LocalRow, int Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FindMyIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab8904d4a95b6475729dae78085b5d599</anchor>
      <arglist>(int NumIndices, const int *Indices, int Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7de68a0a16a50e047316fe0315331324</anchor>
      <arglist>(int Row, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertIndicesIntoSorted</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae8ae8c20fb6e6db861194fe4aeaa079e</anchor>
      <arglist>(int Row, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a02588a84520caa2b93ac21977852ff84</anchor>
      <arglist>(int Row, int NumIndices, long long *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertIndicesIntoSorted</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a061a3e5d9edd4933eda1f9e26ba86e56</anchor>
      <arglist>(int Row, int NumIndices, long long *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>MakeIndicesLocal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a39508a48b1e3e146c9afc6a7cc5c0052</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetIndicesAreLocal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a3dcd1d52290af69d40dbe8936d9c8040</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetIndicesAreGlobal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab028b9bf0fa5eabdaab90e055618d3ff</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetSorted</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a620b289bd2902089bb92b5282ee3ea2f</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SortIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4303d7f43691a66451fd65d1e86bf37e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Sorted</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a1f7a7dd4e628e17d86b18ce28d00d3c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>RemoveRedundantIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6cd7e424ead4f2bd4d38ea87b9d4a3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DetermineTriangular</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a744fbf9946640563b9862a97a9141718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>NoRedundancies</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad640f77f10b302a3ab4b48443f0cf2a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetGlobalConstantsComputed</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad7e620fd02a303db073f772d3046453e</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetIndicesAreContiguous</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a40a203d97f56ec2d1a170d7b62bd68de</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetNoRedundancies</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a59779dc6d188660af6a8ff3e997e4aa5</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ComputeIndexState</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a34197b9a2e81b1bb9720d07f290f22ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MakeColMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a2843cf63cb05414df6f7cb0d132cbbe7</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MakeColMap_int</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7e851c1f5e73c69e4df612acd44e8290</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MakeColMap_LL</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab438bdbf27c10d0dca7cccf4889c785d</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ac3dd162e20f7c179b0d8bfcccfc5f6a5</anchor>
      <arglist>(const int *NumIndicesPerRow, int Inc, bool StaticProfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ComputeGlobalConstants</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a94162c5ba72f715309575dbe966933ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetFilled</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a87ccb0907a96fb75ae38e312b3b04dfe</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a3dc77cf44bf6e7a3450fd368eab35e94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetAllocated</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6bce0c863f913df3e3127c0c9a77a4a9</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a805e48c7ca8ba0cbb4f4b1cb2a50d6dc</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a1eb4fc628b61a84b7b8d5cb883c6561a</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermuteRowMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4523fa673437d6ca68dc8dfbc1d4f369</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermuteRowMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6f30d5444198cc52caec86224aa6fa63</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermuteCrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab93037f079a24337c26ffd6138d91253</anchor>
      <arglist>(const Epetra_CrsGraph &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermuteCrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab61d0d269a7b97b1b2b4caf81d86fbe7</anchor>
      <arglist>(const Epetra_CrsGraph &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a054aa1efa24ac54b60da6a899efb0eef</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepareCrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8761e575aaee4173091ceef1e1fd03a6</anchor>
      <arglist>(const Epetra_CrsGraph &amp;A, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepareRowMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae4af02cbc0efdd220adaeaf2669631a4</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ada8458dfa0730d7e53bf9497e73f67fc</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af2b511707dac7d4bc1ae9e37691a7dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TAllocate</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4f2b56afe93d6e0cfe22192291930ce6</anchor>
      <arglist>(const int *numIndicesPerRow, int Inc, bool staticProfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ac11974f8461d0ec710dc30a04d437cf1</anchor>
      <arglist>(int_type GlobalRow, int NumIndices, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a71ec080643cb2a9985b1aa7f43d53d29</anchor>
      <arglist>(int Row, int NumIndices, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertIndicesIntoSorted</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a3223e7e50e9edc784e1d4907a25195f1</anchor>
      <arglist>(int Row, int NumIndices, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>RemoveGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a712f974cd8e91e04c2cf1f009d7c504f</anchor>
      <arglist>(int_type GlobalRow, int NumIndices, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TRemoveGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a297608e6baaf19cb3c3622797e70868b</anchor>
      <arglist>(long long Row)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a3fb9d90666de8f0821e7f2b4985750b7</anchor>
      <arglist>(int LocalRow, int_type Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>FindGlobalIndexLoc</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a87a3c0a548f0220ae4f2323223109fd5</anchor>
      <arglist>(int NumIndices, const int_type *Indices, int_type Index, int Start, int &amp;Loc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>afcc10b31e79fc9d2da021bcbe25268b1</anchor>
      <arglist>(int_type Row, int LenOfIndices, int &amp;NumIndices, int_type *Indices) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a9d82d2b1a6fa71aaac77a3bd79fee770</anchor>
      <arglist>(int Row, int LenOfIndices, int &amp;NumIndices, int_type *targIndices) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsGraphData *</type>
      <name>CrsGraphData_</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5229c6e29aebef7be876f9c07912a2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aa519840c5dd5024dfc980fbb45dddff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aed04a04165ad30553cafe5060cda02db</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a18b09b91b8346877db3bf672915c1217</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad04c47c4168b444d18b533d3b74179d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad4484c2ab7079ccc6f68590654fbc5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_OffsetIndex</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a380b1c771681fc69cd2ac9ac64709cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab1f8f6cb7c767c63432e71d33a8e6478</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const int *NumIndicesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a41b704b8d8ee115762132af7307219e9</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int NumIndicesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a199148ae4d76797e5f958cbb55edece9</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, const int *NumIndicesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a52443e27f22a0500d663bfb7b94e0e37</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int NumIndicesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af8bfc0899fb71f2bcbf252f62c7a4af4</anchor>
      <arglist>(const Epetra_CrsGraph &amp;Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5bcddd471d81bd7823648cb32522006c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a0074e62d07b7df235e24a77c5b125f3d</anchor>
      <arglist>(int GlobalRow, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a0e948b7f645a95a5aa785b2ff7bbb124</anchor>
      <arglist>(long long GlobalRow, int NumIndices, long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a68a8b9ba919e704958f16999f8c6f182</anchor>
      <arglist>(int GlobalRow, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a847d9a94340c2ddd2a2b7895ca95a9ff</anchor>
      <arglist>(long long GlobalRow, int NumIndices, long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a293f415f265b2d9b084041df506d1c48</anchor>
      <arglist>(long long Row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertMyIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aa23578a13dae4c059d646e4020c8c2f6</anchor>
      <arglist>(int LocalRow, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveMyIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a15f68f1f912736e6911913491bb644e9</anchor>
      <arglist>(int LocalRow, int NumIndices, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveMyIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7a1d9efb122f370f500904b4bfa1786e</anchor>
      <arglist>(int Row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7a77f6a61a80ce90943988ee3aa537ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aab6e321eb0f306df52b73b94d563dbfd</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OptimizeStorage</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af6043bf2f980e5e072ad93322db372e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a1c4a3dda7a47626d6e41e0ec675f634f</anchor>
      <arglist>(int GlobalRow, int LenOfIndices, int &amp;NumIndices, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a2715dfacca8cd1cfd4e92cf1761ed5ac</anchor>
      <arglist>(long long GlobalRow, int LenOfIndices, int &amp;NumIndices, long long *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>adf54b4c9c1c870b3c70906bed7170de5</anchor>
      <arglist>(int LocalRow, int LenOfIndices, int &amp;NumIndices, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>acaf50dfe7aef8ce3b37ca9013e5e4a30</anchor>
      <arglist>(int GlobalRow, int &amp;NumIndices, int *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a79bd7b9febe09cdef6c16f5ad99ed016</anchor>
      <arglist>(long long GlobalRow, int &amp;NumIndices, long long *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowView</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a551504c9a89935148c46e21ea63b51a3</anchor>
      <arglist>(int LocalRow, int &amp;NumIndices, int *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Filled</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>adb9625d47f4632b5081ec84622104962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StorageOptimized</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a05515ce22542fb4ea8005d13b19d1cd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreGlobal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad708091188c1dbfb15f594edf1927295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreLocal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad8bdb63a2c7837f3f7a9bdebb29c8085</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ac2501a04a37d946227c2793226171f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8e941002fbe884f5a355cc59abaff025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NoDiagonal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6d2e1076011015cf9efc216bedf3b976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalRow</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a2aa2fc1103cc5fc52d159f37199f3960</anchor>
      <arglist>(int GID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalRow</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a98660c04dfbcaebe5a7926d1dd2a1cae</anchor>
      <arglist>(long long GID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HaveColMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8647215efe6c0178246cab301f388199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6d0c8c35eddcf9cceaf475e61cf66082</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aabdf3194f73103471bd78899aadca20b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a3f0781dd9c9deff95b7853ddc9a62a3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aca510426efa330355caff94dbc1e9631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae2710adb99d8963352889cba0ee97eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a17c0a0359d03412b19cd31a684fcd01c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aa38b48d85de9c34b27ce9434eb09b6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a07f2d2bab0cb31217dc3e45db85f16a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad5e6fb3f0d966839b04978eb0c8f7b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a41007e4a4b7e7d902f4f3a4846f2f0f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a45b868bc540aa28ac5c7dfaaae130a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockRows</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>acfb0626498d6bfbc443988306296e012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockRows</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aca03c7535a6d6c56acac69d870693650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockRows64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a04d12364b60c1a138e3a0d43ca5415a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockCols</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae83dc46fa0927c27cc931cc17ff302c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockCols</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab7482a2a63b1e7fbf0e1ddeabf87f714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockCols64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>afd9589b8b0f1fd2c4444ba786a07956a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockDiagonals</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ac5040160465ac331d45b32b59b8c46af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockDiagonals</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5ad0d93d5a3b9aa70d21c8dca2748fac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockDiagonals64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a92f3b95d22891a128edc489aac4b284c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalEntries</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8ea3b38132b4d4a8f489cf3c50eb99ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalEntries64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a02c0ebc447f23979833b7b2fa55cf960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyEntries</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4fa8a37fe5687a7d56aa6faff8a9a3a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxRowDim</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a03a1a69d1e07f241dd3165e7b161a810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxRowDim</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ac579a09232549897af19924760cf8cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxColDim</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aeda0c167f28cd491aabdc431880f8cfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxColDim</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>abb1e660b724832118bc19bf8f78875ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>aedcde11a018d25735e5ef1d23ba5859c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>acc7bc9e70d17ae86a7e6d5add0c95c1a</anchor>
      <arglist>(long long Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedGlobalIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a1194e0dcf61691b6b88b87f169bb27ff</anchor>
      <arglist>(long long Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>abadf2ef35e3e3264e86cb5ae45feae8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxNumIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7c5eb9d40f8cfa16cc709d36da013386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumNonzeros</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af81eb21cad60fa9d1d533e952fa9db46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxNumNonzeros</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af2905448f675041b90a742d0afcf334c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a791ce1d74c3ddd9447f9ca51acce2d9c</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedMyIndices</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a9be8083262e94fb106813315a5f824ed</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a0898f330f88581810e2f3ee1783be482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5af2963c332430d1ddbb4b32782cb2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>RowMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a9005acb7f3f72e91107dd43ee18e5b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceRowMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>afe6aacad14c154311c072b4b606b019f</anchor>
      <arglist>(const Epetra_BlockMap &amp;newmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceColMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a545bb42daab3126be936a3039766d952</anchor>
      <arglist>(const Epetra_BlockMap &amp;newmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceDomainMapAndImporter</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab26b11d853422032c39015c58b839198</anchor>
      <arglist>(const Epetra_BlockMap &amp;NewDomainMap, const Epetra_Import *NewImporter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveEmptyProcessesInPlace</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae3a62371bdf99a45c29c2b3ca96ff44d</anchor>
      <arglist>(const Epetra_BlockMap *NewMap)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>ColMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab9807ae13c7a70e481ac0cc0c87d3066</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>DomainMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5c4f613b3a8c900d8ab8f209062f9b94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>RangeMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a22f1817b472085aa60dea68caf14c4d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import *</type>
      <name>Importer</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7fad487ff432050601f166a4bd78c90d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Export *</type>
      <name>Exporter</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7ee95750c91ba69cbad16ba200cccfda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a39f3f401ae35eaeff1d1f8900091594d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4d07ca8eb2a42f60ba569df5b7742978</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a464ccee79c1e095a2fe6c5eb39898c7b</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae69df420094042e1de0b379e3fa23417</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GRID64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a5a056a20c9b5c8b1579b281576910d54</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae38417d29ec9b0d1743231cbeb361cda</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4fb7c279f17318437711c8ec96908769</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad086bd7d324ee536a6a825a9bde38275</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GCID64</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a2e3551d46183621ef60b3b364cca188c</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a30d0380e2f13aa127b174d1a735d3a29</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab8397d12ac2b2e8ffcb43ea6abddc7df</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLRID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>af85bc83cf58cab78a13eb4ac6e379635</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a2ef5de203b9eae7289ddd08451620b30</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a4ebcd01cc08ecc02eb71ce5b4943fd3b</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLCID</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ace6db46264322e1fe9358d1fe9222895</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a7ba30f1c4151f64d9642fc8689099618</anchor>
      <arglist>(int Loc)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a8ccfd67913faeda1165d52f7ccb1e5b8</anchor>
      <arglist>(int Loc) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a13d7cf1694d5e4d45e6b6fb6cf0f63c4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintGraphData</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a1f35c184d928f751c80ee036222cd703</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintGraphData</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ab60f280c9ae34d0c86af29ed6a257f57</anchor>
      <arglist>(std::ostream &amp;os, int level) const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>ImportMap</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>adb01d76631b13e34e7e9a8602989b6bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a6dc4e1b02894bef7b2017461329ad0b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>acb5e1db075cfc6f7d261a087e5178e68</anchor>
      <arglist>(const Epetra_BlockMap *DomainMap, const Epetra_BlockMap *RangeMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReferenceCount</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ae7f783d19dfec36616258bcacb566298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsGraphData *</type>
      <name>DataPtr</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>a638fa45824c8796418ce334349900a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortGhostsAssociatedWithEachProcessor</name>
      <anchorfile>classEpetra__CrsGraph.html</anchorfile>
      <anchor>ad8de84843b9d0ced2ebca110ede1a6cf</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_CrsGraphData</name>
    <filename>classEpetra__CrsGraphData.html</filename>
    <base>Epetra_Data</base>
    <class kind="struct">Epetra_CrsGraphData::EntriesInOneRow</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData&lt; int &gt;</class>
    <class kind="struct">Epetra_CrsGraphData::IndexData&lt; long long &gt;</class>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ab09b0e31a92319cca8486ad2d488176c</anchor>
      <arglist>(std::ostream &amp;os, int level=3) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_CrsGraphData &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a0ea684379266e863f759a3cc652a6283</anchor>
      <arglist>(const Epetra_CrsGraphData &amp;CrsGraphData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndexData&lt; int_type &gt; &amp;</type>
      <name>Data</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a7b721baa88b4557920fe09f3c1a0dfa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_CrsGraphData::IndexData&lt; long long &gt; &amp;</type>
      <name>Data</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a08bbd02ddda7692c0e61820e877ef096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_CrsGraphData::IndexData&lt; int &gt; &amp;</type>
      <name>Data</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a7b4409700903d3be56056f4ab8a1a66c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>RowMap_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a23b54c345f0cb4b26726fc750c39acff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>ColMap_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a27ef44c7ce8264db2162b71d85e71c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>DomainMap_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a8bd90411bc6398097ba7ae16933defc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>RangeMap_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>acadd15487c5bd927514251437438d1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Import *</type>
      <name>Importer_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a727073cedc23240ff9eeaaa89cd59664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Export *</type>
      <name>Exporter_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a98dc3649d8f93ab0b9d8beff091fb6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>HaveColMap_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>aab334c8e96aef9d6b0daf63f8d2418b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Filled_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ac44747f75f255a5a8c6a33522ec14148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>aaf748313179638ec91b1e839211f157e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Sorted_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a20ca94f7dbb598d951b155093afe46aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>StorageOptimized_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a736538753cda5865c626a428c4b967a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NoRedundancies_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a5ed086e5fb650e135e85e69114b2f3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IndicesAreGlobal_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a3a72065fa4df68025f2a73c6a5fff4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IndicesAreLocal_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ae677c8d830c9927518ecff67c4658a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IndicesAreContiguous_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a4b6b0cda48e83047d946f4cf0a41d83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>LowerTriangular_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a5449637c38b2c4686567e51c6e5c5915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UpperTriangular_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a38096209835724bb863aeb90b9bea753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NoDiagonal_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>afbc09d44dd4824266533c1c8d4d8b65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>GlobalConstantsComputed_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a41d2113c2905e467f528d79d4b3ff96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>StaticProfile_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a9a53b01c51dc9ba1bfcae0d8c27a1798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>SortGhostsAssociatedWithEachProcessor_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ae844325d3e27e78693ec57efecb28fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>IndexBase_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>aa298bfd119b51fd0e28878e7eb522393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalEntries_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a4b873ab2487a0dad3d09b8c96598132c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockRows_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a0c3fde94a801c3f63dea8d7b3b931c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockCols_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a43d27921cf27aefcad3dc01fa66a98db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockDiagonals_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a5ad30fbaf0f2de50c446a76188f4790c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyEntries_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a5d85ada10a6229b7b73b069e1d1a99cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockRows_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a72cac19b0a50c6d676946cc70f157a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockCols_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a101117a7eabe4ddc0ae17161600f303d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockDiagonals_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a7c8d4f81c7c70e941f815fc4b36d5d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxRowDim_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a8e2e0abd19852f6d35be769f68f3371a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxColDim_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>abe0030933c292e8f59bdcb0531402498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>GlobalMaxRowDim_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a049f3b4ab001c3b28fc52497dd0b9e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>GlobalMaxColDim_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ac29ccbeb48453ef0f8084448e5b862f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumNonzeros_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a3a335f02e7dd971a498d1896a0e59ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>GlobalMaxNumNonzeros_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a95fcd323bb0ec3dcc9533e581c6845a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>aad08ea08c4e44ec115500e5bf3ba9132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a88b9cef9354b3a308a1726957e804232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalCols_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a545ca387d62bb55cc7f5a0af9d093566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalDiagonals_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a1b78ad680a28d26bbce7f34e515a3cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>af0df1282602488850d7896021ece2db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a3a9c8343d74d55d7c3aab590a4fccef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a64571e487bd40734cd7120533c8fa313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyDiagonals_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ad268e0ed8e90957f7b4a6f9923203303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumIndices_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ab242467e7cf244e815136711abd5839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>GlobalMaxNumIndices_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a4035ad1f46df6318751f13b9811c5779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumTempColIndices_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a9b467c648eab07f58e4c117b648eb496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>NumAllocatedIndicesPerRow_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a86b96da979589d5af7d29a419952980a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>NumIndicesPerRow_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a7a97d889c8d684c55718aa32dbfe6ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>IndexOffset_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>abfb654c2178ac2f8369d35f41fbe7678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a26c4e59cc9024ebebf30177e2c640d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexData&lt; int &gt; *</type>
      <name>data</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a52c50f7aafab5da396ebf055cd875cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexData&lt; long long &gt; *</type>
      <name>LL_data</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a0892c78c88fab31b0226a154b90e342f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_CrsGraph</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ab5f9abc83ba6c90098536523e949e867</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a18b09b91b8346877db3bf672915c1217</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>aa519840c5dd5024dfc980fbb45dddff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_CrsGraphData</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a93e9ca4c02ffab4788b43e5ed207be31</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, bool StaticProfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_CrsGraphData</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ad01b500e753079a65ee54a47c259666a</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, bool StaticProfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_CrsGraphData</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a59b29809120b6f160065b44fc1b93bdd</anchor>
      <arglist>(const Epetra_CrsGraphData &amp;CrsGraphData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Epetra_CrsGraphData</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>ac8288a99105c82e64032746a3759a140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MakeImportExport</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a8c3797daa35310a045fd9d9ea1de706d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ReAllocateAndCast</name>
      <anchorfile>classEpetra__CrsGraphData.html</anchorfile>
      <anchor>a1ddf770200338417743dbaa46a1f049c</anchor>
      <arglist>(char *&amp;UserPtr, int &amp;Length, const int IntPacketSizeTimesNumTrans)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_CrsMatrix</name>
    <filename>classEpetra__CrsMatrix.html</filename>
    <base>Epetra_DistObject</base>
    <base>Epetra_CompObject</base>
    <base>Epetra_BLAS</base>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type>void</type>
      <name>FusedImport</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a961f60d827738942f79e4277dc82b1ee</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, const Epetra_Import &amp;RowImporter, const Epetra_Map *DomainMap, const Epetra_Map *RangeMap, bool RestrictCommunicator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FusedExport</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab3d22aa64c75c5a68fa8e7a23fa15a7b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, const Epetra_Export &amp;RowExporter, const Epetra_Map *DomainMap, const Epetra_Map *RangeMap, bool RestrictCommunicator)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a48c8fe7dae2cd1805420dec7ca3e3ab7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetAllocated</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a21f8d7ef9e0b26bca0f697096fad5c97</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double **</type>
      <name>Values</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a11333b13f111dd8d0eb3754b305e840d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double *</type>
      <name>All_Values</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1467e04f10af7ee26376385a32e10516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double *</type>
      <name>Values</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aaded43cd551ee401d5be7ca203d20038</anchor>
      <arglist>(int LocalRow) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDefaults</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab3d193402fbcdbbb9b6e9f6d8dcb2454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad156334d119f1e9437a96edcf00fea68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a79ebea0ddc5c63d3318b725efd87215c</anchor>
      <arglist>(int LocalRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a421fbb486c436da859a5b73537a25769</anchor>
      <arglist>(int LocalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6d183c718dcf56d99a9a82a20e7dc8fc</anchor>
      <arglist>(int LocalRow, int NumEntries, double *Values, long long *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aa616a5083eccea323ece1edd7c3a22e1</anchor>
      <arglist>(int LocalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertOffsetValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>abc56a809b3c66efa1b30e91728745b35</anchor>
      <arglist>(long long GlobalRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InsertOffsetValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a126c8b1b2e6f6468216bfaed1e69fe2f</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ReplaceOffsetValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4599c5c919053ab96dcd9235901577e5</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SumIntoOffsetValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a73fa210a1be998142c2aca08e83d7127</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateImportVector</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6c351e47723308301270aac2db6d0f9c</anchor>
      <arglist>(int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateExportVector</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6c40952da41eca2665ec83965771cc95</anchor>
      <arglist>(int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMV</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aa4534912cc13d7afb370573817ee289a</anchor>
      <arglist>(double *x, double *y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMTV</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>adb0f4b7952a9a556145c8469c3460c25</anchor>
      <arglist>(double *x, double *y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMM</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>afb657d83277d3de7d49e919a240d8e30</anchor>
      <arglist>(double **X, int LDX, double **Y, int LDY, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMTM</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a0a035e122274778e8a9ffcbe59f87ab3</anchor>
      <arglist>(double **X, int LDX, double **Y, int LDY, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralSV</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a169e2333c366065e739b415e4e36c9ec</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, double *x, double *y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralSM</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af05f2e42ecc896cf44484ddaf95ab429</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, double **X, int LDX, double **Y, int LDY, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetStaticGraph</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a563f265db06ce6c30be9ef6bca6ea18a</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4c1ad7e5a043bb17d2fb8c5fe0246c8c</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae7d7caaff9052f0e76f6353cdb7a2575</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyAndPermuteCrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab71b92f5abf1d12848febf0f5615e1d0</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyAndPermuteRowMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a320df270db482955d275672cd42f3dba</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a2ca07ab2127fcc6e011f342f75d57593</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>adc77171308612e405e1427aeff35ad27</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SortEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a394853bfa571b2b263b1960fa183421a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Sorted</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a38d9552413179d106f818cda3477f4f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>MergeRedundantEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a5ce1aeb79ec41dae8dec0160dd857944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>NoRedundancies</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ade0aa6b5ed6d4f37ae5a966fb47a87e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeleteMemory</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac92d5ce75169b14c7a2439671f7a7c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CrsGraph</type>
      <name>Graph_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a59fbfbad01653ac93a38369ca037a08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3673b82f04c1b3e4457baea80f493470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>StaticGraph_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a59e08a89dbf7945a8edd8ecf68e8dd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8487adad53420a77f7ce14be4507622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>constructedWithFilledGraph_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a27b9418f09ff343981bbefaa0c1d0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>matrixFillCompleteCalled_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a00b98c4dea73c9eeaebe3d035dcb8d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>StorageOptimized_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3383a9f29087fed2e6df5219af873968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>Values_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a03e1710f0932d4e62b8c9314a992874c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>Values_alloc_lengths_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3bff2670bc455330439d96c9675499a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>All_Values_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4d0b3a09f81c822a223a9e0e3050cf40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormInf_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4b1aacf4426f3f9f78645cab6bdf57b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormOne_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6f03247ff68ecf5913e0a69013b52b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormFrob_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a42178fe127320d9e66aff2d2acf0bc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7a5c499906b0e460903337f65514fcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ImportVector_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aef99a42b4be2c197bacdb96981bd7dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ExportVector_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aaf57758cf469305008be107e26080f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3e06753b477e15d3414ee6c569540627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>squareFillCompleteCalled_</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>acb0b26411f90a324fc84d45856400c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Solve1</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4f2c4311a336521cb2df2d5edbd6e29b</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Solve1</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8c826ac1912ee06a99209dc460e26c5c</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TInsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>acbf462a7d4f33bdec4e66cb737fcc75e</anchor>
      <arglist>(int_type Row, int NumEntries, const double *values, const int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TInsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad3dd0c045b210ef4c9a62e99dbe5391e</anchor>
      <arglist>(int_type Row, int NumEntries, double *values, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a357f22f6996b183bbd76e8e0ddc48147</anchor>
      <arglist>(int Row, int NumEntries, const double *values, const int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a98d6d221f271b046a747d7ad67d6ec42</anchor>
      <arglist>(int Row, int NumEntries, double *values, int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TReplaceGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a89e4c36151550b82b7d956db38cfee91</anchor>
      <arglist>(int_type Row, int NumEntries, const double *srcValues, const int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TSumIntoGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a5b0b879fda6512f32e288e217c51821c</anchor>
      <arglist>(int_type Row, int NumEntries, const double *srcValues, const int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac4d1f08fe0feaa4828d09ba135ccc5a8</anchor>
      <arglist>(int_type Row, int Length, int &amp;NumEntries, double *values, int_type *Indices) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a81b9dc466fd6a129830dfc7291eb5e75</anchor>
      <arglist>(int_type Row, int Length, int &amp;NumEntries, double *values) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a63c6a449ca98a1773f07d6787dab023e</anchor>
      <arglist>(int_type Row, int &amp;NumEntries, double *&amp;values, int_type *&amp;Indices) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>acae67b72aad4fb34afa3178a5e0a541d</anchor>
      <arglist>(int_type Row, int &amp;NumEntries, double *&amp;values) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TCopyAndPermuteCrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a32f36731195e4ffc39b4e6227d498752</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TCopyAndPermuteRowMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac92d57352082816461c38b5519c70efc</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TUnpackAndCombine</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae9b09cf6845423d48b0eef43c07f24fb</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>FusedTransfer</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6f7b4cfbd5cc5f645649937809a3e2e0</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, const TransferType &amp;RowTransfer, const Epetra_Map *DomainMap, const Epetra_Map *RangeMap, bool RestrictCommunicator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af174457dccd1ff7612126172863614c0</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, const int *NumEntriesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad4d9a06553f57f94b1f294356a91823b</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, int NumEntriesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a83e3f3a7c450a7443bd3b41580d11513</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap, const int *NumEntriesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a976b94f3d9dbfe17aa425d29a3b0c0d7</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap, int NumEntriesPerRow, bool StaticProfile=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>abea2e6fa0f05885ec6bb758283777251</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_CrsGraph &amp;Graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8b7002382b0e988660cc450a8453987e</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, const Epetra_Import &amp;RowImporter, const Epetra_Map *DomainMap=0, const Epetra_Map *RangeMap=0, bool RestrictCommunicator=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8a9e9a8fc2eb865889c9e090528f6215</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, const Epetra_Export &amp;RowExporter, const Epetra_Map *DomainMap=0, const Epetra_Map *RangeMap=0, bool RestrictCommunicator=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4a7e88dafd4636c054c36c1ccbb1a5fb</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_CrsMatrix</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af90e064c3cd9408a0ade355de3646bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aac12887d3d6c815496702ee9c07d097b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutScalar</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3c2eb1fc1151fef071b29a37bff8822b</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a89dca01cc1dcf5c46cd34ecba9a0c6d1</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ade2f6db3d0fe6fec7ec372fbac62a266</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4ccbcfc66018914cb3e33633ea44905b</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a0b377337747019b1d09cf8bddb58ae7f</anchor>
      <arglist>(int GlobalRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aa0fb8729c9a0e7dfa65db4160e3a167f</anchor>
      <arglist>(long long GlobalRow, int NumEntries, double *Values, long long *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3fbd926628202eb27de9a438a8267097</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a317d74a5705695bad5b72f9827314951</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a969370e3ee66476c94248fb0a25f1635</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>acb1179f36e68ca858832216832df65e9</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertMyValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ada0a4c3e447466758bd8608b077e90a0</anchor>
      <arglist>(int MyRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertMyValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>abc3aff1cbaa86e32fc971f3613b350d2</anchor>
      <arglist>(int MyRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>acecf7e5bf939b56644e25c57f67e137d</anchor>
      <arglist>(int MyRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8e93959017a68cb0103110d80b124c82</anchor>
      <arglist>(int MyRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceDiagonalValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aeecb739b8f837a91406050f6f8bd7b9a</anchor>
      <arglist>(const Epetra_Vector &amp;Diagonal)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a355b4e8d1e28b16bacf37ab637ac0c3f</anchor>
      <arglist>(bool OptimizeDataStorage=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aac3c13275e8dbe80826e820abbb8e49c</anchor>
      <arglist>(const Epetra_Map &amp;DomainMap, const Epetra_Map &amp;RangeMap, bool OptimizeDataStorage=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OptimizeStorage</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac54a33eafbaa0a966cf2c0ce454a7d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MakeDataContiguous</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1d5d779243fdca3b068cdc4cf5781f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8f108e292aa6be5c4663e7d96038795e</anchor>
      <arglist>(int GlobalRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a279fc19598e40acab058754d3ce87409</anchor>
      <arglist>(long long GlobalRow, int Length, int &amp;NumEntries, double *Values, long long *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a368478296db5d31fc225dffb6550a6dd</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7c1c5d50e45abaea4a8733ae25a0bcb0</anchor>
      <arglist>(int GlobalRow, int Length, int &amp;NumEntries, double *Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a05428983b059062a39e295af8a84db8d</anchor>
      <arglist>(long long GlobalRow, int Length, int &amp;NumEntries, double *Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a49f26b519a05f368a894669af68a7e83</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac507a69c2f8d5aa7e42fde8ecc626a07</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a857d82ac4b2d4fca28411be6f903705e</anchor>
      <arglist>(int GlobalRow, int &amp;NumEntries, double *&amp;Values, int *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8cd921db4b0298355736342b9b72eae6</anchor>
      <arglist>(long long GlobalRow, int &amp;NumEntries, double *&amp;Values, long long *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac5e1cd7b5c3103753675c548ae45e7ab</anchor>
      <arglist>(int MyRow, int &amp;NumEntries, double *&amp;Values, int *&amp;Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a72b706087df02d522050f11f7a26fcf2</anchor>
      <arglist>(int GlobalRow, int &amp;NumEntries, double *&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a985d0d78bbdef5c0588bf5bbab46d677</anchor>
      <arglist>(long long GlobalRow, int &amp;NumEntries, double *&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowView</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1271bf8a8cfed7e5e23fd3900614b8d8</anchor>
      <arglist>(int MyRow, int &amp;NumEntries, double *&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae97a6c65b11aa29b3bb25d9788c56b3a</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply1</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a079675f793f24b4c0f4a15e0a8f81170</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac34cf636e6e83755782aa04769a12f7b</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply1</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af217ec03cc9e54dda3e0f16e22fd4900</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a67f656715fd7b7399189306bff2fc7bf</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad0e5e133621208927b141549c0fb4dcc</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvRowSums</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac1f673de6d8a86593d5f831958ab60b3</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvRowMaxs</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6199c3a51685f599f899045da5930c09</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a100330317094dc8a19f8feb73b5f0b87</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvColSums</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aff7abb7261096433dd0f8287807ae70d</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvColMaxs</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac78cbcf70cbaf545bc4cc578e38a6932</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a136bb231cfe4bb129c6754f224eb0889</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Filled</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a057fdf961ff701e5f397a5fb36b2cfe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StorageOptimized</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aafa3ed2b98925484d4de848a2700c77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreGlobal</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab583c9e157bfb501824d6765eabc11d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreLocal</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a248ad6d6ee55b66c5bad87986b678c81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreContiguous</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1dd813ad87b8bdc7e938276c0b59effa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a48d7fac9f3506d97a9d41f49ab475df7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ace76ab593028aebfbeb9e87b36765620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NoDiagonal</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac3a94e81dcf3795570bffaaa84cb4ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8a0a4d4aba370f46ef12125ec518cf40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>adb57e6ff06bc2e2bd75b5f33dab2cffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormFrobenius</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af1fa1308f35ab92929c47732b20315ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a90c43138898c177bf2fdc383a5218519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7cbafbd475025753b89ff7dde4a4ae06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae283c3bdb03c9c0119a52cb17fbf19ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3df080867e6e15d540b707089b222a1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a121c9f350f0260046123a899d9bfb6e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a36d6e7cf421c1b8627a8a02d16fa4f12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad4a14c72133a944eb78228e81a4eed0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aaa3cfd38cafe710d9e06c9f41b8384b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a945bc3352ac9d3f127ba2ff5b0bd31b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a49d07432b1eaa63e868cd30aa7cdbfd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a34634841938b1533267f7eedd33a11cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a5968a805867bd81d07fdd8f9bb0581f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1dd09d24d8fd985fca9f31fbb8aafe64</anchor>
      <arglist>(long long Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedGlobalEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a197b732ff33ff9214491401337f73285</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a0d325c57addaeefad94b888610423ba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxNumEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac07d1cba8cfcc0e6ca47dca54f93f68f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a431684ff3fea5bdf89b3d14eb01d2cd2</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedMyEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a58d801a37c3fc0ed1d5b613de380aa46</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a9cc04d60f3b441d887cfc7e6738c5c26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a9305402ac0296824dfc8696c05957b3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StaticGraph</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1b159539dcbb15a1578c704e057e3b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsGraph &amp;</type>
      <name>Graph</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae5c359fc250ba26f1849f6eac3ee3fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RowMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae1d54a78f9afdbc0141f4345f0548ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceRowMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3c83fee95e71471e118fa91c15809aa2</anchor>
      <arglist>(const Epetra_BlockMap &amp;newmap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HaveColMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a47adb3c2ed4a0239099b0bce573b3159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceColMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7c97a06e482fe0368fa4775e2a724109</anchor>
      <arglist>(const Epetra_BlockMap &amp;newmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceDomainMapAndImporter</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a0d0efbedcbd1c34ba7c3d61c7bd5bbf2</anchor>
      <arglist>(const Epetra_Map &amp;NewDomainMap, const Epetra_Import *NewImporter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RemoveEmptyProcessesInPlace</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab338ef7689fdb5131c6624a6348e2fa5</anchor>
      <arglist>(const Epetra_BlockMap *NewMap)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>ColMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>abbf4fb5cdfcfad5fe319c12aeec25075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>DomainMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a9e0fa687441503d5322d4f644383ad7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RangeMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a1818b6b366f7044d3b94c7c64cbea627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import *</type>
      <name>Importer</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a57d0c80478eecd199017c68528c20818</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Export *</type>
      <name>Exporter</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a63a71728708d45d9218c11060b179bbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a60efe52e1a41775e203c5b8f21b0d649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a4dfdc266f4a6ea0cdd5f33a9928f0417</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a20e503abb170a7865fc5a513b32a493b</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8f633ba7e299d82ee4dc407513e0afdb</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GRID64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a98fbbc8c56fd3ccf2b0f5dfd71207c42</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a356a9d76e030e2b8be9a024c206b95a3</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a37866cc2212e745122d31b74e19ddec2</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a65a68520008c55278a3f5a235dc77a79</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GCID64</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac20d92c4e76c3b0a052bddebc4adfdaf</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a735124b6bb3b5233847ce1a1ea405727</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a19aca3a0371b41b6a2eabc98c3371093</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLRID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7f32a654ed53ee6d9d76a6b1e83baa09</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a5fc829144b8edfab36366706b0c20061</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6f1b12082381c37413cca21179866eb3</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLCID</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a08df0157037b610ae5fc51e9d416617f</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalRow</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab92465a55b78f04751e5ef406361a5fe</anchor>
      <arglist>(int GID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalRow</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab715978903cf085ae9186453c567ba30</anchor>
      <arglist>(long long GID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a2163d7af6d78275f90254690241e2113</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af7479718a7c749d1cf2d38b3d717b89f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a859bf40b4652b385d06235450dcda7d8</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a77c4232f1b3d32ff76504ed314df5f76</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aabc222586a907f68504ea4ef82ee177d</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a90b539c4515f5a1fde4e83abf1de4745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aa477d9e4c889af0bcbb94b1ceb9bb350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6d0a1d141aa70359072327d20d3db7bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a451da1c72648b7e8dc3c02b33ba6057b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad758ff71d50b2cc807f2c3ad7cb6d4a1</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a025d7a59c95dd71bc7de098ff31e1118</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ac9035e7698d24cbee49c1c430dd27a1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a8ab60bf8c3ca20701c3bb419619d9c85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a7a48df432811baa3d3981dc67e90a18d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a018fdc4e83181713d102fa7496f2bece</anchor>
      <arglist>(int Loc)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a14ee4621a469f76ccb1a9fb70e84020c</anchor>
      <arglist>(int Loc) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCrsDataPointers</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a29025ccd756ce07a60f4f68de29e0565</anchor>
      <arglist>(int *&amp;IndexOffset, int *&amp;Indices, double *&amp;Values_in) const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_IntSerialDenseVector &amp;</type>
      <name>ExpertExtractIndexOffset</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>aace936ff3ff41b09aa79ec7ed070f960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_IntSerialDenseVector &amp;</type>
      <name>ExpertExtractIndices</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ad6548de37ad7852d2a0c391ebd0bec49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *&amp;</type>
      <name>ExpertExtractValues</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a5571e73e2a5c89179259f2e7658252b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExpertStaticFillComplete</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a3753556d7dc03d2b66b1b1a3be5c1795</anchor>
      <arglist>(const Epetra_Map &amp;DomainMap, const Epetra_Map &amp;RangeMap, const Epetra_Import *Importer=0, const Epetra_Export *Exporter=0, int NumMyDiagonals=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExpertMakeUniqueCrsGraphData</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ab074df197e9d79057217bf7e8de4fa66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SortGhostsAssociatedWithEachProcessor</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>ae5672eb590bbd4bf5f6124af1f66f3be</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>ImportMap</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a6049d8fcad89db1851be208eb0681aaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>a2d0c8644018b39157b3db9e6acc0096a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__CrsMatrix.html</anchorfile>
      <anchor>af574d136505d21e5890894e8e39f4ca1</anchor>
      <arglist>(const Epetra_Map *DomainMap, const Epetra_Map *RangeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_CrsSingletonFilter</name>
    <filename>classEpetra__CrsSingletonFilter.html</filename>
    <member kind="function" protection="protected">
      <type>Epetra_CrsMatrix *</type>
      <name>FullCrsMatrix</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a2882943c16e0457ae750a24216b394bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Epetra_Map &amp;</type>
      <name>FullMatrixRowMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ad55e957c3066bba6493e0eb8b7936e57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Epetra_Map &amp;</type>
      <name>FullMatrixColMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a7a9fe4fa04926517b5085263ff4f4fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Epetra_Map &amp;</type>
      <name>FullMatrixDomainMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a42f15cddb382306b4826e0b51400a631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Epetra_Map &amp;</type>
      <name>FullMatrixRangeMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a84259fec25831a0fe892a40b4d97fa19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDefaults</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a23d758edc50b62c46e5e7e02933499b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ComputeEliminateMaps</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a401f23d3928824a484cf0cce0f96c888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Setup</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a17ce0cffec77565e1d0d2f0b71dc06c2</anchor>
      <arglist>(Epetra_LinearProblem *Problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InitFullMatrixAccess</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a6029a8f1ece8acbf10a9f0772ff02ade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetRow</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a41649311a3660f6ba0516e585e98d416</anchor>
      <arglist>(int Row, int &amp;NumIndices, int *&amp;Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetRowGCIDs</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a23c29e00acc70e6958f814e7f4c79a7b</anchor>
      <arglist>(int Row, int &amp;NumIndices, double *&amp;Values, int *&amp;GlobalIndices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetRow</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5c5b168c3cefb73cd1564b29790a9bc9</anchor>
      <arglist>(int Row, int &amp;NumIndices, double *&amp;Values, int *&amp;Indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CreatePostSolveArrays</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ab124f4532fc0a4510f42a6907c0702c8</anchor>
      <arglist>(const Epetra_IntVector &amp;RowIDs, const Epetra_MapColoring &amp;RowMapColors, const Epetra_IntVector &amp;ColProfiles, const Epetra_IntVector &amp;NewColProfiles, const Epetra_IntVector &amp;ColHasRowWithSingleton)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ConstructRedistributeExporter</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a2f557c2e1780a3b408c0c821f8b0252d</anchor>
      <arglist>(Epetra_Map *SourceMap, Epetra_Map *TargetMap, Epetra_Export *&amp;RedistributeExporter, Epetra_Map *&amp;RedistributeMap)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_LinearProblem *</type>
      <name>FullProblem_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a7d63256584f3d22e4f258823a4094962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_LinearProblem *</type>
      <name>ReducedProblem_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ac6a106ae5194758895d49acfd097b9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_RowMatrix *</type>
      <name>FullMatrix_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a2b402e49826c0dc66777b4ea17e574c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CrsMatrix *</type>
      <name>FullCrsMatrix_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ac581fd52e89a38bc9855d00dd85293f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CrsMatrix *</type>
      <name>ReducedMatrix_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ad8c078d5a8ed74c37b5774ab6b7fdf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ReducedRHS_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a36964e629d94121b201ecfb4b663d071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ReducedLHS_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ae05abce03fb8bc147ce4cb771efdaff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixRowMap_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>aaa64d513bbf4776a1bc45174b045ad46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixColMap_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a675b78efe848922276e69584fea56dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixDomainMap_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a7f6055690aff130526fdf9b23325b0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixRangeMap_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>aa5d24546ec8585ab0e5cdf0abb0a2899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>OrigReducedMatrixDomainMap_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>af22ff56dc1891acf012df7db056e9445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Import *</type>
      <name>Full2ReducedRHSImporter_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a9a1068cb484594c4fb575efa8f0de883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Import *</type>
      <name>Full2ReducedLHSImporter_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a73e14c1e587776fed4ef0ee213c69161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Export *</type>
      <name>RedistributeDomainExporter_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>aec3850f021cae30a4774c66d78a5280f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>ColSingletonRowLIDs_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a355f378f73400e107405d02063c828eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>ColSingletonColLIDs_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a3e4c99e2d9c66b2a87811c158476b76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>ColSingletonPivotLIDs_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>adc2455637298118cdc1773dcbccbcb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>ColSingletonPivots_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a1f6dc3f15d96424d000b19e4fdb6dd18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>AbsoluteThreshold_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ae0d9d2a6927a1e4ece4604a665eac3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>RelativeThreshold_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ae520f5f836255317d44a440ef7789344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyRowSingletons_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a09819c029ffd3c9bd9936ce985ffb3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyColSingletons_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a7cd326876a65c1cd8dc8a43e07530aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumGlobalRowSingletons_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>adb119d9eaa219d5c4da4afc801946253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumGlobalColSingletons_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a850e706b0bc2295f05ad2c16cec82107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>RatioOfDimensions_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ab2abbb60e9f9d588867419dc9a284308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>RatioOfNonzeros_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a89f2f1c0c9f66916528bf786a181dce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HaveReducedProblem_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5332400913a615a25db88a05a93e86ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UserDefinedEliminateMaps_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5822c630d7f986cef4c5d2efe6b3f1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>AnalysisDone_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ab5243130f80792c2b78233ea58544034</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SymmetricElimination_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>aba5d08b309d9703ca4e788f009fe0ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>tempExportX_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a83d3fc094d4687ade7f9dc239b679a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>tempX_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a369e1396efdb666d821ffd1819289a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>tempB_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a47fd928f27e421362b589c62a944eba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>RedistributeReducedLHS_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5c89965c8dc9fb49252cb644571c6bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>Indices_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a20694d61ddfd9e6f9c9de74fda86a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseVector</type>
      <name>Values_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ac6d64b4b274c6a82fcc3a82759cbea58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MapColoring *</type>
      <name>RowMapColors_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a777a3b17d37d7c2c1e4f72dc11cec820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MapColoring *</type>
      <name>ColMapColors_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a10e8dae6dba98b9fb30f3fe51cb090ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>FullMatrixIsCrsMatrix_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ae647bbb76fbc1c2e12390008d19f8952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MaxNumMyEntries_</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ad77cbfe22bd5de3d7ca2adf6e5b53909</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_CrsSingletonFilter</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5d5822473ecb2849db8f9844464416eb</anchor>
      <arglist>(const Epetra_CrsSingletonFilter &amp;Problem)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_CrsSingletonFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a1f4877995c50b30a8db0316aba077547</anchor>
      <arglist>(const Epetra_CrsSingletonFilter &amp;Problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_CrsSingletonFilter</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a4a83c921a2a7feadbc925c318be070c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_CrsSingletonFilter</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a97a3a18fde07616bcb4ce214a9184285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Analyze</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a218e9852c23b383e352ef6e09b657287</anchor>
      <arglist>(Epetra_RowMatrix *FullMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SingletonsDetected</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a05e2865ecceb5473bb16539111bb4a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ConstructReducedProblem</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a333689eec3a4a3102eac5746242ea2ec</anchor>
      <arglist>(Epetra_LinearProblem *Problem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateReducedProblem</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ab103e42d9a9bf0a43ea2c07d5844034e</anchor>
      <arglist>(Epetra_LinearProblem *Problem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputeFullSolution</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a140ef6041a2415825123697655fb663c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRowSingletons</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a8c267ccc1df82c6b1ed85eda13068805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumColSingletons</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a0ebcccc91fe546cfee363054e9a54476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSingletons</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a232e4bda54e2398eeedaedf50f0f904b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RatioOfDimensions</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a16ff90a181e9b57bf795aaac59809396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RatioOfNonzeros</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a3c06c24fe553a2a1e6acc7cd602889a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_LinearProblem *</type>
      <name>FullProblem</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a5487e9bf25d1a6523a746ea98d1546ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_LinearProblem *</type>
      <name>ReducedProblem</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a32d2efb4b9508ab5fb12eee4053d7312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_RowMatrix *</type>
      <name>FullMatrix</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ad515e1f92a6d22f2c744553ad4391569</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>ReducedMatrix</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a02098bff57c3a091ba549b4cb883f698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_MapColoring *</type>
      <name>RowMapColors</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a7e06bcf693da7d33e8add68e79e60bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_MapColoring *</type>
      <name>ColMapColors</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>afb75efda5385efaf1112d8bdbad19bd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixRowMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a2c328dade68052e09d7ef2ba58c90a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixColMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>ad3564becac2a859d530fcd98aafcb315</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixDomainMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>a8b5a25a5a409ab320ff24fcac37d5dd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>ReducedMatrixRangeMap</name>
      <anchorfile>classEpetra__CrsSingletonFilter.html</anchorfile>
      <anchor>aa138a066f62da4ce511b540770cb7f0c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Data</name>
    <filename>classEpetra__Data.html</filename>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReferenceCount_</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>a1390e4b6e097f00946fb2d3949402e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Epetra_Data</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>a155b8b1df6177133912fa82de4e2ba5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Epetra_Data</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>ab3e5fa8164a762205690a5a37bf1a71b</anchor>
      <arglist>(const Epetra_Data &amp;Data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Data</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>a3b0b9af6bdd5713e5031cc96cec3d691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>IncrementReferenceCount</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>a821d9772eb8e3b8cda5591ac46ad1e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DecrementReferenceCount</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>a2d77ab708b509da443bd2ba54cdb5ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ReferenceCount</name>
      <anchorfile>classEpetra__Data.html</anchorfile>
      <anchor>ab88edeb361fb46bdc934b2733a698b27</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Directory</name>
    <filename>classEpetra__Directory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Directory</name>
      <anchorfile>classEpetra__Directory.html</anchorfile>
      <anchor>a8bb5d1b64a1bff373f2425696e00b64f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDirectoryEntries</name>
      <anchorfile>classEpetra__Directory.html</anchorfile>
      <anchor>ad0482dd3dd5a40957452d1ebea88ed2c</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int NumEntries, const int *GlobalEntries, int *Procs, int *LocalEntries, int *EntrySizes, bool high_rank_sharing_procs=false) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDirectoryEntries</name>
      <anchorfile>classEpetra__Directory.html</anchorfile>
      <anchor>a39012a561f8fae5b5ca4f4a040922c52</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int NumEntries, const long long *GlobalEntries, int *Procs, int *LocalEntries, int *EntrySizes, bool high_rank_sharing_procs=false) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GIDsAllUniquelyOwned</name>
      <anchorfile>classEpetra__Directory.html</anchorfile>
      <anchor>a8e42f6b5f9129bf6ee0fc10602eefcd9</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_DistObject</name>
    <filename>classEpetra__DistObject.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_SrcDistObject</base>
    <member kind="variable" protection="protected">
      <type>Epetra_BlockMap</type>
      <name>Map_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>afe0876212b0bc64248080c7949cc2fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Epetra_Comm *</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>af6b10439013b488908a69faf197b3720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>DistributedGlobal_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a3e5aab3865d18a2c8efaea23d58aed2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>Exports_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a55db06ab43cc8633cc98bda807b75052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>Imports_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>ac2c0a956075d9df8f96480a64695afef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LenExports_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>aa299778b21bd3310bfa8b91b1435f1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LenImports_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>ab3d50d714698b235360d6c9b8c457df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>Sizes_</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a2a9bc03c6fef4031fe9358c9e855e174</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_DistObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a986499d7d9626da6fef48a8240425c95</anchor>
      <arglist>(const Epetra_DistObject &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_DistObject</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>aea928fbc32a281b5038a149bc7ff766a</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_DistObject</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>ac73d8a91a6389a526fc7e08a8a1b043b</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const char *const Label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_DistObject</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a09204a59077097b73d3cf70e862feaf9</anchor>
      <arglist>(const Epetra_DistObject &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_DistObject</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a919b64bfe18dcf2b52bc1c678ac44ec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Import</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a393f365177c485ab1c30f288514f9297</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A, const Epetra_Import &amp;Importer, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Import</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>aeac1b1da995e88db2ae67cc02ad37dc8</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A, const Epetra_Export &amp;Exporter, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Export</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a88a69d5a64168c02fadfc6c55ecd5a1c</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A, const Epetra_Import &amp;Importer, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Export</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a8c537c6cbcf366a986227496c6aa79ee</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A, const Epetra_Export &amp;Exporter, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor=0)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a482e0b9daaef3907220e566d9f863b8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a89452671308ffda38231b75f4a178d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DistributedGlobal</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>ae6b4dc0d19924d5942cfc54d055f1c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a61b027abd7c21a983bbc27447d8bfcf8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>DoTransfer</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>afc5b57ce0a838761a72e5b6d32e9aeed</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A, Epetra_CombineMode CombineMode, int NumSameIDs, int NumPermuteIDs, int NumRemoteIDs, int NumExportIDs, int *PermuteToLIDs, int *PermuteFromLIDs, int *RemoteLIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;LenImports, char *&amp;Imports, Epetra_Distributor &amp;Distor, bool DoReverse, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a0574905a78333b8b1901cf463cd1b248</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a976ba99d0144fbc5a2ac6e09068948f4</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a8e1ce66a9c14990d9c10770b1a3b1a83</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__DistObject.html</anchorfile>
      <anchor>a38fa9a68b7998eb7ed664568e64133ea</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Distributor</name>
    <filename>classEpetra__Distributor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Epetra_Distributor *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a22e6edc3bfe4efea46441f031351e179</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Epetra_Distributor *</type>
      <name>ReverseClone</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>aa591f3e3d75b52c5953637213982f71f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Distributor</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a5b6eee88f3f3378be6f071ef44cbe9e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CreateFromSends</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a6c4c07f61613fbd7b53453cadd6169ea</anchor>
      <arglist>(const int &amp;NumExportIDs, const int *ExportPIDs, bool Deterministic, int &amp;NumRemoteIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a28a5a8c36e09f6beec91801e7dba64b0</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const int *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, int *&amp;ExportGIDs, int *&amp;ExportPIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a74efb02eb85039dd83c987d938f98621</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const long long *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, long long *&amp;ExportGIDs, int *&amp;ExportPIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Do</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a412a1c166e71522a0fd736009996224f</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a27b9bac741ca6076328d27fca32853c5</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a91234de8374def4e52bd1e167716843e</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoWaits</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a46f08ccccb9d939c641a26801f348260</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a4e41ee231176839ec918b30f90e66cf9</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoReverseWaits</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a0be31cfb75e24624730025c0652c4e99</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Do</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>ab18f25b1cd0bbd997ae856d6e2cf1fb5</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>ab09e2bc43e899b0996b0a8d640a440f0</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a064b7da09cf7f53da922e034bb107f45</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>ae13275093f9ea64731bb7ec7eef7a545</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__Distributor.html</anchorfile>
      <anchor>a9d72136e76d1c715345ec0f83d120a04</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Export</name>
    <filename>classEpetra__Export.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type></type>
      <name>Epetra_Export</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a2e459af232be43d91aab94f160a8be76</anchor>
      <arglist>(const Epetra_BlockMap &amp;SourceMap, const Epetra_BlockMap &amp;TargetMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Export</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a03ceb5f74b8ef4bc0bc82246c5be51fa</anchor>
      <arglist>(const Epetra_Export &amp;Exporter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Export</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a587f22dc16d6dad7063b8c453510f075</anchor>
      <arglist>(const Epetra_Import &amp;Exporter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Export</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>aa81877f06f426d8fea0bd676e63fecff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSameIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>abf3460816e786f7920b08d6ed1d31135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumPermuteIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a64bdf517323e61edaadbbfd6a8d3dade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>PermuteFromLIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a21b39a02c335bb10843b985c198e2ec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>PermuteToLIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a28c431573b6ccffc1072b77a9888ddca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRemoteIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a68ca0cb7485e3de4e385e9312e5d11a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>RemoteLIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>aabf4d2a325a02d81186dee83092d25ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumExportIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a09edabf8d8fb087adeeaaf58cae3413c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ExportLIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a5af096790977c247d8281a76370c06d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ExportPIDs</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a8dab425a9a51353e8a82df38c31f716c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSend</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>ab1a4c42d4cdea6cf2008104db6427493</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRecv</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>ab774793aa44eb412e7fb39f6aac6caa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>SourceMap</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>abcc0502c5d86fdc141f72b0a502c9496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>TargetMap</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a0ac37b0ba528ce597bdc6f360e2cb0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor &amp;</type>
      <name>Distributor</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a2a698fad8b1d9ed5235c94c1160b5c73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_Export &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a24087daa703eb4a3e29d9a5a5ae6e79e</anchor>
      <arglist>(const Epetra_Export &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Construct</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>ab2264805cf91bf8d675900693377d50e</anchor>
      <arglist>(const Epetra_BlockMap &amp;SourceMap, const Epetra_BlockMap &amp;TargetMap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>TargetMap_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a4f35861783aa93ce6f154c875c320b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>SourceMap_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a7fd4bd3fd23ddeeb106be70ad5f09a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSameIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a308edb9f2f2f1f6acef88242840ce49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPermuteIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a3e6c38e05b711182580b988d4c9393cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>PermuteToLIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a0c27c2604c8d72b88bcfd5a83ce20cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>PermuteFromLIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>afb119c1305ffb3e4266b2e932b86f1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRemoteIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a5b79b4fad3a80656513b45aa1f3717c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>RemoteLIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a17c2d1b6d3238b9db9e62d924adc80b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumExportIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a15bb7d7cd7c05371e9c44161a01d3c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ExportLIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a3448bc37f07de638bd3b6a271abfaa6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ExportPIDs_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a471fb4229ce258dbf9d7f235dee04189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSend_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a548023f2f393fa896b9794ec2bc326d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRecv_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a1b0b59cd4732d7ce1d2c109eef224bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Distributor *</type>
      <name>Distor_</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>af3ce260640bd9fc772856716f2fdfb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>a3c82eed7c89724d82d4985850b22cb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>af6b2f2a23a1ca2da1695f92fc8a26119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__Export.html</anchorfile>
      <anchor>ad6646d4c3d6b3137bb7fcfd8a6075879</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_FastCrsOperator</name>
    <filename>classEpetra__FastCrsOperator.html</filename>
    <base>Epetra_CompObject</base>
    <base virtualness="virtual">Epetra_Operator</base>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>abfca87aa68b50f7244b27ecdba60ceab</anchor>
      <arglist>(bool UseFloats)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>CrsMatrix_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a2effcc1f9011cf68a204ae9b1e9c1e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ac92b8a806890f612e2c8d1b80144fa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>aa775a62899923aefae314294827197f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>Values_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a4d5e82b07db7ba7d3c5f4363302a765f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float *</type>
      <name>FloatValues_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ab5fedb61de2e61e73bc6e5a8e7697c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>Indices_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a531104d2b2e531a6d19774b2e87d0708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short *</type>
      <name>ShortIndices_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ac4506873413f0d37409dd2064fdaa6ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UsingFloats_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>aedbe0cdd12a569b402478d09f4cbb77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UsingShorts_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ac1a03f64e8d168265218b8b87d6d84ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ValuesAllocated_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>af2080bc752372ae5df0c8af7b0484b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ImportVector_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a14fd742ee1db2b4ad7e0ea8a5c59edd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ExportVector_</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>adfa75798489ab13aa554bb11d7774f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FastCrsOperator</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>aaa6a49107db28dfb826bc2e043abb67b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;Matrix, bool UseFloats=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_FastCrsOperator</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ae4982778225bdc72eb3cbae2d44f59af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateValues</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a8aa0a53c047dbb2c0d5fd539759c663e</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>aeea4d2a9bb25b3a1b108561af7304a77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>aa1161fc567b172f4685285fa0329e84c</anchor>
      <arglist>(bool UseTranspose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a787adb005294c0a098d4a9cf1b1ab220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>af871a679197a04baed8469423378c5aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a4ea38720992dfcecc662080ff6fefc0f</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>adeced12fb17042729897ec4dfad85f87</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a7f3334a7766a9f84d73f9e6fd01e2b30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>ab9c456de36704c3eb5b0b1e6348f57f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a6ff8f0959320f4e031904577af4d9ddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__FastCrsOperator.html</anchorfile>
      <anchor>a14ac45815d868865bfd599f7e627c927</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_FECrsGraph</name>
    <filename>classEpetra__FECrsGraph.html</filename>
    <base>Epetra_CrsGraph</base>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a1779462922e120713600781cf72d9e64</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int *NumIndicesPerRow, bool ignoreNonLocalEntries=false, bool buildNonlocalGraph=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>adb1bd2f6a929f41d14726ab745579378</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int NumIndicesPerRow, bool ignoreNonLocalEntries=false, bool buildNonlocalGraph=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a34d46a72526be6c4996bbb5f532a415b</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int *NumIndicesPerRow, bool ignoreNonLocalEntries=false, bool buildNonlocalGraph=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a1f6040f59c13dd07366b6dea1f7ec018</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int NumIndicesPerRow, bool ignoreNonLocalEntries=false, bool buildNonlocalGraph=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_FECrsGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a8a791a3c6144dac17de4c274fe826e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a035e4e80905b925fa92c67ebc53af428</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a7595a7e9a2c9cacea6070e54f0df99c4</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>af5e259d226f77270141414bb73cb239c</anchor>
      <arglist>(bool callFillComplete=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a59a372d227393f5f54c5ff7917806813</anchor>
      <arglist>(const Epetra_Map &amp;domain_map, const Epetra_Map &amp;range_map, bool callFillComplete=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseNonlocalGraph</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a902a00eaa88968a3737e33401989f06c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, Epetra_CrsGraphData::EntriesInOneRow&lt; int &gt; &gt; &amp;</type>
      <name>nonlocalRowData</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>aa587279a790ff1235e752065f924dd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; long long, Epetra_CrsGraphData::EntriesInOneRow&lt; long long &gt; &gt; &amp;</type>
      <name>nonlocalRowData</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a30175c2764503858c8b673c5bb291ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DeleteMemory</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>aeffb36d87ce9473b95206b4a908bce25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertNonlocalRow</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a4885d62e44af452b7a3bb8444ba06234</anchor>
      <arglist>(int row, int offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputNonlocalIndices</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>afbcc704cd4aeeb4a71f4f8b55dbd5222</anchor>
      <arglist>(int row, int numCols, const int *cols)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputNonlocalIndex</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a222023b9a96728b964c7eb1c72aae678</anchor>
      <arglist>(int rowoffset, int col)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::map&lt; int_type, Epetra_CrsGraphData::EntriesInOneRow&lt; int_type &gt; &gt; &amp;</type>
      <name>nonlocalRowData</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a4104ee1f5ee16673c28c5d5761e0b7da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_FECrsGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>abc9f6c47dee48cd363d9ff936605259f</anchor>
      <arglist>(const Epetra_FECrsGraph &amp;Graph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertGlobalIndices</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>aecdd88c4e75c9fa365e893c9d7613c79</anchor>
      <arglist>(int numRows, const int_type *rows, int numCols, const int_type *cols)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>af8284e753421ab5a3e258efe91e89ed9</anchor>
      <arglist>(const Epetra_Map &amp;domain_map, const Epetra_Map &amp;range_map, bool callFillComplete)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>myFirstRow_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a42f813f6804000ff2be574b82541d56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myNumRows_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>ad33cf35a736b7d5c53e0ee647c6f02bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ignoreNonLocalEntries_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>ab938d2dda78a9e2ec493b025a76f98b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, Epetra_CrsGraphData::EntriesInOneRow&lt; int &gt; &gt;</type>
      <name>nonlocalRowData_int_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a2995a7e2dfb1cc196b8c499b5c598422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; long long, Epetra_CrsGraphData::EntriesInOneRow&lt; long long &gt; &gt;</type>
      <name>nonlocalRowData_LL_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a3a2adfd9d5122b9570b24b5f784882be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsGraph *</type>
      <name>nonlocalGraph_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>a92a21550fb73bbf0663710c559a00875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>buildNonlocalGraph_</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>ab160e5129ecba21634745cf4c89d1ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsGraph.html</anchorfile>
      <anchor>ad04c47c4168b444d18b533d3b74179d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_FECrsMatrix</name>
    <filename>classEpetra__FECrsMatrix.html</filename>
    <base>Epetra_CrsMatrix</base>
    <member kind="enumvalue">
      <name>ROW_MAJOR</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a23995ce5d3502c45ad9090775729694ba2131bbbfce70781f879ee5f5e9b4f07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_MAJOR</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a23995ce5d3502c45ad9090775729694ba8fd02657957b13265e580aa216166332</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_MAJOR</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a23995ce5d3502c45ad9090775729694ba2131bbbfce70781f879ee5f5e9b4f07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_MAJOR</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a23995ce5d3502c45ad9090775729694ba8fd02657957b13265e580aa216166332</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a4aaa620899d9b2b2ae89432ad61e8fe8</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, int *NumEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a8a24a4e003ab9e9ae446145e82fdf512</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, int NumEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a5db6dcfbb015559ea1c9674e3eb41f5e</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap, int *NumEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a8efe94f06d0fdd338c534fcbec532087</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_Map &amp;RowMap, const Epetra_Map &amp;ColMap, int NumEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a9cbaf08e08b1d5666c5a287f09abb02c</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_CrsGraph &amp;Graph, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a5a746ba9a603a312552ccfbdbed1a3db</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_FECrsGraph &amp;Graph, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aa11b1b67f776e92a896be8d9c609268f</anchor>
      <arglist>(const Epetra_FECrsMatrix &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_FECrsMatrix</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a1ab4d022c768b27900eb2721cfdad101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_FECrsMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a435b44e60134562f09f46fa2c6329d8c</anchor>
      <arglist>(const Epetra_FECrsMatrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a63bd622d3e23f265e63abf5ad3981c42</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a50d9eae8dab8aad023f0080bde854198</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a54820e91fb84c7c594c4e6f3ea290fe4</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a201ebb7978cbbcdba8ad504823b205fc</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a625900888f61b04c4df0efa05f32290c</anchor>
      <arglist>(int GlobalRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ad54b16400e247c5d5313a8c6e5b4eae8</anchor>
      <arglist>(long long GlobalRow, int NumEntries, double *Values, long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a06de93de62291f2dbe9448e58bbed4d1</anchor>
      <arglist>(int GlobalRow, int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a98bdf0b85d7b14e75ba0dee8e56e4d2d</anchor>
      <arglist>(long long GlobalRow, int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a0b22b84247e2f77592454e5ebb5d6976</anchor>
      <arglist>(int numIndices, const int *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af5cac55be305f03bdf8da67d22e8ed1e</anchor>
      <arglist>(int numIndices, const long long *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a03d2a50c0b12495bf6d773160a8d1e6a</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a1c13129b0e4e6703542916f8c2e99c27</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a8f2f194c4faf9c7adad46cf87d048836</anchor>
      <arglist>(int numIndices, const int *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a4d73d6933e2fab6e5e7eb6f51bdc9085</anchor>
      <arglist>(int numIndices, const long long *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>acda87aecd274a3af625b0d38acf1b4b6</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a7b9460b83183a69972a0b542858283d7</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ae1d3d2572d8c55e74cac3d944cb9f507</anchor>
      <arglist>(int numIndices, const int *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a197727208935bce8db6ef4d8b09314f1</anchor>
      <arglist>(int numIndices, const long long *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a81e58e93f05edc4d5a219fa4b2a1b8ad</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>afd27a70f770d19867dc5192272e0052c</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ab7a53f1400cc14cd5f209e6bd68792b9</anchor>
      <arglist>(int numIndices, const int *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a475994837b8f3d0a05820dbd158d0c0f</anchor>
      <arglist>(int numIndices, const long long *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aa0dd79a68966490a8532af063897c7eb</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a8177afcb29bd9bb8269e43cdb7098e67</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a68420a5fc071ec25d5d315db071a463a</anchor>
      <arglist>(int numIndices, const int *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a6873467b13c949de07dfc7cff31e458b</anchor>
      <arglist>(int numIndices, const long long *indices, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ac9330aeae52b2181d65ba0adbbf685c8</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a346eb5217206ed1502de1855982789b6</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a4b37c1cb96bc73d1e01e5c86c8e631ce</anchor>
      <arglist>(int numIndices, const int *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aa3f2fd7962e397531134f38e429d4474</anchor>
      <arglist>(int numIndices, const long long *indices, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af66402e63c689d9a4165ba2fa30c21b2</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aeedced18f0f0e77c1850d1f0bab544eb</anchor>
      <arglist>(int numRows, const long long *rows, int numCols, const long long *cols, const double *const *values, int format=Epetra_FECrsMatrix::ROW_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a1bf89f2374df05062268662b9e501fb4</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a6d3bcfab2b254cc5a69324959cf6ccf7</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a464e794f2e80d37eba5856c275dc2536</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;rows, const Epetra_IntSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ab80b4ad6be92758805bd2d0896616d22</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;rows, const Epetra_LongLongSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af9d7d9cd58c282b60689954b2d10ec4f</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a1e9f84f03f729c7b614b9c5b1c9a5798</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a88b98b85e2d2bfddb1a594248905426c</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;rows, const Epetra_IntSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InsertGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a706346fb01c7f24a7961ea2c37f1bb6e</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;rows, const Epetra_LongLongSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a42e66a3539ad37c44414683622af4532</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a8d5d24beacd01bd554fbc7b738ceea03</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;indices, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a3ed8d93104c962082f728ae7490e5983</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;rows, const Epetra_IntSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a920faaf67688f67acd893aad3b37da38</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;rows, const Epetra_LongLongSerialDenseVector &amp;cols, const Epetra_SerialDenseMatrix &amp;values, int format=Epetra_FECrsMatrix::COLUMN_MAJOR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a74bef26e07eb9052147278dbdfe1421d</anchor>
      <arglist>(bool callFillComplete=true, Epetra_CombineMode combineMode=Add, bool save_off_and_reuse_map_exporter=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a5d11795f9036bbf8b172385e280836c9</anchor>
      <arglist>(const Epetra_Map &amp;domain_map, const Epetra_Map &amp;range_map, bool callFillComplete=true, Epetra_CombineMode combineMode=Add, bool save_off_and_reuse_map_exporter=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreNonLocalEntries</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a7c67d24394790182b1566229a190bda1</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SUMINTO</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aaebfa7f4606fd968db93b849c97dba774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>REPLACE</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aac27cdf6008913f1fbe89184595956e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>INSERT</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aa123bb409d47537564bdcaf57c476a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SUMINTO</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aaebfa7f4606fd968db93b849c97dba774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>REPLACE</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aac27cdf6008913f1fbe89184595956e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>INSERT</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a71b3f16c610b30e53a08287d413e7d4aa123bb409d47537564bdcaf57c476a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DeleteMemory</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a4ec46ecb19e39982067e898a35330e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a9750b3086691c0f6991720f78609ac14</anchor>
      <arglist>(int numRows, const int_type *rows, int numCols, const int_type *cols, const double *const *values, int format, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ac90ac60afb272a67baec789195e85cac</anchor>
      <arglist>(int numRows, const int_type *rows, int numCols, const int_type *cols, const double *values, int format, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputNonlocalGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a27fb27bbec8218467bb8439b7322bd82</anchor>
      <arglist>(int_type row, int numCols, const int_type *cols, const double *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputGlobalValues_RowMajor</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a47f48b60ab99a6838718c278755ebae4</anchor>
      <arglist>(int numRows, const int_type *rows, int numCols, const int_type *cols, const double *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertNonlocalRow</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af28ed0cf585b83f0be22799b588a2a51</anchor>
      <arglist>(int_type row, typename std::vector&lt; int_type &gt;::iterator offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputNonlocalValue</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af742d0188661ad767c9d8ce0b3a4b8a7</anchor>
      <arglist>(int rowoffset, int_type col, double value, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; int_type &gt; &amp;</type>
      <name>nonlocalRows</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>acec0b14fcee00297f853681c8c6bc9f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; std::vector&lt; int_type &gt; &gt; &amp;</type>
      <name>nonlocalCols</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a2730349f6631014ed4fd97be1b0e60c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aa4bc329d9b221b23dc95691e9ec41f16</anchor>
      <arglist>(int_type GlobalRow, int NumEntries, const double *values, const int_type *Indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a0b0f5268bad60eb773563125d2a1e975</anchor>
      <arglist>(const Epetra_Map &amp;domain_map, const Epetra_Map &amp;range_map, bool callFillComplete=true, Epetra_CombineMode combineMode=Add, bool save_off_and_reuse_map_exporter=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>nonlocalRows</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aca496381cfbbe0ad261175d4779d0164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; long long &gt; &amp;</type>
      <name>nonlocalRows</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ad8f93e3b68418e15434b320863bfe3b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
      <name>nonlocalCols</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a9bf1fc3a23f9a6fe175d0ab8dfecb753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; std::vector&lt; long long &gt; &gt; &amp;</type>
      <name>nonlocalCols</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ac70f7258bfb441528fc77061de796b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>myFirstRow_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a5d44f874bafafd381f96adfe4a2d6b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myNumRows_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a4af909e8348e4141da72a90463a5837a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ignoreNonLocalEntries_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ad10dc799c8f15a0067f68f7fa581cacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>nonlocalRows_int_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aeffa8ea78671ab99f5ef1aff0b688a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>nonlocalCols_int_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a9b43f6daa1567e18744b55a69cb90985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; long long &gt;</type>
      <name>nonlocalRows_LL_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>af42208544a2383fc9a95d3e4bf308060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; long long &gt; &gt;</type>
      <name>nonlocalCols_LL_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a43ea998271c80fe12ad2d4ee5121251a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>nonlocalCoefs_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>aa1dfd73c8300952a255b6029c2ff09af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>workData_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a70962d4f7c67cd78f894dfa43357d28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const double * &gt;</type>
      <name>workData2d_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>acc2e45fb2e9d0ecbd5440ee7a4b46207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>workDataLength_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a142eed9736fdc4a079c15c5e901447db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useNonlocalMatrix_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a9838a7040e60d4d734a66f02b1ac0110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>nonlocalMatrix_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a05de59f2be1319489026d624dbcb72ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>sourceMap_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a07f2ea30e972ccbf36ae812cbac67b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>colMap_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>afa69ceb809d5a43f96cdab14f2087061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Export *</type>
      <name>exporter_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>ac44ad8d34e5d17bc8f4166fb5dead7db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>tempMat_</name>
      <anchorfile>classEpetra__FECrsMatrix.html</anchorfile>
      <anchor>a781960ada1425486ece3ca9b0a6dfd74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_FEVbrMatrix</name>
    <filename>classEpetra__FEVbrMatrix.html</filename>
    <base>Epetra_VbrMatrix</base>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a66c5ed945d3b8e2d0f8e616678103be3</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int *NumBlockEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>ae56e9544f36fff25a82dc9955217ce7b</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int NumBlockEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>aa0cf1c602f6c4e96e2bdb5b5da079913</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int *NumBlockEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a6561669e0dfeb89dd4154574316a09f1</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int NumBlockEntriesPerRow, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>aab6fa3b3ac3105ac1c73e65431bde030</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_CrsGraph &amp;Graph, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>aec8b7f74e88598c890e76dca43add57e</anchor>
      <arglist>(const Epetra_FEVbrMatrix &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_FEVbrMatrix</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a98be38c50ddad19791bbef6ee061a5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ignoreNonLocalEntries_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a91aceb497c686353ce1a0aa9d22ecb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numNonlocalBlockRows_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a30ea501a08025159e595caa04bcc4703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>nonlocalBlockRows_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a2d5b291bff642c18c27426c3948dfa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>nonlocalBlockRowLengths_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a672421fa8fa5866107896e97e1752be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>nonlocalBlockRowAllocLengths_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>ad370564e021ec4e25daf61511c62d967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>nonlocalBlockCols_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>aacfd57a77f371e2a5789e949a7d60f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix ***</type>
      <name>nonlocalCoefs_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>ad7e92194fb16464b8b87a58795fb9c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curRowOffset_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a65e2b8aea8bfd798e79a02ff6e34cbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curColOffset_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a0038b15a853f840c3f27d2323102e1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curNumCols_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>ab8a0f91d4e09c6f1ea91fc4ef252d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>curCols_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a790becb46fb800eb8037a2dea14b2960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curMode_</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a761e132f4c545ccd7834372a1b2d3be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Epetra_FEVbrMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a227a7e2157473c90ae54b2ed23e9ee85</anchor>
      <arglist>(const Epetra_FEVbrMatrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutScalar</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>aac3489fc7e650e716616fab91eb289de</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginInsertGlobalValues</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a02a06f1b1116abe9c0d3ec16baae8068</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a47c69fdbb0fb93380c882ee84409646f</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginSumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a5071e972869f3c7d8f56fe479a169262</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubmitBlockEntry</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>acb266d5fb43e416864afb58245833189</anchor>
      <arglist>(double *Values, int LDA, int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndSubmitEntries</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a9cad6522a2f735757d7a9d81b2bc8e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a06ed878912ca6bc15839be7255f02bf3</anchor>
      <arglist>(bool callFillComplete=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>SetupForNonlocalSubmits</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a72d7239538fdfca7269d31df00226384</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices, bool IndicesAreLocal, Epetra_CombineMode SubmitMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InputNonlocalBlockEntry</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>a92d9345485b519da9f52e1f0858d63d9</anchor>
      <arglist>(double *Values, int LDA, int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InsertNonlocalRow</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>abb422c4c27c0b89a5f37775070e962eb</anchor>
      <arglist>(int row, int offset, int numCols)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyNonlocalData</name>
      <anchorfile>classEpetra__FEVbrMatrix.html</anchorfile>
      <anchor>acafbd8d429d938db8a9451961c3629b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_FEVector</name>
    <filename>classEpetra__FEVector.html</filename>
    <base>Epetra_MultiVector</base>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVector</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a430d98d9d79a35b193f41848a7934aaf</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int numVectors=1, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVector</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>acdc0233cefc4f89b8c8cfaa6c0b3dfde</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, double *A, int MyLDA, int NumVectors, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVector</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a4aa2d434353381cbcb40e4b7a1047bfd</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, double **ArrayOfPointers, int NumVectors, bool ignoreNonLocalEntries=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_FEVector</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ad784455e512a7b2e6aa4ba632da69bfa</anchor>
      <arglist>(const Epetra_FEVector &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_FEVector</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>aadfb71ddeb095112f081ed709e34cd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a016762f3f2b6df2ad24b976ae8bab5c5</anchor>
      <arglist>(int numIDs, const int *GIDs, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>af004d15daf5aa682199d0d832910853e</anchor>
      <arglist>(int numIDs, const long long *GIDs, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a0ad371571db770be98462513d1c396ae</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;GIDs, const Epetra_SerialDenseVector &amp;values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a075763a8104ad38b91ff0b74d904a7c9</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;GIDs, const Epetra_SerialDenseVector &amp;values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae99d0d562ff06192a136c74e6b945f8b</anchor>
      <arglist>(int numIDs, const int *GIDs, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae97543ab73c7972b7364f5d660a3a32f</anchor>
      <arglist>(int numIDs, const long long *GIDs, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a8b98869fa47c61106bfe02700f1f3e02</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;GIDs, const Epetra_SerialDenseVector &amp;values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a461fd51007c6981bfecb1a8c740fb17d</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;GIDs, const Epetra_SerialDenseVector &amp;values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ab0be457a5250021dba6b2c8317c6665a</anchor>
      <arglist>(int numIDs, const int *GIDs, const int *numValuesPerID, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>acbae4f6046ef9b64c96c132a57dcccdd</anchor>
      <arglist>(int numIDs, const long long *GIDs, const int *numValuesPerID, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a82dd1042049aad86598381587427429f</anchor>
      <arglist>(int numIDs, const int *GIDs, const int *numValuesPerID, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a3c91ec9e37d6848462be035dc789eee4</anchor>
      <arglist>(int numIDs, const long long *GIDs, const int *numValuesPerID, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ad5e40a9139dff9a45cccd6820dc35d1b</anchor>
      <arglist>(Epetra_CombineMode mode=Add, bool reuse_map_and_exporter=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreNonLocalEntries</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a7f7e67e016f83bba16b841bb26558b01</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_FEVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>abb2ce59979da18d9e366e9580e5315c9</anchor>
      <arglist>(const Epetra_FEVector &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>inputValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>afcc0ccf611b4077cd9eabcb8210c1826</anchor>
      <arglist>(int numIDs, const int_type *GIDs, const double *values, bool suminto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>inputValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae2efe877039e00d933ffd81f3bb60dd7</anchor>
      <arglist>(int numIDs, const int_type *GIDs, const int *numValuesPerID, const double *values, bool suminto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>inputNonlocalValue</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>add3055b6a5f1f9c1e94a454d4d09b464</anchor>
      <arglist>(int_type GID, double value, bool suminto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>inputNonlocalValues</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a358bb638c123f65b41d5448dc4831cf7</anchor>
      <arglist>(int_type GID, int numValues, const double *values, bool suminto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createNonlocalMapAndExporter</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae25b2fa2f792b0ca04f0aa803e5e345d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroyNonlocalMapAndExporter</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a66f42d41c29b7c24805d714d2b9f5936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>zeroNonlocalData</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>afa44fbb1169b3943e27cd310fdb22b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroyNonlocalData</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a1ed4839a75458a5909168c6e199bf98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int_type &gt; &amp;</type>
      <name>nonlocalIDs</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae2d99ed81dce69f078163db5ad2617b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>nonlocalIDs</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a295df3520fa2cd8bd0bbbee7d3b82a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; long long &gt; &amp;</type>
      <name>nonlocalIDs</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a9435fb8cd3dae79dae4437dc0fbb3a6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>myFirstID_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a6955debbf37280612c1ff09855451dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNumIDs_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ad6ad1b927005746a2274e45b688c767d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>nonlocalIDs_int_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>af007397e4f7e9f182248f6d099a3ade2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; long long &gt;</type>
      <name>nonlocalIDs_LL_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>acc2a39078b8001c00941425d58ff3d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>nonlocalElementSize_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a35db434c1cc90d614f337053cd70ed9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>nonlocalCoefs_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a67229f2d16b10d09041e92b1bb05ab91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_BlockMap *</type>
      <name>nonlocalMap_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a09622538a11a240cd2bbbbf05b30af17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Export *</type>
      <name>exporter_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a8823568e088de0c5b45f885b12d2d07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>nonlocalVector_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>a40e207f688d77c0883e2fd86ee260501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ignoreNonLocalEntries_</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>adeb24456f65ba7542bfaf64e25cac6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GlobalAssemble</name>
      <anchorfile>classEpetra__FEVector.html</anchorfile>
      <anchor>ae7604904ee1d16c461d64e6076a17ddb</anchor>
      <arglist>(Epetra_CombineMode mode, bool reuse_map_and_exporter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Flops</name>
    <filename>classEpetra__Flops.html</filename>
    <member kind="function">
      <type></type>
      <name>Epetra_Flops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a657a9d73ed341ac694a61d6ea04f47ad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Flops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a892fbb0ce17159fde0452f2f4de33ffc</anchor>
      <arglist>(const Epetra_Flops &amp;Flops_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Flops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a30c9f24713cf0e17ea6cbc48e66c1562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a02dca42f2f4b211a67c32be7534f7777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Flops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a8117d4e7b19cfc64933754b6004b6294</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Flops &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a95f38c3adac3d10222a88a1ef9148e3e</anchor>
      <arglist>(const Epetra_Flops &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a56534eb92d40a30511fa598aff1edf33</anchor>
      <arglist>(int Flops_in) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a60b186a5e6fc21706ef1324a7dbf4b1f</anchor>
      <arglist>(long int Flops_in) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>aa2f004b2946f0b66eaba01b450d5fd4a</anchor>
      <arglist>(long long int Flops_in) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a7006f627e2ffeff075fcef0a542298c7</anchor>
      <arglist>(double Flops_in) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateFlops</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a3e8e704d2026c6d3539cf178f1f3ebff</anchor>
      <arglist>(float Flops_in) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Flops_</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>af7ac9d705a250cc3adf14d0663f6d630</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Epetra_CompObject</name>
      <anchorfile>classEpetra__Flops.html</anchorfile>
      <anchor>a68fae5b7ec2c3adaa260b819772c5563</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeSerialDenseVector</name>
    <filename>classEpetra__GIDTypeSerialDenseVector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeSerialDenseVector&lt; int &gt;</name>
    <filename>classEpetra__GIDTypeSerialDenseVector_3_01int_01_4.html</filename>
    <member kind="typedef">
      <type>Epetra_IntSerialDenseVector</type>
      <name>impl</name>
      <anchorfile>classEpetra__GIDTypeSerialDenseVector_3_01int_01_4.html</anchorfile>
      <anchor>a48598d8a5ef6538a8357845b317f891c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeSerialDenseVector&lt; long long &gt;</name>
    <filename>classEpetra__GIDTypeSerialDenseVector_3_01long_01long_01_4.html</filename>
    <member kind="typedef">
      <type>Epetra_LongLongSerialDenseVector</type>
      <name>impl</name>
      <anchorfile>classEpetra__GIDTypeSerialDenseVector_3_01long_01long_01_4.html</anchorfile>
      <anchor>acfb6945c19f2850c81760cb768673a5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeVector</name>
    <filename>classEpetra__GIDTypeVector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeVector&lt; int &gt;</name>
    <filename>classEpetra__GIDTypeVector_3_01int_01_4.html</filename>
    <member kind="typedef">
      <type>Epetra_IntVector</type>
      <name>impl</name>
      <anchorfile>classEpetra__GIDTypeVector_3_01int_01_4.html</anchorfile>
      <anchor>a0f227c310668203c2fbb51c79a092358</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_GIDTypeVector&lt; long long &gt;</name>
    <filename>classEpetra__GIDTypeVector_3_01long_01long_01_4.html</filename>
    <member kind="typedef">
      <type>Epetra_LongLongVector</type>
      <name>impl</name>
      <anchorfile>classEpetra__GIDTypeVector_3_01long_01long_01_4.html</anchorfile>
      <anchor>aafc1a9f8f282ffb9ded59c00a904d1c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_HashTable</name>
    <filename>classEpetra__HashTable.html</filename>
    <templarg>value_type</templarg>
    <base>Epetra_Object</base>
    <class kind="struct">Epetra_HashTable::Node</class>
    <member kind="function">
      <type></type>
      <name>Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a92e87147d11a7d21e816d9411edaff96</anchor>
      <arglist>(const int size, const unsigned int seed=(2654435761U))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>aaee2e69e296b418f5d0c1e3c770ca323</anchor>
      <arglist>(const Epetra_HashTable &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a012325d9b3424fb1ccd920d4f0fb3679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a484866f6a057e9450b4afae6f2c95265</anchor>
      <arglist>(const long long key, const value_type value)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>Get</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>af35fc6a42d8bbacc99273e6a0ac62f0f</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Func</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>ae760e5593c1f34016ac24a54e86f9518</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_HashTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a06eafa87d27d02c2e43bda04999ac76a</anchor>
      <arglist>(const Epetra_HashTable &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node **</type>
      <name>Container_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a903ec8639e7e7c5bf0f9212ea3120bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>Size_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a80d4fa147ad457116f72890ae49fae22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>Seed_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a0db4fd91fe6e47c8930d7e40a5ab143b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_HashTable&lt; int &gt;</name>
    <filename>classEpetra__HashTable.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type></type>
      <name>Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a92e87147d11a7d21e816d9411edaff96</anchor>
      <arglist>(const int size, const unsigned int seed=(2654435761U))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>aaee2e69e296b418f5d0c1e3c770ca323</anchor>
      <arglist>(const Epetra_HashTable &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Epetra_HashTable</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a012325d9b3424fb1ccd920d4f0fb3679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a484866f6a057e9450b4afae6f2c95265</anchor>
      <arglist>(const long long key, const int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Get</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>af35fc6a42d8bbacc99273e6a0ac62f0f</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Func</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>ae760e5593c1f34016ac24a54e86f9518</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_HashTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a06eafa87d27d02c2e43bda04999ac76a</anchor>
      <arglist>(const Epetra_HashTable &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node **</type>
      <name>Container_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a903ec8639e7e7c5bf0f9212ea3120bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>Size_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a80d4fa147ad457116f72890ae49fae22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>Seed_</name>
      <anchorfile>classEpetra__HashTable.html</anchorfile>
      <anchor>a0db4fd91fe6e47c8930d7e40a5ab143b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Import</name>
    <filename>classEpetra__Import.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type></type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a96832cb39f805b19bee6e06ab9ad99e2</anchor>
      <arglist>(const Epetra_BlockMap &amp;TargetMap, const Epetra_BlockMap &amp;SourceMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a17a8df71273a4ad5b83e62cbad6a90a4</anchor>
      <arglist>(const Epetra_BlockMap &amp;TargetMap, const Epetra_BlockMap &amp;SourceMap, int NumRemotePIDs, const int *RemotePIDs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>acf8903643658c9640fc50c183d8cae34</anchor>
      <arglist>(const Epetra_BlockMap &amp;TargetMap, const Epetra_BlockMap &amp;SourceMap, int NumRemotePIDs, const int *RemotePIDs, const int &amp;NumExportIDs, const int *ExportLIDs, const int *ExportPIDs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a1a219b10f139a224dea9deb64d26b9ba</anchor>
      <arglist>(const Epetra_Import &amp;Importer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a4f24f1bae77d3b722d6fca165ad360be</anchor>
      <arglist>(const Epetra_Export &amp;Exporter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Import</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>adb12bbe55af6d682411f1cc4fb1c43b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSameIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a6262d4cc50daf5cbaee36044f44fd8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumPermuteIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a987f81eed9afd38e2c850d4d67770a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>PermuteFromLIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a40a8f11f2113ca4947b27228ccf983aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>PermuteToLIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a2f99f0e1cba5a9632d4cce88eaef69d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRemoteIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a8ca25e48730097178d21df556504384a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>RemoteLIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a928dee3909e6118252e5fd096bb34731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumExportIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a302ef65fe6e1ec65b988ccf827da7476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ExportLIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>ab5cb62d6de501f4c8ad2daa18293d229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ExportPIDs</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>aba840fcf6495bf1940b6bb78d2b327c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSend</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a83d95e8d542af8ef98c7bc41e6669697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRecv</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a968692bab4d7c141535ba619e51bd95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>SourceMap</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a67ea6c064956d436f2c694647e55e41d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>TargetMap</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a0711c213e110d6dadf0288e341a93324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor &amp;</type>
      <name>Distributor</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>ab0d0092c410c875337bcfc966b3b966e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_Import &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a984f8d329e3ee87dda2f78c728941fde</anchor>
      <arglist>(const Epetra_Import &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Construct</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a76cf120f1e898cc0386363bc67c710a2</anchor>
      <arglist>(const Epetra_BlockMap &amp;targetMap, const Epetra_BlockMap &amp;sourceMap, int NumRemotePIDs=-1, const int *UserRemotePIDs=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Construct_Expert</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a7e68b75c08b24c7e29df4632e3bb4415</anchor>
      <arglist>(const Epetra_BlockMap &amp;TargetMap, const Epetra_BlockMap &amp;SourceMap, int NumRemotePIDs, const int *RemotePIDs, const int &amp;NumExportIDs, const int *ExportLIDs, const int *ExportPIDs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>TargetMap_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a7088832275b91fad638be40d2f6239ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_BlockMap</type>
      <name>SourceMap_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a239810a379498ced853e11157e3f99bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSameIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a90a3821a7903f85c620197bc61144181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPermuteIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a6e367b752607a079a7ff63e7a0635fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>PermuteToLIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a7f7229d0ef79be55bec9cfc51ed4bf8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>PermuteFromLIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a6e3ad755ce0646e65f1de0e16453b2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRemoteIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a0372cb74b9215a9c031f1e60362ae736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>RemoteLIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a1d856f30f2f648707bd10498c83c94fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumExportIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a14ca2b34964f9a1aa49650e388db0eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ExportLIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>af7ca9b2dedfdc603a86699b79c5318d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ExportPIDs_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>ad3c6cbddbc60fae386f2fdf1fc7a4c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSend_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>af90d138beac6cbe95f23bf80a7c6a94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRecv_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>ad106b08adb3dd23a9f8598594d5d9c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Distributor *</type>
      <name>Distor_</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>ac3fa93dc1c14d74441d7490fcd9007b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_Export</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>a42787b84602f0e3615ba7b33d0546d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Epetra_BlockMap</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>af6b2f2a23a1ca2da1695f92fc8a26119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__Import.html</anchorfile>
      <anchor>acbafd440db9314046aecb7801f8c517f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_IntSerialDenseMatrix</name>
    <filename>classEpetra__IntSerialDenseMatrix.html</filename>
    <base>Epetra_Object</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyMat</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a71d26b3325f5dbf2fac8a94d6067c066</anchor>
      <arglist>(int *Source, int Source_LDA, int NumRows, int NumCols, int *Target, int Target_LDA)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ae2b8209355b22d30a6fbb78be45a84d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ae2652503c065fefdb3c6eae2beee4f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>A_Copied_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a8bde6f07f5d3cd0a58a3b1b01516c43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>M_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a5175f3949667ebd857a9903e394a09c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>aa5ffb3bab847d698820b2ebd7eb63428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ab04febb040b00754a08fc1c90b235556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>A_</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a01d3566298a32eb01abc5a2d6b36fafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseMatrix</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a1016207c3d343f3a3a3362474b86c153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseMatrix</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a5f93b9c08e9cb2c8028852a7c7bfaf9d</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseMatrix</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ac3d3bd956bc682ca5cbb81625ea9d860</anchor>
      <arglist>(Epetra_DataAccess CV, int *A, int LDA, int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseMatrix</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a34c373a0bb1741a2e76609f418d86633</anchor>
      <arglist>(const Epetra_IntSerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_IntSerialDenseMatrix</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ad3d0f075ea3f798f213378a14b8c235f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Shape</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a0351dbd71b0c581b3b8ba01a5b6181ad</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reshape</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a698463711b648d02e5abea3d2f6cb899</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>OneNorm</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>aca96136c8838250cce685eb666ffe381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InfNorm</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>abe3ac1cd9f73e6b24b76183c9d8538ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_IntSerialDenseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ac2f0d3485c6d2e4f1135ce609680828e</anchor>
      <arglist>(const Epetra_IntSerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>abde4796c2ca1a7fb92387c399c9895ea</anchor>
      <arglist>(const Epetra_IntSerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a763b63269d8e7882ecd87ecef8f88a15</anchor>
      <arglist>(const Epetra_IntSerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>af752f376eb7f0c449f3da2f5c43cfae8</anchor>
      <arglist>(int RowIndex, int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a980f5a3336996ec34db506a9b7cce1a5</anchor>
      <arglist>(int RowIndex, int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a710056cbcb8d7fa7d1ec98502715aaab</anchor>
      <arglist>(int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a7f27ab203520310bb3efecc1fa007c25</anchor>
      <arglist>(int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>af258e9f58fa635b7ead9f057ad97e33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>M</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a54aebc2da78d31ee5233290f1fb54eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>ad0efb0a5c6b772a11a80b24426d27c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>A</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>acad8259fa557c8aa567dbccd33508173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>A</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>aa17fe69f4e7a7df00a4d8cf1987aa9e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a08f7d49d07f7eaa4b8c61b9420e57702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a548c1d8d8dd60ee1d34a0857b8b62e32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a7a01da5f178ab006d5d006d913194806</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MakeViewOf</name>
      <anchorfile>classEpetra__IntSerialDenseMatrix.html</anchorfile>
      <anchor>a1312c6ef9d15a646dd53689d4345181c</anchor>
      <arglist>(const Epetra_IntSerialDenseMatrix &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_IntSerialDenseVector</name>
    <filename>classEpetra__IntSerialDenseVector.html</filename>
    <base>Epetra_IntSerialDenseMatrix</base>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseVector</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>ad8ba3351c230e393283b7156e86a6153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseVector</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a87e53baa3bc3ee202d8c639f9cecfc45</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseVector</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a173376c08ba013c0f4779062516d9ff8</anchor>
      <arglist>(Epetra_DataAccess CV_in, int *Values_in, int Length_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntSerialDenseVector</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>ad24b30d927576b666e36f9e09b596d51</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a4e37ecf403d980714c7dd2648c34e7c5</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Resize</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a4439b733f82c98ad6a3a0e52aec4496b</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_IntSerialDenseVector</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a3fb2e015f850c7da4c6ed59b7e6adae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a61ad52c76ee02e6dfbd403ebadc9cd65</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a73293db928e547f6aadcf7793fe1238d</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a06853321ab372495d1e3dfad3d54f69a</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a3e8e910b903bca196435e50cc928af7a</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a710d7fa16ebdc6990303b438499e6227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Length</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a2c0ab350a9d939fd86bb9276d13136b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>Values</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>ab4965a5b3dd1157e1772fba304b4e571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>Values</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a496cb3172ad254a298313f47656ef599</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a8d9dce47de24679d783a4625022a3634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_IntSerialDenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>afb661be7e8a653bc234f765ecb5f5bd3</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>a9eeb464ce2d4ffebde0162cb67e0d341</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MakeViewOf</name>
      <anchorfile>classEpetra__IntSerialDenseVector.html</anchorfile>
      <anchor>aebbdad83027fb14a58a196ba99a31b8d</anchor>
      <arglist>(const Epetra_IntSerialDenseVector &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_IntVector</name>
    <filename>classEpetra__IntVector.html</filename>
    <base>Epetra_DistObject</base>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForCopy</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>af6fc757fa6612941b1da6a48bb092f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoCopy</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>ab22014f495b6e463c5239bcd1f1c544c</anchor>
      <arglist>(int *V)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForView</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>af772f291c39df48c79c5d45dd71b4a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoView</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>afae45dd54a48c0023f774fea1abfdeb9</anchor>
      <arglist>(int *V)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a19d67ae9547eda05aac057bf85079bb9</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a7ace051620eddefdbb004a2cbe9e4fc4</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a74c60af7ab14f5347467944db83ef07c</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>aeacf9d41472eeb8d888a8e7f974cee70</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>Values_</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a20474712b593d9b67c0797e33f9e3010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UserAllocated_</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>ae7aff7df27804e827e2d69a36e8d79c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>afbab64004a4c2609d49c0fe52346acbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntVector</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a281efa283fe8d5c3f321257bad485bf4</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, bool zeroOut=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntVector</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a356c1affc45495bf11d233e51156b30e</anchor>
      <arglist>(const Epetra_IntVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_IntVector</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>ae828c53149adf72596370f7299b58946</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, int *V)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_IntVector</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a730b01545959899f53829c293bcfd53f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutValue</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a4648fec1840995b5b1867cc2eac21a5f</anchor>
      <arglist>(int Value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCopy</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a7419f6f9f2c39f14a6cdcf89ac696db4</anchor>
      <arglist>(int *V) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractView</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>af9e6bc1bd4d0ae4b5c574a4871aadb9d</anchor>
      <arglist>(int **V) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxValue</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a41f13f71e0ea81b01777afbe9e04d384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinValue</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a73e9e80ac2fb9568d583b716639ea36e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_IntVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a7a4f76fba17b61adc2bcf5ca39095f76</anchor>
      <arglist>(const Epetra_IntVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a157588848efda67452cfab2e279c342b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a2d1e3da8f521c91ac680766e2a3f9bbe</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>Values</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>aa57c72e0f424a327c6874455caaf9ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyLength</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a6bf486f93cbe109f1bdf9456ebc2a563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalLength</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>ab3817b6ccd55aac9b56054702d49ba6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GlobalLength64</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>a7efc074276513e7d87bef327b8a6714a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__IntVector.html</anchorfile>
      <anchor>ae5d45a05a222ccd7bb3efc365b4a7b9a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_InvOperator</name>
    <filename>classEpetra__InvOperator.html</filename>
    <base virtualness="virtual">Epetra_Operator</base>
    <member kind="variable" protection="protected">
      <type>Epetra_Operator *</type>
      <name>operator_</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>ae6c445a992962b4b68244fa09aab62db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>ac75a4e546887d6b43de8f14b150ad848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_InvOperator</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>ae0dcc6c7f2e44e6b80ab7bea5a98797c</anchor>
      <arglist>(Epetra_Operator *operatorIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_InvOperator</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a652b3943ed8d117e12b6366967413326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a8e9095760c5be3bf4e4c7c8d4662545b</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a151c45ae1773eec2c3fdf221f497892f</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a8254ea37b1d0da1ebe149bc241afdc1a</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a0757b027fb35a5578c74a9131bf90873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>aadce1fc02a1a071a2500068853cd02cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Operator *</type>
      <name>Operator</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a14e91854c6ed63c1ee890900b9e912d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>acacb48ba4e40823d2f37dd9312de6c7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a75716d7745056461e82fc6ec85b0cafb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a457f7ab6285fd497a991f103adcf4977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>ab0a6a46c35a455c584b1c9b637aca0b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__InvOperator.html</anchorfile>
      <anchor>a6e3eb1713eb9b895340a4c5d8744da43</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_JadMatrix</name>
    <filename>classEpetra__JadMatrix.html</filename>
    <base>Epetra_BasicRowMatrix</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMV</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a4f82cb2ae94439e9a822e032fffed1df</anchor>
      <arglist>(bool TransA, double *x, double *y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMM</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>ab6c2fc5222bf24da3f94a95f378e6633</anchor>
      <arglist>(bool TransA, double **X, int LDX, double **Y, int LDY, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMM3RHS</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>ade53da69324da7a8110032f1a42e4abc</anchor>
      <arglist>(bool TransA, double **X, int LDX, double **Y, int LDY, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GeneralMM2RHS</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a9b2ba014eefcdb5dccecb477f80b9dd7</anchor>
      <arglist>(bool TransA, double *x, int ldx, double *y, int ldy) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>aa0c85960878611c42c35574da3106c3c</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseVector</type>
      <name>Values_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>ac7870ffa7855e09e71394ecc6202223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_IntSerialDenseVector</type>
      <name>Indices_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>ac2573607c5bb259efef80ab1bc302f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_IntSerialDenseVector</type>
      <name>IndexOffset_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a218510140ca5ff9cff1fae9a092597cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_IntSerialDenseVector</type>
      <name>Profile_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a53266bf33dd06cf35a0f933d149320c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_IntSerialDenseVector</type>
      <name>RowPerm_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a7f54e21082be0755c281bf27441d099c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_IntSerialDenseVector</type>
      <name>InvRowPerm_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a4362aca54c104bbc4d156f88efdfdef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumJaggedDiagonals_</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a0ba2cf2a9b9d7b13669e90149b7a240f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_JadMatrix</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a73da7059be815e0ea4905808a36d5ef2</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_JadMatrix</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a53f3ca7e5f8712d0d1d2ac3b07b902d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateValues</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a2e5422f7bd78e05a9ac0f250ec8f8d20</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix, bool CheckStructure=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a63ca67db4915bf2cdd34ab6f81343200</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>aaf52725f7cafb42baa1e2f21b2e9624c</anchor>
      <arglist>(int CurEntry, double *&amp;Value, int &amp;RowIndex, int &amp;ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a97e7a63c934d0a58a65a6b682973bf80</anchor>
      <arglist>(int CurEntry, double const *&amp;Value, int &amp;RowIndex, int &amp;ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>ae22c7b825a98bfe5dead2939ac887968</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a98c4be54e62b092ebbb277df3b3415a8</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__JadMatrix.html</anchorfile>
      <anchor>a3d215c2618f5eae30e8d5e037a777614</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LAPACK</name>
    <filename>classEpetra__LAPACK.html</filename>
    <member kind="function">
      <type></type>
      <name>Epetra_LAPACK</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a56fa1fb6d6a77048a6d500c767dba808</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LAPACK</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a334ef8d72b1b4875b0b8660904b85eba</anchor>
      <arglist>(const Epetra_LAPACK &amp;LAPACK)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LAPACK</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aa688eb15f982b7299f283611eb8764c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>acedef372b0d075caec7033f5c1139003</anchor>
      <arglist>(const char UPLO, const int N, float *A, const int LDA, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad23155d88532277aa046ab462ba86dce</anchor>
      <arglist>(const char UPLO, const int N, double *A, const int LDA, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a5576d3edfe8a8ee87cdae0e9f59f1ceb</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, const float *A, const int LDA, float *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a7f1cbad31934898f6b2e835e8313edf6</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, const double *A, const int LDA, double *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRI</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a81741b9a0917e4db3cc801a8a8c71256</anchor>
      <arglist>(const char UPLO, const int N, float *A, const int LDA, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POTRI</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ae15e42e2207468cf07485c3a67fe5de0</anchor>
      <arglist>(const char UPLO, const int N, double *A, const int LDA, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POCON</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ac04e42b11711bd9959cf3b944ee15fb1</anchor>
      <arglist>(const char UPLO, const int N, const float *A, const int LDA, const float ANORM, float *RCOND, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POCON</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a740ab4a2229f4355037ce520ca68e7eb</anchor>
      <arglist>(const char UPLO, const int N, const double *A, const int LDA, const double ANORM, double *RCOND, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POSV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a421a04b7172138cd056df724986d776d</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, float *A, const int LDA, float *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POSV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af4cc0fef1282c16c930cab10565ff6ae</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, double *A, const int LDA, double *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POEQU</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aa7b8e050e9f3b37e06442e9ecbbcbac4</anchor>
      <arglist>(const int N, const float *A, const int LDA, float *S, float *SCOND, float *AMAX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POEQU</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a966dbe906cce8f744e92a56b6e44c3b1</anchor>
      <arglist>(const int N, const double *A, const int LDA, double *S, double *SCOND, double *AMAX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PORFS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a111b0a46ba62b2ec29ab3fb82cd0794f</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, const float *A, const int LDA, const float *AF, const int LDAF, const float *B, const int LDB, float *X, const int LDX, float *FERR, float *BERR, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PORFS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a6aa4b9b84e8d0e3f3f0decb133d02631</anchor>
      <arglist>(const char UPLO, const int N, const int NRHS, const double *A, const int LDA, const double *AF, const int LDAF, const double *B, const int LDB, double *X, const int LDX, double *FERR, double *BERR, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POSVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad9b2b5e6a7ea60ff33154f0159626c11</anchor>
      <arglist>(const char FACT, const char UPLO, const int N, const int NRHS, float *A, const int LDA, float *AF, const int LDAF, const char EQUED, float *S, float *B, const int LDB, float *X, const int LDX, float *RCOND, float *FERR, float *BERR, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>POSVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aadbcc3512a9a0d7ae3ed14272fb2a4d3</anchor>
      <arglist>(const char FACT, const char UPLO, const int N, const int NRHS, double *A, const int LDA, double *AF, const int LDAF, const char EQUED, double *S, double *B, const int LDB, double *X, const int LDX, double *RCOND, double *FERR, double *BERR, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GELS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ab9177e5248a4d3e9c95f5e0f28814564</anchor>
      <arglist>(const char TRANS, const int M, const int N, const int NRHS, double *A, const int LDA, double *B, const int LDB, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad19a47f575f0e3e943d4e564730fa7dd</anchor>
      <arglist>(const int M, const int N, float *A, const int LDA, int *IPIV, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a80cbb73c61e1bb482de436264d4a342c</anchor>
      <arglist>(const int M, const int N, double *A, const int LDA, int *IPIV, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEQRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aec9be874b2d64ac93ca536286261f5a9</anchor>
      <arglist>(const int M, const int N, float *A, const int LDA, float *TAU, float *WORK, const int lwork, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEQRF</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>afc0353aa2f63274cb5441b55900ad151</anchor>
      <arglist>(const int M, const int N, double *A, const int LDA, double *TAU, double *WORK, const int lwork, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af781e192d9a18644efcff432d3e6d5ad</anchor>
      <arglist>(const char TRANS, const int N, const int NRHS, const float *A, const int LDA, const int *IPIV, float *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>acc62f1b7ab81e6516a0cfb226275760d</anchor>
      <arglist>(const char TRANS, const int N, const int NRHS, const double *A, const int LDA, const int *IPIV, double *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRI</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad81cfde4399d38e1336f812bca4afea4</anchor>
      <arglist>(const int N, float *A, const int LDA, int *IPIV, float *WORK, const int *LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GETRI</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ac06985617e0627464fb909e2736ae69f</anchor>
      <arglist>(const int N, double *A, const int LDA, int *IPIV, double *WORK, const int *LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GECON</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aa7aa972e28cb6be9e07bc37b49b94eec</anchor>
      <arglist>(const char NORM, const int N, const float *A, const int LDA, const float ANORM, float *RCOND, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GECON</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a852bd91d34e05dd91dd051aee160d08a</anchor>
      <arglist>(const char NORM, const int N, const double *A, const int LDA, const double ANORM, double *RCOND, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ac7eca20fbbcf10740e4c6d63799b89be</anchor>
      <arglist>(const int N, const int NRHS, float *A, const int LDA, int *IPIV, float *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aa7b0fea3dcadaf515714fc4593f5e4bf</anchor>
      <arglist>(const int N, const int NRHS, double *A, const int LDA, int *IPIV, double *X, const int LDX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEQU</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a6bdfe649f885435f0a181f0b7749c8d1</anchor>
      <arglist>(const int M, const int N, const float *A, const int LDA, float *R, float *C, float *ROWCND, float *COLCND, float *AMAX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEQU</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a3089b818468908506c5caba8255b5861</anchor>
      <arglist>(const int M, const int N, const double *A, const int LDA, double *R, double *C, double *ROWCND, double *COLCND, double *AMAX, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GERFS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aace469c08ea3cbec693f6156be423c19</anchor>
      <arglist>(const char TRANS, const int N, const int NRHS, const float *A, const int LDA, const float *AF, const int LDAF, const int *IPIV, const float *B, const int LDB, float *X, const int LDX, float *FERR, float *BERR, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GERFS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a2271ca5b3276aca16c6308335f5ff1ea</anchor>
      <arglist>(const char TRANS, const int N, const int NRHS, const double *A, const int LDA, const double *AF, const int LDAF, const int *IPIV, const double *B, const int LDB, double *X, const int LDX, double *FERR, double *BERR, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ac2350b56001b391339711b672f195fa3</anchor>
      <arglist>(const char FACT, const char TRANS, const int N, const int NRHS, float *A, const int LDA, float *AF, const int LDAF, int *IPIV, const char EQUED, float *R, float *C, float *B, const int LDB, float *X, const int LDX, float *RCOND, float *FERR, float *BERR, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a56a34eaa792bcb7881b38b2202e15d8e</anchor>
      <arglist>(const char FACT, const char TRANS, const int N, const int NRHS, double *A, const int LDA, double *AF, const int LDAF, int *IPIV, const char EQUED, double *R, double *C, double *B, const int LDB, double *X, const int LDX, double *RCOND, double *FERR, double *BERR, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEHRD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a9ebdeaae5da22746483d0fa92c2bfeee</anchor>
      <arglist>(const int N, const int ILO, const int IHI, float *A, const int LDA, float *TAU, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEHRD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af96b20d559b06b6aa539d99ce1f2c20e</anchor>
      <arglist>(const int N, const int ILO, const int IHI, double *A, const int LDA, double *TAU, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HSEQR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aaba8e3bf2c27dacc32155c91c8907a89</anchor>
      <arglist>(const char JOB, const char COMPZ, const int N, const int ILO, const int IHI, float *H, const int LDH, float *WR, float *WI, float *Z, const int LDZ, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HSEQR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aeebbbbc70fcf4e1f17929954be4125a2</anchor>
      <arglist>(const char JOB, const char COMPZ, const int N, const int ILO, const int IHI, double *H, const int LDH, double *WR, double *WI, double *Z, const int LDZ, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORGQR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ab71cf442a5aafd2dd7567e7975c4f786</anchor>
      <arglist>(const int M, const int N, const int K, float *A, const int LDA, float *TAU, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORGQR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a5bafb883b0b710df82ddaaaf7f7c5570</anchor>
      <arglist>(const int M, const int N, const int K, double *A, const int LDA, double *TAU, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORGHR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a92328c5a687f3640459ef42fc2a8a73f</anchor>
      <arglist>(const int N, const int ILO, const int IHI, float *A, const int LDA, float *TAU, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORGHR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a6d7f96d1172e0eb3a8de09ede2cae7dc</anchor>
      <arglist>(const int N, const int ILO, const int IHI, double *A, const int LDA, double *TAU, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORMHR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad4938c91a2554a16f72d2d643b2e25b4</anchor>
      <arglist>(const char SIDE, const char TRANS, const int M, const int N, const int ILO, const int IHI, const float *A, const int LDA, const float *TAU, float *C, const int LDC, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ORMHR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a9002d1b5af7e2abe8d8be13b7bf928df</anchor>
      <arglist>(const char SIDE, const char TRANS, const int M, const int N, const int ILO, const int IHI, const double *A, const int LDA, const double *TAU, double *C, const int LDC, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LARFT</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a71eb65bcc6b083a985fd70380a512176</anchor>
      <arglist>(const char DIRECT, const char STOREV, const int N, const int K, double *V, const int LDV, double *TAU, double *T, const int LDT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LARFT</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a27cb33b672e6876e90eb47afaaffbbfd</anchor>
      <arglist>(const char DIRECT, const char STOREV, const int N, const int K, float *V, const int LDV, float *TAU, float *T, const int LDT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TREVC</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a387ee14581b56346cbf4461047314992</anchor>
      <arglist>(const char SIDE, const char HOWMNY, int *SELECT, const int N, const float *T, const int LDT, float *VL, const int LDVL, float *VR, const int LDVR, const int MM, int *M, float *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TREVC</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad323e508f3fc17b655a68b4daba3eddd</anchor>
      <arglist>(const char SIDE, const char HOWMNY, int *SELECT, const int N, const double *T, const int LDT, double *VL, const int LDVL, double *VR, const int LDVR, const int MM, int *M, double *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TREXC</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ae10ee8dd2db1a166a0c34ca81b017774</anchor>
      <arglist>(const char COMPQ, const int N, float *T, const int LDT, float *Q, const int LDQ, int IFST, int ILST, float *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TREXC</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aaddbb1cc233539f4eceb4ecfbd0ebbc8</anchor>
      <arglist>(const char COMPQ, const int N, double *T, const int LDT, double *Q, const int LDQ, int IFST, int ILST, double *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a15080ad2b280fbaa3fafa13a64948748</anchor>
      <arglist>(const char JOBU, const char JOBVT, const int M, const int N, float *A, const int LDA, float *S, float *U, const int LDU, float *VT, const int LDVT, float *WORK, const int *LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a057c3b08085ff972bb4cc0b772031d72</anchor>
      <arglist>(const char JOBU, const char JOBVT, const int M, const int N, double *A, const int LDA, double *S, double *U, const int LDU, double *VT, const int LDVT, double *WORK, const int *LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGSVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a465a49d83721cdf0ef6acb6f067c433f</anchor>
      <arglist>(const char JOBU, const char JOBV, const char JOBQ, const int M, const int N, const int P, int *K, int *L, double *A, const int LDA, double *B, const int LDB, double *ALPHA, double *BETA, double *U, const int LDU, double *V, const int LDV, double *Q, const int LDQ, double *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGSVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a743482f0c30fe2f9c0a4239caaf3c1eb</anchor>
      <arglist>(const char JOBU, const char JOBV, const char JOBQ, const int M, const int N, const int P, int *K, int *L, float *A, const int LDA, float *B, const int LDB, float *ALPHA, float *BETA, float *U, const int LDU, float *V, const int LDV, float *Q, const int LDQ, float *WORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a1ef41b1ba2b7c46894cfa9ee591ecbf4</anchor>
      <arglist>(const char JOBVL, const char JOBVR, const int N, double *A, const int LDA, double *WR, double *WI, double *VL, const int LDVL, double *VR, const int LDVR, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a2e9add695eeed8f2b673ac2618601647</anchor>
      <arglist>(const char JOBVL, const char JOBVR, const int N, float *A, const int LDA, float *WR, float *WI, float *VL, const int LDVL, float *VR, const int LDVR, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SPEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aa4719e1df6efa541a24d1479ed5508de</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, double *AP, double *W, double *Z, int LDZ, double *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SPEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a7853356351b16d8ff3b286bdeb332d51</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, float *AP, float *W, float *Z, int LDZ, float *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SPGV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a5bff46531ee8ca8729fa273d910f3caa</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char UPLO, const int N, double *AP, double *BP, double *W, double *Z, const int LDZ, double *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SPGV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a1a629614636997d0c57c0414f00599e2</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char UPLO, const int N, float *AP, float *BP, float *W, float *Z, const int LDZ, float *WORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aeb3744713ff55ab29624e4d33768cb39</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, double *A, const int LDA, double *W, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>afebdde3339447f864ac59ac928268d81</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, float *A, const int LDA, float *W, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ab28962e4ffdde210d0dde7119e1c043c</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, double *A, const int LDA, double *W, double *WORK, const int LWORK, int *IWORK, const int LIWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>adef9b21eee77ad497a3a82182ac72e28</anchor>
      <arglist>(const char JOBZ, const char UPLO, const int N, float *A, const int LDA, float *W, float *WORK, const int LWORK, int *IWORK, const int LIWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad017824d2ee9f1694c8ce679fcb81be0</anchor>
      <arglist>(const char JOBZ, const char RANGE, const char UPLO, const int N, double *A, const int LDA, const double *VL, const double *VU, const int *IL, const int *IU, const double ABSTOL, int *M, double *W, double *Z, const int LDZ, double *WORK, const int LWORK, int *IWORK, int *IFAIL, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>abc73a226c9032c77e65189fa0673c758</anchor>
      <arglist>(const char JOBZ, const char RANGE, const char UPLO, const int N, float *A, const int LDA, const float *VL, const float *VU, const int *IL, const int *IU, const float ABSTOL, int *M, float *W, float *Z, const int LDZ, float *WORK, const int LWORK, int *IWORK, int *IFAIL, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYGV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a7b83a2378c4bd415255cf8c44e102328</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char UPLO, const int N, double *A, const int LDA, double *B, const int LDB, double *W, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYGV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a155534bdf5b4f966bc9447f317a6e062</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char UPLO, const int N, float *A, const int LDA, float *B, const int LDB, float *W, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYGVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a74635e9ecb7d4ee8895b9e3af28b96f9</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char RANGE, const char UPLO, const int N, double *A, const int LDA, double *B, const int LDB, const double *VL, const double *VU, const int *IL, const int *IU, const double ABSTOL, int *M, double *W, double *Z, const int LDZ, double *WORK, const int LWORK, int *IWORK, int *IFAIL, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYGVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad8082c1658d84e11ad3326c39188d232</anchor>
      <arglist>(const int ITYPE, const char JOBZ, const char RANGE, const char UPLO, const int N, float *A, const int LDA, float *B, const int LDB, const float *VL, const float *VU, const int *IL, const int *IU, const float ABSTOL, int *M, float *W, float *Z, const int LDZ, float *WORK, const int LWORK, int *IWORK, int *IFAIL, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>aeb01f6df12fdb6268e2e75afd200888c</anchor>
      <arglist>(const char JOBZ, const char RANGE, const char UPLO, const int N, double *A, const int LDA, const double *VL, const double *VU, const int *IL, const int *IU, const double ABSTOL, int *M, double *W, double *Z, const int LDZ, int *ISUPPZ, double *WORK, const int LWORK, int *IWORK, const int LIWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYEVR</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a17d0aca86e42717810a153c55c46e535</anchor>
      <arglist>(const char JOBZ, const char RANGE, const char UPLO, const int N, float *A, const int LDA, const float *VL, const float *VU, const int *IL, const int *IU, const float ABSTOL, int *M, float *W, float *Z, const int LDZ, int *ISUPPZ, float *WORK, const int LWORK, int *IWORK, const int LIWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a81ed1b3f53e7a6a95a618af2cfb44621</anchor>
      <arglist>(const char BALANC, const char JOBVL, const char JOBVR, const char SENSE, const int N, double *A, const int LDA, double *WR, double *WI, double *VL, const int LDVL, double *VR, const int LDVR, int *ILO, int *IHI, double *SCALE, double *ABNRM, double *RCONDE, double *RCONDV, double *WORK, const int LWORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEEVX</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a04711e4d1c53421b90fb03d655d25ec5</anchor>
      <arglist>(const char BALANC, const char JOBVL, const char JOBVR, const char SENSE, const int N, float *A, const int LDA, float *WR, float *WI, float *VL, const int LDVL, float *VR, const int LDVR, int *ILO, int *IHI, float *SCALE, float *ABNRM, float *RCONDE, float *RCONDV, float *WORK, const int LWORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESDD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ad3eb3993ad8ec3c69a93d66b83b6be44</anchor>
      <arglist>(const char JOBZ, const int M, const int N, double *A, const int LDA, double *S, double *U, const int LDU, double *VT, const int LDVT, double *WORK, const int LWORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GESDD</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af6e31056e0f04395d174d503f9dcd104</anchor>
      <arglist>(const char JOBZ, const int M, const int N, float *A, const int LDA, float *S, float *U, const int LDU, float *VT, const int LDVT, float *WORK, const int LWORK, int *IWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a964ee14f211432a446f9cbdea7afe010</anchor>
      <arglist>(const char JOBVL, const char JOBVR, const int N, double *A, const int LDA, double *B, const int LDB, double *ALPHAR, double *ALPHAI, double *BETA, double *VL, const int LDVL, double *VR, const int LDVR, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGEV</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af38e44b5683493fc0cea2488d196de2d</anchor>
      <arglist>(const char JOBVL, const char JOBVR, const int N, float *A, const int LDA, float *B, const int LDB, float *ALPHAR, float *ALPHAI, float *BETA, float *VL, const int LDVL, float *VR, const int LDVR, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGLSE</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a89fd1a245cd171e0a3c31488d5e7cfa6</anchor>
      <arglist>(const int M, const int N, const int P, double *A, const int LDA, double *B, const int LDB, double *C, double *D, double *X, double *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GGLSE</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>ac565161c76abe8a531c5b1254b39a3f6</anchor>
      <arglist>(const int M, const int N, const int P, float *A, const int LDA, float *B, const int LDB, float *C, float *D, float *X, float *WORK, const int LWORK, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LAMCH</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a80d05d9bbbfa7a2a6f041abc0954931a</anchor>
      <arglist>(const char CMACH, float &amp;T) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LAMCH</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>af273a0d57d90a30da43648d3569e0fff</anchor>
      <arglist>(const char CMACH, double &amp;T) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRTRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a581bcc4bb87a05c54b081ab1b732d819</anchor>
      <arglist>(const char UPLO, const char TRANS, const char DIAG, const int N, const int NRHS, const float *A, const int LDA, float *B, const int LDB, int *INFO) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRTRS</name>
      <anchorfile>classEpetra__LAPACK.html</anchorfile>
      <anchor>a7ecb1d2cfb450080ea141bb6176ef8fa</anchor>
      <arglist>(const char UPLO, const char TRANS, const char DIAG, const int N, const int NRHS, const double *A, const int LDA, double *B, const int LDB, int *INFO) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LinearProblem</name>
    <filename>classEpetra__LinearProblem.html</filename>
    <member kind="enumvalue">
      <name>easy</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1bafe938182cdd630c80611f09840008109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>moderate</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1bad50ce46626897ba03a74c6c54d3db290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hard</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1ba636b59f4600fabc0a4ec6c8acb546bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsure</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1ba783bb9a6a9c6cbc0a12c6deff4b8a4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_LinearProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a15d8ee065002629449d6d30f1bbada3e</anchor>
      <arglist>(const Epetra_LinearProblem &amp;Problem)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Operator *</type>
      <name>Operator_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a72d40a9bdc4cb2d100ee1387dac13469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_RowMatrix *</type>
      <name>A_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a5792ea6e5ef2006e9170477b9b74544a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MultiVector *</type>
      <name>X_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>abe5d1a97bd7a62a486cff30010a651fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MultiVector *</type>
      <name>B_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ad25ec4229ebf55bf9881ab525bb4fd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OperatorSymmetric_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a2478b0541e5b934bb42a9de01cd79546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProblemDifficultyLevel</type>
      <name>PDL_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ad0cd54613dba7d09901873da1f14d448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>LeftScaled_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a7339fd84617083f2d5838947d2468b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>RightScaled_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>adc85dc46fbb235685148063c6a9dce28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector *</type>
      <name>LeftScaleVector_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>af439b56f33a017ca77af3294b4ac7e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector *</type>
      <name>RightScaleVector_</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a8b2980f0f7440ab1488aa19bffebbdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblem</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ad786e7d4326b0b4ca72b3ded0074cb52</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblem</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>adbbfe44084809306abac74675cc564d7</anchor>
      <arglist>(Epetra_RowMatrix *A, Epetra_MultiVector *X, Epetra_MultiVector *B)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblem</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ab7e401d905fa9fc6e2ef11797083d486</anchor>
      <arglist>(Epetra_Operator *A, Epetra_MultiVector *X, Epetra_MultiVector *B)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblem</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ad391093ea2d10fb2aeb478eb3919161a</anchor>
      <arglist>(const Epetra_LinearProblem &amp;Problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LinearProblem</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>af61b6689d607a2be27d197428ec19923</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a501f643dc72d6f33d41adf312c8a3a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemDifficultyLevel</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>easy</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1bafe938182cdd630c80611f09840008109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>moderate</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1bad50ce46626897ba03a74c6c54d3db290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hard</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1ba636b59f4600fabc0a4ec6c8acb546bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unsure</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a9070be64cc56470f85f6f57ff9974a1ba783bb9a6a9c6cbc0a12c6deff4b8a4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertSymmetric</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>abc47a31f4ee9055c7d92291ebc5bc8f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPDL</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>acca8ff00510956400251c0a9ef10cdb9</anchor>
      <arglist>(ProblemDifficultyLevel PDL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOperator</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a64feed7f769772049800fc722d6df6d3</anchor>
      <arglist>(Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOperator</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a0837644af08fde3ffbf37f4426604d24</anchor>
      <arglist>(Epetra_Operator *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLHS</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ad2360214dc0baae2cb418a29fbf3197b</anchor>
      <arglist>(Epetra_MultiVector *X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRHS</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>aa56188ec7ab34a0d8ddfa76e6f2ae0e1</anchor>
      <arglist>(Epetra_MultiVector *B)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a1c4501abef04f2d78c55bf5da0f384c5</anchor>
      <arglist>(const Epetra_Vector &amp;D)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a5cfc7fea1639c33caf08af16d76d14c0</anchor>
      <arglist>(const Epetra_Vector &amp;D)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Operator *</type>
      <name>GetOperator</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a93e79ee3aca3fb52ece1568606af8cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_RowMatrix *</type>
      <name>GetMatrix</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ab4f5016c5532a438a71b494a17d33d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector *</type>
      <name>GetLHS</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a81533f84aeb60bd9c88f651e406636c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector *</type>
      <name>GetRHS</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a03571db8e4dd1f6034fbcc02f62bb8e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProblemDifficultyLevel</type>
      <name>GetPDL</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>ac2619c920f3ca3031cc0e28d85024a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOperatorSymmetric</name>
      <anchorfile>classEpetra__LinearProblem.html</anchorfile>
      <anchor>a75607ce5880805dc223505da1205c530</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LinearProblemRedistor</name>
    <filename>classEpetra__LinearProblemRedistor.html</filename>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GenerateRedistMap</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a58771a29e1413b2eaed408bfe71b1f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_LinearProblem *</type>
      <name>OrigProblem_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ae795c2fccb854ca34d22542498b9cb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumProc_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a69339b4a681bb28f41b662707f480ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_LinearProblem *</type>
      <name>RedistProblem_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a1a4cff1b0a52aeba7640445bf55437f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>RedistMap_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ae2673397c9c157db9ce63c61dbaf55a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_RowMatrixTransposer *</type>
      <name>Transposer_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a692728e81db7610a5b552a64490486b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Export *</type>
      <name>RedistExporter_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a99d883cb950a48ddfb9da56407e78c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Replicate_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>abfd846206c62196bc992686fdc62b3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ConstructTranspose_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>adcfb8b157def10c5df942b325f355ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>MakeDataContiguous_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ad427c68ddd646c5ddd1f8df24db37d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>MapGenerated_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>acc9b0ff21be78f6035f789807ca48c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>RedistProblemCreated_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ad1cb2203eba4ca7431edc05db069f8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ptr_</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a0b38c819f9dfa4c84ae354c832053529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblemRedistor</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a36be7664de515f2198e72299a4e944df</anchor>
      <arglist>(Epetra_LinearProblem *OrigProblem, const Epetra_Map &amp;RedistMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblemRedistor</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ac1769be64e5ff9d1b1df3052fc373615</anchor>
      <arglist>(Epetra_LinearProblem *OrigProblem, int NumProc, bool Replicate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LinearProblemRedistor</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a3855a57a0dd6c775aea6f48a9b52c9a5</anchor>
      <arglist>(const Epetra_LinearProblemRedistor &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LinearProblemRedistor</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a26f3e921d289061248a67ce2eda36524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateRedistProblem</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a174662f96626d5858d0d7c88f6925e89</anchor>
      <arglist>(const bool ConstructTranspose, const bool MakeDataContiguous, Epetra_LinearProblem *&amp;RedistProblem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateRedistProblemValues</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a43bc5ded3c28cf4ae3ff5590e12f1596</anchor>
      <arglist>(Epetra_LinearProblem *ProblemWithNewValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateRedistRHS</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a03631c3028ac7d1d8cc61faa65fa56c7</anchor>
      <arglist>(Epetra_MultiVector *RHSWithNewValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateOriginalLHS</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a7b6a7908878f895a5d52c86e634d7761</anchor>
      <arglist>(Epetra_MultiVector *LHS)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RedistMap</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a21a5f6008738b9351bf4725fd676a30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Export &amp;</type>
      <name>RedistExporter</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>a3e350bed80fa1d395ae904761f4cd66d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractHbData</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>ac65284db98ea6490d1562dad4cdc3730</anchor>
      <arglist>(int &amp;M, int &amp;N, int &amp;nz, int *&amp;ptr, int *&amp;ind, double *&amp;val, int &amp;Nrhs, double *&amp;rhs, int &amp;ldrhs, double *&amp;lhs, int &amp;ldlhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__LinearProblemRedistor.html</anchorfile>
      <anchor>afb2da0c54ea7be1a1cc913cf4cdd121d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LocalMap</name>
    <filename>classEpetra__LocalMap.html</filename>
    <base>Epetra_Map</base>
    <member kind="function">
      <type></type>
      <name>Epetra_LocalMap</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>aa53a079dd0eff436e1839112eff9365b</anchor>
      <arglist>(int NumMyElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LocalMap</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>ac589b044d23c8fb6d111f0016c25ab48</anchor>
      <arglist>(long long NumMyElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LocalMap</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>aedaa8ec0505efdabc1187802617f7744</anchor>
      <arglist>(long long NumMyElements, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LocalMap</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>a1c6f60aaefd0c543ca2744440540b083</anchor>
      <arglist>(const Epetra_LocalMap &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LocalMap</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>a7d7bf5c8ed244454eacc1b870f49b254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_LocalMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>abc6d3e58d943982870d73d7ff07de53e</anchor>
      <arglist>(const Epetra_LocalMap &amp;map)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__LocalMap.html</anchorfile>
      <anchor>a10801eee6849aea0f3e0f00ee999d8a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LongLongSerialDenseMatrix</name>
    <filename>classEpetra__LongLongSerialDenseMatrix.html</filename>
    <base>Epetra_Object</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyMat</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>aee49f1ef79c85299309c69ec15e644cb</anchor>
      <arglist>(long long *Source, int Source_LDA, int NumRows, int NumCols, long long *Target, int Target_LDA)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>acd9481d396ba3c669049d9a71cddee7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>abe485e923e0b9c59e1d7fa19f6bdb090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>A_Copied_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a00261e662e39381f56246cb36953d609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>M_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>ab2de4672f13a52e48e439a567ea960f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a37c0c9fcfe9e8b2cecc1403b7d7b9e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>ab18ccb9ec032450269de55a036dd8833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long *</type>
      <name>A_</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a8047d60ba206ad0b7a6baa85159928f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseMatrix</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>aaa37a6ef6e6739ea03b7156f1deb1f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseMatrix</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a140888cdfbde59cbbcb20f6d00ff3c83</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseMatrix</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>aec62b738f06f5319a71bc3a4a13e68cf</anchor>
      <arglist>(Epetra_DataAccess CV, long long *A, int LDA, int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseMatrix</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a4057cf081a786ecf24afa0133a595ab5</anchor>
      <arglist>(const Epetra_LongLongSerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LongLongSerialDenseMatrix</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a85d245545ea1d97c31b9f2f916eae0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Shape</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>aac57356399468d69da93a3f8aa6488ee</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reshape</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a78d43e823410548a6d5816f1f91b0b2e</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>OneNorm</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a6d5e52e66920de2b7a4c9242fd776aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>InfNorm</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>aac8af025074283673c99e0dc0b09e742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_LongLongSerialDenseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>ad14a1897aa1c93f1b4bdb62cf265bf85</anchor>
      <arglist>(const Epetra_LongLongSerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>ab840cfd0498927a26906db09a89c7169</anchor>
      <arglist>(const Epetra_LongLongSerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a12145c1812d542a25b8c4fa2b8579a38</anchor>
      <arglist>(const Epetra_LongLongSerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>afff4d1a25e9951cd7a2f3f36a6ccc33e</anchor>
      <arglist>(int RowIndex, int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const long long &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a39e80ce421e49f5563b066f30589bf55</anchor>
      <arglist>(int RowIndex, int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>long long *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>af08c5f4bde406a84077d98851d0687bc</anchor>
      <arglist>(int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const long long *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a81cde37a7ca6906526162821f7f198fd</anchor>
      <arglist>(int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a89843777345d5e520be2bdab6fd0416d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>M</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a7aeea19d1ff01244617eb6f1e35ecda4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>af0e66e08f859ca4e436b240c23cf4607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const long long *</type>
      <name>A</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>adcf3a6be53113c54733b7329776ffd74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long *</type>
      <name>A</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a8a3a4fa8d3ff3658cde81af8ec27fe5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a6b810aedc770af4108f850e77469e318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a8468ceb5c05bc2254e06462a73cc94cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>a185306d6f2fb0bb609a338747d8f62ba</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MakeViewOf</name>
      <anchorfile>classEpetra__LongLongSerialDenseMatrix.html</anchorfile>
      <anchor>ac5f8d2151bb367f280fb49d9bb3b9482</anchor>
      <arglist>(const Epetra_LongLongSerialDenseMatrix &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LongLongSerialDenseVector</name>
    <filename>classEpetra__LongLongSerialDenseVector.html</filename>
    <base>Epetra_LongLongSerialDenseMatrix</base>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseVector</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a6f497ba3c7da6399adfda2777eb72c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseVector</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ae435bcde63b67160f15e439bc9ed7154</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseVector</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>af91db73d8323a2b8305e7edfa3542849</anchor>
      <arglist>(Epetra_DataAccess CV_in, long long *Values_in, int Length_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongSerialDenseVector</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a7d96c10af5dd04680922b178ae6445fa</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a5a57c1d0aa7af6b70c1d19da734bc643</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Resize</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a795dce377d02cf62b8c93c624e4dc47d</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LongLongSerialDenseVector</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>afec689a5935db18777c2e5401e7cfaec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ae5d09c639f4555c1c4b6d8d8657dd442</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const long long &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ab95c7138f50c75b96486559d1ee1e8fa</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a710640c1cc97f0dedd5026b51ee9eb4b</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const long long &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ae7becb0a5ee38fc6550f291f1c6f6b38</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a8e42c4cd87ba37542164db84e5915e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Length</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ae7d48a8b725316731db908bc4116b7dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long *</type>
      <name>Values</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>ae4e55c2807994c6a7ba940cd9fcfd93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const long long *</type>
      <name>Values</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a799847f9c150cdb64d4cf9332715d41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a71ac44ec5fb58f93d65f89f17c4b3903</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_LongLongSerialDenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a9fd1a0021cece0d181c48efa711a9e32</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>a9e472edc42ab81c5763d73756cf59921</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MakeViewOf</name>
      <anchorfile>classEpetra__LongLongSerialDenseVector.html</anchorfile>
      <anchor>aa526eadbbe6075cdbbff45307c153533</anchor>
      <arglist>(const Epetra_LongLongSerialDenseVector &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_LongLongVector</name>
    <filename>classEpetra__LongLongVector.html</filename>
    <base>Epetra_DistObject</base>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForCopy</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a2f06681137357aafdf75fff211073aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoCopy</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a73c8675406204c14777c83e9fc881eab</anchor>
      <arglist>(long long *V)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForView</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a18d38c1126001b5f87d5545d0d92e944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoView</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>ae1669c50fd1c30e04d5f638c696dd012</anchor>
      <arglist>(long long *V)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>affaf59b98428d4c915d4ef988575792c</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a14ce5340d70c104cd4105f57fb901fc5</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a90fd840b1903208e6e5bd90edfc01db7</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a4dd7083b5e24995577997f4aa0db7579</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long *</type>
      <name>Values_</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a5cecde7d1f754260cb4c789970d7693a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UserAllocated_</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a5b4363c542343714ff4e4f2a62587752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a6cd3d0a1423fe3ca0b17d3e33a8a42e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongVector</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a8a633881fce97960c40547932adf1ada</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, bool zeroOut=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongVector</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>aae209252763c50e491c59bcfe1146953</anchor>
      <arglist>(const Epetra_LongLongVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_LongLongVector</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>aa9bda1d164fdaa8f78b10ffdafe7cf4d</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, long long *V)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_LongLongVector</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>afcad30f2be10e0aa844bdeff7df43b67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutValue</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a3237fe10019121d38f64c8333501ff0f</anchor>
      <arglist>(long long Value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCopy</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>ad959fef6d2b2d2db6920781193e87743</anchor>
      <arglist>(long long *V) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractView</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a22729196bdc1684b4df1f5b0eb00d55a</anchor>
      <arglist>(long long **V) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MaxValue</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>acf81193ae501610d6ce39f55afc7b722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>MinValue</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a43e5ad4def2285b55d760b263aff0453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_LongLongVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>acff86060da5445e0d531c84a009fa74e</anchor>
      <arglist>(const Epetra_LongLongVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a43d1a7e05e968c95b42ceb932716afb4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const long long &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a3641ffa2acf62f018e0d5f71e5073fbc</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>long long *</type>
      <name>Values</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>ab8e54ce81e6e7865a685ebdc24a1b056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyLength</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>a84f7e9385f2aa17bfcac84b09431eb4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GlobalLength64</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>af3d6f3d255510c7f5bb5022456b68ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__LongLongVector.html</anchorfile>
      <anchor>ab687c276383ce1ceec82893de7767b4b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Map</name>
    <filename>classEpetra__Map.html</filename>
    <base>Epetra_BlockMap</base>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>aaf532073f25eb4fbf931972d8afad831</anchor>
      <arglist>(int NumGlobalElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a9f9adf92746e4f8ecc7de1d68c126070</anchor>
      <arglist>(long long NumGlobalElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a3bbae2d71027883bc37a753373853306</anchor>
      <arglist>(long long NumGlobalElements, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a301513540bad94e4f6247859946e8357</anchor>
      <arglist>(int NumGlobalElements, int NumMyElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a1dabb998520bd7a03e151b3a0b07c089</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>ab3858ac121cfc085052345a101f2c496</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a6cba7908a48a4867b3b95f3c6e167da1</anchor>
      <arglist>(int NumGlobalElements, int NumMyElements, const int *MyGlobalElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a6d682d932db0c20fbd04aa039d23c984</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, int IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a1565fd0041f1b0ffcb27dfe5ac523e39</anchor>
      <arglist>(long long NumGlobalElements, int NumMyElements, const long long *MyGlobalElements, long long IndexBase, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a233b6e6b38dd678c294a33af6c9b9fa4</anchor>
      <arglist>(long long NumGlobal_Elements, int NumMy_Elements, const long long *myGlobalElements, int indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, long long UserMinAllGID, long long UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>aba416fa013a8a9c23e8f1508b5461e32</anchor>
      <arglist>(long long NumGlobal_Elements, int NumMy_Elements, const long long *myGlobalElements, long long indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, long long UserMinAllGID, long long UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>af0ef819d62351b6a4cb393a423fadab4</anchor>
      <arglist>(int NumGlobal_Elements, int NumMy_Elements, const int *myGlobalElements, int indexBase, const Epetra_Comm &amp;comm, bool UserIsDistributedGlobal, int UserMinAllGID, int UserMaxAllGID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a87e8756039cd1dcb6fdb76bfcfec7c94</anchor>
      <arglist>(const Epetra_Map &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Map</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>aaa5b85780b7f5ad82f7db8f3c245dd3a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a3da2eb46added0b5c5c10c8ef0e6a5ee</anchor>
      <arglist>(const Epetra_Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>RemoveEmptyProcesses</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>ab94a11f07edaf54ea9e8b8876e6b7da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>ReplaceCommWithSubset</name>
      <anchorfile>classEpetra__Map.html</anchorfile>
      <anchor>a80784ec5a1e9ba88a8a0ec24f871582f</anchor>
      <arglist>(const Epetra_Comm *Comm) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MapColoring</name>
    <filename>classEpetra__MapColoring.html</filename>
    <base>Epetra_DistObject</base>
    <class kind="struct">Epetra_MapColoring::ListItem</class>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a342483ccccbfb400c3e3450c54ad3d38</anchor>
      <arglist>(int *ElementColors, int Increment)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GenerateLists</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a5700fcfb84cdde07de079fdb45b0f1a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DeleteLists</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>afcd3412724f85608a8b08abd264d523f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>InItemList</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ae427d45f968b47fac1c803bcec306f68</anchor>
      <arglist>(int ColorValue) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>af19161bb25c6c2f184f3623b3fc7a96b</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a1e70c01cf2d30f8085fc27845f01eea5</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a287079b8fee03aae2fa6d471cf52badb</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a5ae10f9f833c135f170fd97953158b62</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_MapColoring &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a879d0c15ad21a46c89b4fa3f70fc06eb</anchor>
      <arglist>(const Epetra_MapColoring &amp;Coloring)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_Map *</type>
      <name>TGenerateMap</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a607ba92009d5dd5f4faa96e4d5881195</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_BlockMap *</type>
      <name>TGenerateBlockMap</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a014569c933555d792480d2abc6012749</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>DefaultColor_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a82d8f1e7310ae60f2e3b34bacc314c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_HashTable&lt; int &gt; *</type>
      <name>ColorIDs_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ab1dff6572d47c97aaaf93633363ee75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ListItem *</type>
      <name>FirstColor_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>aa99ad5dd7e9a2f1a61c165512dad3420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumColors_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a1307823eebce9af3ca9434f7bd627313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ListOfColors_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a0b2e809305ad490a5f102731dfd34285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ColorCount_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ad5c741ac4568bf43e30f42565183d9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>ElementColors_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a9ba769887445d8ef350092ff59d40f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>ColorLists_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>aff76663719e2413ec64d030221564617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>aeadd769ee28ff36a84773991a3a6f64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ListsAreGenerated_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ab8cae5a006a0663167f57f298bb79848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ListsAreValid_</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>acb75753afecea73c9f332aec3d1b342e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MapColoring</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ad004e489318273fcd8fb6608b38789f1</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, const int DefaultColor=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MapColoring</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a71366ac8acada41de013319bb88fec68</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int *ElementColors, const int DefaultColor=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MapColoring</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ae7f69cf9681e9f8e23ddb50c063dd08c</anchor>
      <arglist>(const Epetra_MapColoring &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_MapColoring</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a9832f3857f214180cfb12d1e73564d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ad04c9e988109eb3279e9710341f8a71e</anchor>
      <arglist>(int LID)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>af0739b0b89a8a3043d8ebf46f1d00588</anchor>
      <arglist>(long long GID)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ad64404d3265ca9d75a24415fd14d9784</anchor>
      <arglist>(int LID) const </arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a0559bfaa3808bbfe5f2d75514b148736</anchor>
      <arglist>(long long GID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumColors</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>afd9dbc66da500280a111ddd7e0f566de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumColors</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a0cdd33059724406c51d8cfce9c480432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ListOfColors</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>aab77fa4d0ad308bd481e7abeaed1f551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DefaultColor</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a53d2355a7549122aa8d936485c64d11f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumElementsWithColor</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a1284268723db63934f060ea8a96f6244</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ColorLIDList</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a7d655a214ddf41f55434b006665332b6</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>ElementColors</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a5029d91164de7eca416762689dc9caf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>GenerateMap</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>ac8bae68a1bb0f7b71f6679442b24d0eb</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_BlockMap *</type>
      <name>GenerateBlockMap</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a2af53a8e202bc02356e660fe00026cc1</anchor>
      <arglist>(int Color) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__MapColoring.html</anchorfile>
      <anchor>a3136ea2e45519741ee7550e35254c238</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MpiComm</name>
    <filename>classEpetra__MpiComm.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_Comm</base>
    <member kind="function">
      <type>Epetra_MpiComm &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>afa4b8889830d6190a182a3889d1ebbfa</anchor>
      <arglist>(const Epetra_MpiComm &amp;Comm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a9eec1fa5cdf037b96dd6ff71fa00e5b3</anchor>
      <arglist>(double *ptr, int count) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>af9756a19d2b8e52b53923dbb94a2fb8f</anchor>
      <arglist>(int *ptr, int count) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>af86f7c0836ea7744d98130d7b36feecb</anchor>
      <arglist>(long *ptr, int count) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a3ee3ab8faf9507edf7e9a1231fd38f3b</anchor>
      <arglist>(char *ptr, int count) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a9b3d57310a8df068521416d37bf21335</anchor>
      <arglist>(long long *ptr, int count) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a125d768a179576677aed77ef915a27c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MpiCommData *</type>
      <name>MpiCommData_</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a419484afd573b70d7ebf7a5dbb76fe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiComm</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a837b5c920f88c82434cec24fe546f5a5</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiComm</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a37eb1f742f12d11637e2175d0521fd18</anchor>
      <arglist>(const Epetra_MpiComm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a90d8c958644588389091caea4d6c1fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_MpiComm</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a33db5cea737f4efb995da7c1604b46fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a1c3f791cfe2833a920640fe742af540d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>ae6a2b17055adcf80bdfd69c6caf45620</anchor>
      <arglist>(double *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a0830b74047884ee2d6b5f840920b396a</anchor>
      <arglist>(int *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>ae186e31b81f268e313abbdd39ab1e0a6</anchor>
      <arglist>(long *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a0ce732614400d0f0778d88f5c5b86d65</anchor>
      <arglist>(long long *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a90aec543832999dcf2c8008e5c8a6945</anchor>
      <arglist>(char *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a3d4563f703d459750c3f2631be569736</anchor>
      <arglist>(double *MyVals, double *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a9ac8812b79548f2f2fe0adb5a4d281b0</anchor>
      <arglist>(int *MyVals, int *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a07554e853b6c061be7425b034e5f8cf8</anchor>
      <arglist>(long *MyVals, long *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a22e30048875e03c983b03a04bd1f2608</anchor>
      <arglist>(long long *MyVals, long long *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a1fe0922631f8b5a0d6938de86c31bcab</anchor>
      <arglist>(double *PartialSums, double *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a56a2b542cc83948881e0b85f6a2980a5</anchor>
      <arglist>(int *PartialSums, int *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>afdec515593748b0d334d6143f6d6bdb6</anchor>
      <arglist>(long *PartialSums, long *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a6bd01a4b8484c965907c0e4e78d7f64f</anchor>
      <arglist>(long long *PartialSums, long long *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a0da3d8593032c660c482254ffedbf0c8</anchor>
      <arglist>(double *PartialMaxs, double *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a748b83bcaf39152987e970e255791160</anchor>
      <arglist>(int *PartialMaxs, int *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>af5ec76708a01f85317c1d425fd1ade38</anchor>
      <arglist>(long *PartialMaxs, long *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a4ccef3b22c398d8c6e9ecfaec4e24b4f</anchor>
      <arglist>(long long *PartialMaxs, long long *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a801feddfe9948acd082a7be1e2497f22</anchor>
      <arglist>(double *PartialMins, double *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>af0824d81927d31d120d3eb00f1258391</anchor>
      <arglist>(int *PartialMins, int *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>aa11e49a9c298c370e02f4a2fa65ef564</anchor>
      <arglist>(long *PartialMins, long *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a8f1eca127e9416cd6968449e811653f1</anchor>
      <arglist>(long long *PartialMins, long long *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a9bd2ca16917eadc8d711bc63c89dd0bb</anchor>
      <arglist>(double *MyVals, double *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>aa18fd96722bfd353d0b04b84191726e6</anchor>
      <arglist>(int *MyVals, int *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>ad266b7b7984c3105c64d6cb84cce93ea</anchor>
      <arglist>(long *MyVals, long *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a23b430a6ddb009d99d311e5313018734</anchor>
      <arglist>(long long *MyVals, long long *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>Comm</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a1ec84ba28141c4c11abdbd5f242cc7ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyPID</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>aeea0008f7181c55e3d88e6e122759fdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumProc</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a0e3295ae0a5f995f9874f308a8b3fc0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>CreateDistributor</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>af9964989929251448a1e8214f8d3ee01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Directory *</type>
      <name>CreateDirectory</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>ad92353cc2914e13e1fab869562fc79b7</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMpiTag</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a4f5d0e946bdde740284e62c89a9cf24d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>GetMpiComm</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a657ce0b900e763bf211b9cb79d4791b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a4cae3a24617944edb0fc19b48822c548</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintInfo</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a3756a74dbd6f9eb32b9836a0c224ca11</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReferenceCount</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>aa9448b30d84f02755de6c66a55f0ab96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_MpiCommData *</type>
      <name>DataPtr</name>
      <anchorfile>classEpetra__MpiComm.html</anchorfile>
      <anchor>a13ef21ab0f1ea032f9e65835acc7a3d9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MpiCommData</name>
    <filename>classEpetra__MpiCommData.html</filename>
    <base>Epetra_Data</base>
    <member kind="enumvalue" protection="private">
      <name>minTag_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a0091696c04e3e3289fb6f62c895f787ba00b3c8b7903284f8ad52c20bee7d0f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>maxTag_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>af1e19d8398038b180377ed1befa19c4facece4c0aec9b08782562ba982129c7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>minTag_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a0091696c04e3e3289fb6f62c895f787ba00b3c8b7903284f8ad52c20bee7d0f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>maxTag_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>af1e19d8398038b180377ed1befa19c4facece4c0aec9b08782562ba982129c7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_MpiCommData</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a30e225570cca84be2e9b3269e303d900</anchor>
      <arglist>(const Epetra_MpiCommData &amp;CommData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_MpiCommData &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>ade6c5dcd7a184a1ebfddeabb328fabb9</anchor>
      <arglist>(const Epetra_MpiCommData &amp;CommData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a4ec6fba51474e2165becbcb08130c5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rank_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a9fcc8e4b9d68242786b76a1fbd682ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a71237aeb627c6f9c79ee3d22ad5af576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curTag_</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>af76a0400f0063c59b944f31cb0d447be</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_MpiComm</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a8e74d626a534ca8c0d29f64e2e3578c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_MpiCommData</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a3dbef9e95e47e8968e2a2858c6076c4a</anchor>
      <arglist>(MPI_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Epetra_MpiCommData</name>
      <anchorfile>classEpetra__MpiCommData.html</anchorfile>
      <anchor>a033497b739248e95c4ed4fefc90353c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MpiDistributor</name>
    <filename>classEpetra__MpiDistributor.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_Distributor</base>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CreateSendStructures_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aa2b42ac0b1c98013e7951ae3d3e9967c</anchor>
      <arglist>(int my_proc, int nprocs, const int &amp;NumExportIDs, const int *ExportPIDs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CreateRecvStructures_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad9b0478d25786576fe87d4c906899c2d</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const int *RemotePIDs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ComputeRecvs_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a66edf872fd4abc9e72814db23286ebcc</anchor>
      <arglist>(int my_proc, int nprocs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ComputeSends_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ab274597572ea94666dd566c38592991b</anchor>
      <arglist>(int num_imports, const id_type *&amp;import_ids, const int *&amp;import_procs, int &amp;num_exports, id_type *&amp;export_ids, int *&amp;export_procs, int my_proc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Resize_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ac1438f87ac3f5a7049e64e0a4a29411c</anchor>
      <arglist>(int *sizes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Sort_ints_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a445fab905faf04c223d215153a5a3755</anchor>
      <arglist>(int *vals, int *other, int nvals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_MpiDistributor &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aa629fb076b3cd3b7166ed4f126a4c9eb</anchor>
      <arglist>(const Epetra_MpiDistributor &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CreateReverseDistributor</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a9a6aef10a5538ca396f576933301d96e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>lengths_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a1f77b2eacf7d3072183b818cb23e918b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>procs_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a01152850807aca34b19fdc40eae950c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>indices_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a6f567b0f790d1cfdb8fe0e29ae9dd770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_indices_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a5fc3faae67e140d2a74b05c7e27c0e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>lengths_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a4bcb0f01ef0e76b4347d8dd41aec6877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>procs_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a07150076f064896edd551586195d46f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>indices_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>af5e57990f3a90b9c99ed8968f2043b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_indices_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a960112c0c2695713a4d6959779eb547d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>resized_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a732c977e0b4f1e677159445d6457f472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>sizes_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aa6404be7f504f72cc0080d9bc59bfb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>sizes_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ab7f003b1223b204c3fe27cd49c41da66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>starts_to_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a0d96da16aa641b35bd4f9e361258c99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>starts_to_ptr_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a2532015cf7232d3bf37427e3537751c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>indices_to_ptr_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad7da59d0ac7249667ef6f8d646bf8b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>sizes_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a202c6cbab3ef2065afb1bcf4ae00fe75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>starts_from_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad4c03c610e30963b13d698cfa9663852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>starts_from_ptr_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a1d64fdcf7d292c8597d5501501f49df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>indices_from_ptr_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ab5b09d7ed6987706ecfa577a6637515a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nrecvs_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a6cda00ac64fded93b616fcde23235ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nsends_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a311c390a5e9cea0e6c9be3518702a26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nexports_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a462557e2c53f0cc9e616c2cb5d20f1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>self_msg_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad6417f9d61ca0033819c2af3dd56a0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_send_length_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>adf91fd2fa8ac6b3f7c88d197662e46ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>total_recv_length_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a962d763d8e8e8856b4a71fbfc713d72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tag_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad81b22083be97a50aa230ab6c61511ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_MpiComm *</type>
      <name>epComm_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a5845112470cb05aa0518b5ed0c9d767c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a43246febadba5fca5fc61293940753b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Request *</type>
      <name>request_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a1157b90634fb9e05dd8b6090cec17b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Status *</type>
      <name>status_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad7d56b43cbe5af114f305941491d6801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>no_delete_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a8642de5fd68a1e348f8847079e963e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>send_array_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aac56ffc9c5b8ce7caf5b5554ef663dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>send_array_size_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a077c51eb9927ee8df0f009359ad260f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MpiDistributor *</type>
      <name>comm_plan_reverse_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aa5e108d36d1946335780edd90e8c9b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastRoundBytesSend_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a867c670f1a03eec5e3231f7362d95020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastRoundBytesRecv_</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>adbc105f8778db1262926b386438a6027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiDistributor</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a637a8d6d2eee854a1045260f6b800989</anchor>
      <arglist>(const Epetra_MpiComm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiDistributor</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aef5cf16716a004a7d5641b104f85e922</anchor>
      <arglist>(const Epetra_MpiDistributor &amp;Distributor)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>abc926c459799b1d7f7bb0d2a1da95c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>ReverseClone</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a598eb4abc8cd7979b6f7493c00f33097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_MpiDistributor</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a8ce46606b5c245a273a944fb47b41ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromSends</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>accd730e97fa51003678a2da8e8ec8a84</anchor>
      <arglist>(const int &amp;NumExportIDs, const int *ExportPIDs, bool Deterministic, int &amp;NumRemoteIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a30b4ab6f36a1d7e078e46324e0172083</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const int *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, int *&amp;ExportGIDs, int *&amp;ExportPIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a0f5cd52b19ac3bb4ea8a32485f8b2063</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const long long *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, long long *&amp;ExportGIDs, int *&amp;ExportPIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromSendsAndRecvs</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ab4be2141b2c549221a2056ea31107c88</anchor>
      <arglist>(const int &amp;NumExportIDs, const int *ExportPIDs, const int &amp;NumRemoteIDs, const int *RemoteGIDs, const int *RemotePIDs, bool Deterministic)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromSendsAndRecvs</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a2d990ec81fbfaab0b0633927cacc9da7</anchor>
      <arglist>(const int &amp;NumExportIDs, const int *ExportPIDs, const int &amp;NumRemoteIDs, const long long *RemoteGIDs, const int *RemotePIDs, bool Deterministic)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Do</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ae35357644f362edbb6107330d753f0da</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ae250af591b95560a726a0ddb3b5e8766</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aee77018e5f0006dce399d8b209cdf86d</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoWaits</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>af9d2bef9563b6a9179d1389a20d7066e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a09364d09d4e78da68897b5961340513c</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverseWaits</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a9974d3f76cac19b34668a02726cf85e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Do</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>aa9b296f85255adb57b023f91582e2146</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>af2f26e44697224347c4041fd80ff3f61</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a9711607808b8f42d65c79a5ab86f5d26</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a9d940bf5baa90ddddcbab80f6166378d</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumReceives</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>af509c028d2b5c7fb02ffc8a1637c8719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumSends</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a1b94053bc47c4be5c5e1e1627611014f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxSendLength</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a0a62d1364b6994a62ca974788c1643c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TotalReceiveLength</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a967df0b2b65de3ffabda6ee546b1755a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>ProcsFrom</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>abebaa26c274ce59bf4bb1a4cfd417833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>ProcsTo</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a4e893b185fec59d87fbcabbdeaa28a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>LengthsFrom</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ae462335f4fb6b77deb55eb239c754350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>LengthsTo</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a7e61f988cfb702f48c6acc00b97ed451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetLastDoStatistics</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>a19cb18e9bb5641c935a9e6d5e6bddf92</anchor>
      <arglist>(int &amp;bytes_sent, int &amp;bytes_recvd) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classEpetra__MpiDistributor.html</anchorfile>
      <anchor>ad932beadb58d654eae2aee59a76353dc</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MpiSmpComm</name>
    <filename>classEpetra__MpiSmpComm.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_Comm</base>
    <member kind="function">
      <type>Epetra_MpiSmpComm &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a2bb5a834cbebb54a858686fafa8767e9</anchor>
      <arglist>(const Epetra_MpiSmpComm &amp;Comm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>ae0d83d131c588d279fe5d78aae2bcba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MpiSmpCommData *</type>
      <name>MpiSmpCommData_</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a36a8455de6dfd4a6ab5172e2b7017f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiSmpComm</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>aeea55c80e425e69e434edb61a120d139</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MpiSmpComm</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a6c8cf28e53edd8c96d92b4244db90a38</anchor>
      <arglist>(const Epetra_MpiSmpComm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>ac4ee86cce0a306645c1fcfbda2a46fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_MpiSmpComm</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a4b7b078c09b1dafcb090d675cb3fdd60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a4c8868f6ccd272bf106f34273aebe7b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a182fd2b0f01e7084959649092ba20f91</anchor>
      <arglist>(double *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a0e39800f63fa3b277eb89abfc38b5574</anchor>
      <arglist>(int *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a3e4403550b67eef3486ecb6d18bd6168</anchor>
      <arglist>(long *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a464303670ac2a30e9b38207dc0a1e367</anchor>
      <arglist>(char *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>af2723bc3e6f804aa347ad7ff875a36a1</anchor>
      <arglist>(double *MyVals, double *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>aace0d85797e8df3654c0c47def41c4b6</anchor>
      <arglist>(int *MyVals, int *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a675b30270d176d6d9d6caa584945ce06</anchor>
      <arglist>(long *MyVals, long *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a94c9a6fb96df76b9a9a446f7b7e5cf6f</anchor>
      <arglist>(double *PartialSums, double *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a19178c9370b0be1431b8fb7ed4fe3dc0</anchor>
      <arglist>(int *PartialSums, int *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>af9674396309e8712be1a7902dae36979</anchor>
      <arglist>(long *PartialSums, long *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a1d3ea93ba748ba514b3c80ad25e5423b</anchor>
      <arglist>(double *PartialMaxs, double *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a522b18255c370c25008ea4f08535c2c1</anchor>
      <arglist>(int *PartialMaxs, int *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>aedf64f39381d1ee5f26450470181350b</anchor>
      <arglist>(long *PartialMaxs, long *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a4755e0f1864a017021a220ee122a02e7</anchor>
      <arglist>(double *PartialMins, double *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>ae4ae57fdaf5ea34312b7feb824560836</anchor>
      <arglist>(int *PartialMins, int *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a0779e29928324a766574e26079296c70</anchor>
      <arglist>(long *PartialMins, long *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>abd78ac60fa39bbd6b35b3cd054352b86</anchor>
      <arglist>(double *MyVals, double *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a9d36afcc0b6a059dde955629920af23a</anchor>
      <arglist>(int *MyVals, int *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>ace2d4fe46488df729a78473e566b8eed</anchor>
      <arglist>(long *MyVals, long *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>Comm</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a9cebcd619efa50a69a5cd1c9d3b054e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyPID</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a4a8f03c3726011c9c801d99d4836068e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumProc</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a155548011bc76b5d68dc0aa3bdbf3087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>CreateDistributor</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>ab445588183bdf0532a7af39a2be00d41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Directory *</type>
      <name>CreateDirectory</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>af6ab0722fdb9f3676670fe4f438cec54</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMpiTag</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>afd2333a466d19207e68178a9d2b7714a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>GetMpiComm</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a7a325b8a263d8d0277d1646a884f9176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NodeBarrier</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a7a5a96f5026780b54380748ef1592e33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyThreadID</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a45d1683dc03904b1adb6ac579229f91e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyNodeID</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a553493a67ea652ac9cbb090829b1e31a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetNumThreads</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a3c0bf7890ef51e7cc43a4837c59e1d75</anchor>
      <arglist>(int NumThreads)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumThreads</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a5c1519032bd5955e436afa0903bc72e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMyThreadID</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>af38ffa534992f85cc198136c54b67f14</anchor>
      <arglist>(int ThreadID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMyNodeID</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>abd1ebb268bc24b1cc8682fdd7ea3b6d6</anchor>
      <arglist>(int NodeID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>a4f6f9b4e80c62558d07a57c07c6601be</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintInfo</name>
      <anchorfile>classEpetra__MpiSmpComm.html</anchorfile>
      <anchor>aef629bf4930c035368464c7bc1032081</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MpiSmpCommData</name>
    <filename>classEpetra__MpiSmpCommData.html</filename>
    <base>Epetra_Data</base>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_MpiSmpCommData</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>af1e4536380ef14d3d0714766f17853b3</anchor>
      <arglist>(const Epetra_MpiSmpCommData &amp;CommData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_MpiSmpCommData &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a72c062d852937b3e314d7251bc2250f8</anchor>
      <arglist>(const Epetra_MpiSmpCommData &amp;CommData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a35216f71eaac685531e9e14880b219bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rank_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>aa231c8501a2ca9ec2b27a05c8468883d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>af2c4450893378c44523c8ed18338e7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minTag_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>aad93426d349f1f2cbaca7d755ee99d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxTag_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a44e44053735780f8d811458da3724360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curTag_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a8adb8a4e6a7ca8c983fb5f0aed30c8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ThreadID_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a8ab8753723f5cf78069b56349e23403b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NodeID_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>ab7131c97c151560e664ec978aad4d1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumThreads_</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>aa16585f3c7fd3f43bd9eb6e46eb4ce0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_MpiSmpComm</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>adaae8d260fe2b198498208fe3728af2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_MpiSmpCommData</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>ab00586537ef38d76e9c4d4ca90dc2914</anchor>
      <arglist>(MPI_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Epetra_MpiSmpCommData</name>
      <anchorfile>classEpetra__MpiSmpCommData.html</anchorfile>
      <anchor>a2fdea36e951be267d5a8f5b356bdc59a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_MultiVector</name>
    <filename>classEpetra__MultiVector.html</filename>
    <base>Epetra_DistObject</base>
    <base>Epetra_CompObject</base>
    <base>Epetra_BLAS</base>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMap</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af1981df3338e57ffa7b6575c7ded6e1e</anchor>
      <arglist>(const Epetra_BlockMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reduce</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ae33604409706b5e5a5bcbed3d6eb21d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a860c69507551a6e08d0f7cd2b302d8b1</anchor>
      <arglist>(const Epetra_MultiVector &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CheckInput</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a9e6126b3bf6e554285562ec5f74f76e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>Values_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a12a02752d438e80a97d8fd829bd9ef5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForCopy</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af6b7d321de538811c278e60282f3b9ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoCopy</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a5e4f7bcdf6b095bc42c52d59eee431a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateDoubleTemp</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a7ef900469553978f8f6f246ce8ac1ee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateVectors</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ae17212e76779dc023d1dd1a7a8c285c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateForView</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a5bf88a298bfb64c9668dfdf8c54be466</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>DoView</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a67f132e736b6bc5d1cecb6f149f29dc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ChangeGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a74d9348c0b265aea8c0ab888460b003c</anchor>
      <arglist>(int_type GlobalBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue, bool SumInto)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ChangeMyValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a9bb2b1934f4764330e2208fa732e7ee1</anchor>
      <arglist>(int MyBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue, bool SumInto)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a5b8371bcbc764ecbeed05ee631c36c27</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a0cb1debd1e8e3a1a16f7e88d4c44bee8</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a4aa64efd8690d39c3c3c14f65aa2ca11</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ace550bb49c30b87283ca3363963cfec1</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>Pointers_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ae4e0b86117eac00568967aef767bd296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MyLength_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a49d294d8aa5b9b1abfd1c5b3d53ca07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>GlobalLength_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a41fad2fe03bbb86604b101ee7e556ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVectors_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a1b56339a26b17671bdf5fb2d4faa5eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UserAllocated_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a2aab0e0ea05f06967e03740d781e6bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ConstantStride_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a59605de018eda6f57d541f456ad748cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Stride_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a90d1c5f24a778a90b952764eee0a6fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a79c17a47426d905dd578b213588c30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>DoubleTemp_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a1d533183b158cebd800bc505c6c14fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector **</type>
      <name>Vectors_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af3ef45c6c3ba2519fa8bdb2f8cdd93c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Util</type>
      <name>Util_</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ac5678941191624c41af6d1605260b4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aff75bed4ad99508ed7319460fe749d7c</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, int NumVectors, bool zeroOut=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ab30d44b8a9a960ea5ab5297e30319290</anchor>
      <arglist>(const Epetra_MultiVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a39dd3af2515fd65193ccd0a21d02740f</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, double *A, int MyLDA, int NumVectors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a17605f4bf2fd5967169be3b4b56004df</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, double **ArrayOfPointers, int NumVectors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a996dbd09376c8eea018e8467b977f282</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_MultiVector &amp;Source, int *Indices, int NumVectors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aca53de28aec32b9c35b5e96a8c7e2503</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_MultiVector &amp;Source, int StartIndex, int NumVectors)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_MultiVector</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a36306e4224e8e81c750053cb27196929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a74947cc0e0550e2f8c1c03b0135e263a</anchor>
      <arglist>(int GlobalRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>adbfc20129e42f61650cb4dfe907b5a4d</anchor>
      <arglist>(long long GlobalRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af303f5ac189b48e723b5dcf44885d5ea</anchor>
      <arglist>(int GlobalBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a963c53d87b4bf8dc53812c2a28fa7c13</anchor>
      <arglist>(long long GlobalBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a37f414bce90344534f2cd097017e30fc</anchor>
      <arglist>(int GlobalRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a52da9ffcc480081c1c19af38231d9460</anchor>
      <arglist>(long long GlobalRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af80cf18d7ae082772ff6921d20a48579</anchor>
      <arglist>(int GlobalBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a8efbc0e53c85d57908a1d893ade42fa5</anchor>
      <arglist>(long long GlobalBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aa3024360d5db99d0d09b91aba5a7fb14</anchor>
      <arglist>(int MyRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a7ff1175fcfdd9c534364d30e84c7a510</anchor>
      <arglist>(int MyBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ab7148321d9b58e03d17fbb4318fe11c6</anchor>
      <arglist>(int MyRow, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a0dd0c020618f032772bd33e15338f39e</anchor>
      <arglist>(int MyBlockRow, int BlockRowOffset, int VectorIndex, double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutScalar</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ad6f671d0d84d754bd103afc8dbfd5e01</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>abc4083f49c621624031157a1314218de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCopy</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a982d531e88b83c1e309d3541fd94f14a</anchor>
      <arglist>(double *A, int MyLDA) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCopy</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a37e80196a8b2469788789aaec75781b0</anchor>
      <arglist>(double **ArrayOfPointers) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractView</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ac4d9aab92aecd6d6647c2a832e75e5dc</anchor>
      <arglist>(double **A, int *MyLDA) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractView</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a1985d026c2c4b5f5d6787ce464104405</anchor>
      <arglist>(double ***ArrayOfPointers) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Dot</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>af3ef1b49023bd1fe405c5d7de85f04ca</anchor>
      <arglist>(const Epetra_MultiVector &amp;A, double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Abs</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a367cbac4464dbdc1666ee30d5f4420b9</anchor>
      <arglist>(const Epetra_MultiVector &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reciprocal</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a2bd5ea6f0e1cf7742db18065f6d5e687</anchor>
      <arglist>(const Epetra_MultiVector &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a193b83fb1fa361a3f61a5757fce34a14</anchor>
      <arglist>(double ScalarValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a98b18eb28e8bca53b5bd3f333f2880b1</anchor>
      <arglist>(double ScalarA, const Epetra_MultiVector &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Update</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a9d117790b9fef51615bda948baf4b503</anchor>
      <arglist>(double ScalarA, const Epetra_MultiVector &amp;A, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Update</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ac73cd3a0b875cbd1424d35512c307873</anchor>
      <arglist>(double ScalarA, const Epetra_MultiVector &amp;A, double ScalarB, const Epetra_MultiVector &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Norm1</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ad60e0ab5f41986f599b333e9df76f91e</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Norm2</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a574b7105e2774277446f262e71c31b96</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aec5078e3a0613777334514e3edd1f564</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NormWeighted</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a3eda287939a63e523fbbeb16686dc07d</anchor>
      <arglist>(const Epetra_MultiVector &amp;Weights, double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a29c2e3555f1004c01e9551ff71c2fe54</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a9a09de139ff1e36842649a865bf7d3ff</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MeanValue</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aa5f05b9885bef9480297f9cadcddcaa8</anchor>
      <arglist>(double *Result) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a865636722de327e1b4f89e7a8153174d</anchor>
      <arglist>(char TransA, char TransB, double ScalarAB, const Epetra_MultiVector &amp;A, const Epetra_MultiVector &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ae8e9a8b73fec0a60050fc8db0069b0c8</anchor>
      <arglist>(double ScalarAB, const Epetra_MultiVector &amp;A, const Epetra_MultiVector &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReciprocalMultiply</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ae9641adfac464747124c955f59474299</anchor>
      <arglist>(double ScalarAB, const Epetra_MultiVector &amp;A, const Epetra_MultiVector &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSeed</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ad251efbd05e2125090529c120c18281f</anchor>
      <arglist>(unsigned int Seed_in)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>Seed</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>abe3fe6ef3a5a9d5b567057b75e674801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a58bee1de7a6522a5beecf885ea98392d</anchor>
      <arglist>(const Epetra_MultiVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>double *&amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aa873c9824175ca96602883c07ac5fa46</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double *const &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>aa0e1dbeabb213fd6993cbfc1aaf90198</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Vector *&amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a31d61d910d1e91a25907bf1d2de2fce4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector *&amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>adc1c2fd22222f399609b36252c76c9e6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumVectors</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a8fbcd14194d24634f9005c86fa2d5f49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyLength</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ab9bbb63726ae33d9c9cba64ba23885c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalLength</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a44704d1d4feb4e60c9933fd54db91557</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GlobalLength64</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>abdfd2d378ff6940c180059625c2cea4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Stride</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a7721421fbe89f66daf46eaf269a9d964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ConstantStride</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a62f65515e2836f59a78cb7273da6782e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a267a6241644de491859b00a6b7d64608</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ResetView</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a5ea26a66b256ff1d75c9b3d0af70df68</anchor>
      <arglist>(double **ArrayOfPointers)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>Values</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>ac6aa9e32e9cc2e53109fbc80efff03a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double **</type>
      <name>Pointers</name>
      <anchorfile>classEpetra__MultiVector.html</anchorfile>
      <anchor>a959dbfa9e294f01c323579ce87701cde</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Object</name>
    <filename>classEpetra__Object.html</filename>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>TracebackMode</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>abcc693a0058b9910543df8c4ae76e5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a99e0a8f0bf20c39b1f611c9aad0c9dad</anchor>
      <arglist>(const int &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a93b54d2ec349277e2ead568b7a062dcb</anchor>
      <arglist>(const long long &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>acf07914902e829dfec0a0ee2dcbc55d3</anchor>
      <arglist>(const double &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a5488a68a1e2c5848542d0ef964f3256f</anchor>
      <arglist>(const Epetra_Object &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Label_</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>aa9109249c677b40315b72f025e501cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Object</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a7676631aca0d619c4e8d3e877c2b87a2</anchor>
      <arglist>(int TracebackModeIn=-1, bool set_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Object</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>acf156d9c8874a2a455ec305826c7313f</anchor>
      <arglist>(const char *const Label, int TracebackModeIn=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Object</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>ac5f8bd631f2a97276ea07cea8c9c7057</anchor>
      <arglist>(const Epetra_Object &amp;Object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Object</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>aaecd44344e7bed037d7d9bcaa8fb6703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetLabel</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>ac83479a42f81392959759de744101a4b</anchor>
      <arglist>(const char *const Label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a622b81853ee583007a54a2062f772ba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetTracebackMode</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>add296bcb3f8587a855fe32e6914a0f2a</anchor>
      <arglist>(int TracebackModeValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetTracebackMode</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>ad7c06c32cce0d7d3dce2c938b4323483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>GetTracebackStream</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a58a41c4d1361222f2bf6a8e623a0a703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>aeb797937f23c9075074d96b185d9fd13</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ReportError</name>
      <anchorfile>classEpetra__Object.html</anchorfile>
      <anchor>a278c1008ef2a93da51d3ac97e7ae2bce</anchor>
      <arglist>(const std::string Message, int ErrorCode) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OffsetIndex</name>
    <filename>classEpetra__OffsetIndex.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type></type>
      <name>Epetra_OffsetIndex</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>ac445059a6798bc824e723bbfbb56ebd3</anchor>
      <arglist>(const Epetra_CrsGraph &amp;SourceGraph, const Epetra_CrsGraph &amp;TargetGraph, Epetra_Import &amp;Importer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OffsetIndex</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a27dfe265484bb79f58543834fd13a2c3</anchor>
      <arglist>(const Epetra_CrsGraph &amp;SourceGraph, const Epetra_CrsGraph &amp;TargetGraph, Epetra_Export &amp;Exporter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OffsetIndex</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a67671c54dea130a6c380da99534b521c</anchor>
      <arglist>(const Epetra_OffsetIndex &amp;Indexor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OffsetIndex</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>af6bbbc8cc4192e076f8088bf7bd83c22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>SameOffsets</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>ab01de86097c2a41466d5922eae0fe97d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>PermuteOffsets</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a986e296086a72ca0872dbb370d85df9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>RemoteOffsets</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a9a80292306180bc42a1af40f92b99edb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSame_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>aabc604a0208b4e02cdfd8772a95e6770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>SameOffsets_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a2bb6f350d8ad51a8729876790d1a8ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPermute_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a061badffbc3083ec440dee424f1f137a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>PermuteOffsets_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>ad101962259efb39f7f4ad576bce403d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumExport_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>aa30e009f2a1ed10c4b40804048960cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumRemote_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a2613ae3c52be6d9b4c9af0bc8e8de531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>RemoteOffsets_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a0168fac218dc5765332dc5cfe4acbd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>DataOwned_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a01439a0b091f606790dbbc29279b00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>GenerateLocalOffsets_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a5678573b7bb7d1f71b58e447297fdfde</anchor>
      <arglist>(const Epetra_CrsGraph &amp;SourceGraph, const Epetra_CrsGraph &amp;TargetGraph, const int *PermuteLIDs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>GenerateRemoteOffsets_</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a91e8c10e0535a079c640f6a4930d1867</anchor>
      <arglist>(const Epetra_CrsGraph &amp;SourceGraph, const Epetra_CrsGraph &amp;TargetGraph, const int *ExportLIDs, const int *RemoteLIDs, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_OffsetIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>abf3b9e08a10ad0bf803295d393a75109</anchor>
      <arglist>(const Epetra_OffsetIndex &amp;Indexor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__OffsetIndex.html</anchorfile>
      <anchor>a167271919a826b6c140076b4beca0799</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Operator</name>
    <filename>classEpetra__Operator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Operator</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>a7d987fbd72e3920a8043f7861df7d242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>a3aedc73c2ef58b21bacb12bdc04130d7</anchor>
      <arglist>(bool UseTranspose)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>aee2919d7e6cc5c7d79c387662d4180df</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>afb448be829addff856fc333e549e3c01</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>a72406d9b07ee61843952d9a6c0ed818b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>abeefa7d303f28fc328248e557864e647</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>a3fb1d7f4017fff82ecb4687ab11652e4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>aafc7a91375b118b5525e92203a7f4dbc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>a2efc85c77e7d8d79eaa36367b16b524f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>af80d85601baedbd6ba3da5c87dbbb8c8</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__Operator.html</anchorfile>
      <anchor>afad06999381e6fd3dee2f4f68f91b7cb</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiError</name>
    <filename>classEpetra__OskiError.html</filename>
    <member kind="variable" protection="private">
      <type>oski_errhandler_t</type>
      <name>ErrorHandler_</name>
      <anchorfile>classEpetra__OskiError.html</anchorfile>
      <anchor>a9533130c3abe546e36281b8436b7bbad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiError</name>
      <anchorfile>classEpetra__OskiError.html</anchorfile>
      <anchor>a0c8d007e3b6a070fc98a27b77efe50ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiError</name>
      <anchorfile>classEpetra__OskiError.html</anchorfile>
      <anchor>acc38d9f936eac99d0a372baa846145ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_OskiError</type>
      <name>OskiGetErrorHandler</name>
      <anchorfile>classEpetra__OskiError.html</anchorfile>
      <anchor>a66e8a7c1e11d15c45047c00ad692ea2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OskiSetErrorHandler</name>
      <anchorfile>classEpetra__OskiError.html</anchorfile>
      <anchor>aea862b6449d8aac3bde8ea22cf27da36</anchor>
      <arglist>(Epetra_OskiError &amp;NewErrorHandler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiMatrix</name>
    <filename>classEpetra__OskiMatrix.html</filename>
    <base>Epetra_CrsMatrix</base>
    <member kind="variable" protection="private">
      <type>const Epetra_CrsMatrix *</type>
      <name>Epetra_View_</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a9810fa9f29dd051b4a0eadc2ee99cc75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>oski_matrix_t</type>
      <name>A_tunable_</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ae852803e9729cc01d6282cc6021faa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Copy_Created_</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>aa36f5a6869d5263b98e59163d458fbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiMatrix</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a2ad88c0027c640b6ddfdab3da1fa5732</anchor>
      <arglist>(const Epetra_OskiMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiMatrix</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ac44a60151a8f228b93a425efba414307</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;Source, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiMatrix</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ab1378bd384197504983e07e112578f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValues</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a9a84a63df971df7916e0fdbcb93e57e2</anchor>
      <arglist>(int MyRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValues</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ad3d7f7c6a1ab1ef30e36c9207a99ace9</anchor>
      <arglist>(int MyRow, int NumEntries, double *Values, int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a049757a80f1734bf09674485c13814f2</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceDiagonalValues</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a239ea34f07aa866de0d7e147ef855c86</anchor>
      <arglist>(const Epetra_OskiVector &amp;Diagonal)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a97dc3999ba7c1b184399aa59c72488a8</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ad7ce9ac78494fc67be41788f37e1bc33</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, double Alpha, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a967390bdbcff4efe2e6b042993ee3270</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a64d8fdbc599dec633b01c981f4f65d0e</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, double Alpha, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a92b00b61b33a700fbe2361dd25226aa8</anchor>
      <arglist>(bool Upper, bool TransA, bool UnitDiagonal, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a6149168224c148edf449557662afb97d</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, double Alpha=1.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a856a14bbb24d998f61301fefdd878a25</anchor>
      <arglist>(bool Upper, bool TransA, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a36169243dac7ca355f5ebf727b958025</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, double Alpha=1.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MatTransMatMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a8911bdc869701d16345d05b66dc5c39c</anchor>
      <arglist>(bool ATA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, Epetra_Vector *t, double Alpha=1.0, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MatTransMatMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a587b51fd14db482ef8bfe24e27c06667</anchor>
      <arglist>(bool ATA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, Epetra_MultiVector *T, double Alpha=1.0, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiplyAndMatTransMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a26e4e7370bcf800949b7a3f40b3f72ff</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, const Epetra_Vector &amp;w, Epetra_Vector &amp;z, double Alpha=1.0, double Beta=0.0, double Omega=1.0, double Zeta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MultiplyAndMatTransMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a7e7e07298fb0f2b070a142032c450736</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, const Epetra_MultiVector &amp;W, Epetra_MultiVector &amp;Z, double Alpha=1.0, double Beta=0.0, double Omega=1.0, double Zeta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MatPowMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ac490b5a69091b038f03f97a005734747</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, Epetra_MultiVector &amp;T, int Power=2, double Alpha=1.0, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MatPowMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a8380b3900fbb6735845bab8c67b96fd3</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y, int Power=2, double Alpha=1.0, double Beta=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHint</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a2cdb2a4883683ed6e17166e00f1be37d</anchor>
      <arglist>(const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHintMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ad69e471aa245c327dfaed65f376f8193</anchor>
      <arglist>(bool TransA, double Alpha, const Epetra_OskiMultiVector &amp;InVec, double Beta, const Epetra_OskiMultiVector &amp;OutVec, int NumCalls, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHintSolve</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>abf907924477a099556ee005a1e06abcc</anchor>
      <arglist>(bool TransA, double Alpha, const Epetra_OskiMultiVector &amp;Vector, int NumCalls, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHintMatTransMatMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a64a9521fa5d2058f53acad5dd9707d6d</anchor>
      <arglist>(bool ATA, double Alpha, const Epetra_OskiMultiVector &amp;InVec, double Beta, const Epetra_OskiMultiVector &amp;OutVec, const Epetra_OskiMultiVector &amp;Intermediate, int NumCalls, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHintMultiplyAndMatTransMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a984e426d6ebd3241c3efd24a3553fa4b</anchor>
      <arglist>(bool TransA, double Alpha, const Epetra_OskiMultiVector &amp;InVec, double Beta, const Epetra_OskiMultiVector &amp;OutVec, double Omega, const Epetra_OskiMultiVector &amp;InVec2, double Zeta, const Epetra_OskiMultiVector &amp;OutVec2, int NumCalls, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetHintPowMultiply</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>aaec6ae371bde9abea93db54d00895bc4</anchor>
      <arglist>(bool TransA, double Alpha, const Epetra_OskiMultiVector &amp;InVec, double Beta, const Epetra_OskiMultiVector &amp;OutVec, const Epetra_OskiMultiVector &amp;Intermediate, int Power, int NumCalls, const Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TuneMatrix</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a335af3df905a0b748eb7d8381c9301de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IsMatrixTransformed</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a5310cce8e824bc948947cae3af3f8d36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_OskiMatrix &amp;</type>
      <name>ViewTransformedMat</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>ac27eeef13b4212147d83250bce852244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_OskiPermutation &amp;</type>
      <name>ViewRowPermutation</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>af9c7526d88f193992d588d88dbae4a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_OskiPermutation &amp;</type>
      <name>ViewColumnPermutation</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a1110ee1ae9d56d0b6646601628d2581d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>GetMatrixTransforms</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a8cb65ac3ac877a0efa52904bc5934183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyMatrixTransforms</name>
      <anchorfile>classEpetra__OskiMatrix.html</anchorfile>
      <anchor>a6df7c051681c50e745e5f1cf8c55b694</anchor>
      <arglist>(const char *Transforms)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiMultiVector</name>
    <filename>classEpetra__OskiMultiVector.html</filename>
    <base>Epetra_MultiVector</base>
    <member kind="variable" protection="private">
      <type>const Epetra_MultiVector *</type>
      <name>Epetra_View_</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>af0bda704fa19e1a8389b5299ed4856c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>oski_vecview_t</type>
      <name>Oski_View_</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>ad60804071348c75e5e99f715aca5c102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Copy_Created_</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a1358053edd88f1689c666dc03e456235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiMultiVector</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a7872081a8e50d3267a077c526a08612c</anchor>
      <arglist>(const Epetra_OskiMultiVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiMultiVector</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a6ffd928e1b9caac1f85061157a2805c7</anchor>
      <arglist>(const Epetra_MultiVector &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiMultiVector</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a6bdfa69f4e88df06ca9d72add1989371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Copy_Created</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a6992d18e84ae3c8f0a06d63c211e8245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>oski_vecview_t</type>
      <name>Oski_View</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a65bfd48cb8c973b18cfb3fe9f974ce5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_MultiVector *</type>
      <name>Epetra_View</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a61a2d488af70b9521e6242f01aaa47b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_OskiMultiVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__OskiMultiVector.html</anchorfile>
      <anchor>a905b1fc000207c7d6e9d4ebb86c6bae5</anchor>
      <arglist>(const Epetra_OskiMultiVector &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiPermutation</name>
    <filename>classEpetra__OskiPermutation.html</filename>
    <member kind="variable" protection="private">
      <type>const oski_perm_t *</type>
      <name>Permutation_</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>a3a92b51a0cb7a930e7f02da2be9a00b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiPermutation</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>a1231edfdc21032a11a1a763a92942b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiPermutation</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>ac03ca0c13807f671865796f2f750facf</anchor>
      <arglist>(const Epetra_OskiPermutation &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiPermutation</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>acf95ab623c9b6b6317e84c64dacc8daa</anchor>
      <arglist>(bool RowPerm, const Epetra_OskiMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiPermutation</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>a4bda8868ef36f526ee6dfb61d4f641c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReplacePermutation</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>a57c289f1903682869c27a236b23f363f</anchor>
      <arglist>(const oski_perm_t &amp;InPerm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PermuteVector</name>
      <anchorfile>classEpetra__OskiPermutation.html</anchorfile>
      <anchor>a54cfaf7b0995fc1e98c596aa45c4ee83</anchor>
      <arglist>(const bool TransA, Epetra_OskiMultiVector &amp;Vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiUtils</name>
    <filename>classEpetra__OskiUtils.html</filename>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiUtils</name>
      <anchorfile>classEpetra__OskiUtils.html</anchorfile>
      <anchor>aeff9c0192b912bfff886a53b6169d1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiUtils</name>
      <anchorfile>classEpetra__OskiUtils.html</anchorfile>
      <anchor>a467b098706f4bdde90be7017323aa8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classEpetra__OskiUtils.html</anchorfile>
      <anchor>a9b64cbdf4d44bee030c8135c4d1c8d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classEpetra__OskiUtils.html</anchorfile>
      <anchor>a6ec7476aba98b881b8c732bc4e9acec9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_OskiVector</name>
    <filename>classEpetra__OskiVector.html</filename>
    <base>Epetra_OskiMultiVector</base>
    <member kind="variable" protection="private">
      <type>const Epetra_Vector *</type>
      <name>Epetra_View_</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>ab6acdc1d93561bb34c2982dc74143bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiVector</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>ab52ed71215b3edd248edc5e2aacd1174</anchor>
      <arglist>(const Epetra_OskiVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_OskiVector</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>a1cdd3414de3920030b72bb557f36b840</anchor>
      <arglist>(const Epetra_Vector &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_OskiVector</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>a6536d2590cc08980741756aba11628ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector *</type>
      <name>Epetra_View</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>a64a0b7843eee3e4be8e9e27d3dfa9e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_OskiVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__OskiVector.html</anchorfile>
      <anchor>ab1c7a02e5415ea2a829d88427cdbd4ec</anchor>
      <arglist>(const Epetra_OskiVector &amp;Source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_RowMatrix</name>
    <filename>classEpetra__RowMatrix.html</filename>
    <base virtualness="virtual">Epetra_Operator</base>
    <base virtualness="virtual">Epetra_SrcDistObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_RowMatrix</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a1888703e63626eb9caac41662d612538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ad26ba0ee2d38f507f008a25799ddae9e</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ae0709f998db24f5329f84588aaa0657d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a294b3d9ff2b6bcc865cbddc450effb5d</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a0e1cb1b85472ad149cebf428ef833ce7</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ab1c196d9c9d67daa4e2cacc6b06c54e9</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>aafb6e177be1e2a5013d618ddaa41d4bd</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>af44a0d2296cfbd61a0243b5f47364ebf</anchor>
      <arglist>(Epetra_Vector &amp;x) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ade7cc01b51adbb0fa4f2c9ec19687c09</anchor>
      <arglist>(const Epetra_Vector &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ada10554435f4dc3e68950f49eed110b7</anchor>
      <arglist>(Epetra_Vector &amp;x) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>abf1ecd1ba05bedd2bbb95bc125803a4f</anchor>
      <arglist>(const Epetra_Vector &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ab01e1c9d72a3c55f7c13b83217d49e23</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a4a5d0a2c3fe2339aa484368d3548ef4e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ad3b02208bd87aecf4ea3e7f07ae911d0</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>af2948baac40e00c1ee6e6bcfa3a990be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a01a70b442038b2e3195449f8b91f8d6c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a62b6c2f6990159981e1490680c7ddacb</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a4a6acd2cd0d73ab73857f64e50bb04ab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a1b909816abd48359b8a6e03f3ebec815</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a4fb3fef981abe8f978aa5f44e01c5064</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>af432991c946167e1e0154b3fc8592568</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a2a991e1cc4a6d4f23614e1f14b4232af</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a6f5245dc1ff3866f022b37b5e63bb9a1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a40ffd441a29eb44ab82e0a35b66872f4</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a21fa83fcbfb634664bc7484f5cdb224c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a0e5223c4185baf42667a26ea68ce1e80</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a47aaa8f48e66fd9311f80e8f0ad8df22</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ad80a88d19c06786ab0e21d15cfe259f8</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a598274e1af352dcadee764ee22ba089c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>ae869fadba6b7e0f9712a184b4e4e9331</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classEpetra__RowMatrix.html</anchorfile>
      <anchor>a16bf1224344135ecddad540be2078991</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_RowMatrixTransposer</name>
    <filename>classEpetra__RowMatrixTransposer.html</filename>
    <member kind="function" protection="private">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a5757a343e7c5c383543483077a509266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_RowMatrixTransposer &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>af2d42dd03d4d990c0799c22b1c2a9cd6</anchor>
      <arglist>(const Epetra_RowMatrixTransposer &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_RowMatrix *</type>
      <name>OrigMatrix_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a9b0bc12cd854b6ba495e85657f44dec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>TransposeMatrix_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a9ff9fa2d2951dbbe0d1bdd310f444880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Export *</type>
      <name>TransposeExporter_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a92beca8e5ec5f581e5bd36b0f1ee9114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>TransposeRowMap_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>ab133b885b73b5df14588976ea75fa5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>TransposeCreated_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>ad4abfb29cb283aab506c52de196a8d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>MakeDataContiguous_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a5313d301292bf74c2f2b5854ca7a4d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>aee9cfc3a4a16f0b6bb9e0fc5f60493c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>adea86057481f185968f12c606e10f557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a3642ab004284c7c06325e3b09f87f8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>Indices_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a706aacaf1bf487f974a4bc5ea8b6c7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>Values_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>ae20bf8ca205cf76a02f8908ddd7dd2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>TransNumNz_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a48c2190382410f30fb8e9c11a680a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>TransIndices_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a9927acfd68fe6542d1aeb67c2166ad56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>TransValues_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a189b8c4bda9995dcfa9c8052f153e246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>TransMyGlobalEquations_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>ab67718e1e6d82c20776609be61eba0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OrigMatrixIsCrsMatrix_</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a3a239fb6e8898a7ba2669cd119426d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_RowMatrixTransposer</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>aa32af88361f94b601d5a0fec071227db</anchor>
      <arglist>(Epetra_RowMatrix *OrigMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_RowMatrixTransposer</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a48957e7faefade629c4de200aff628db</anchor>
      <arglist>(const Epetra_RowMatrixTransposer &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_RowMatrixTransposer</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>ad23e96848cb48113679161822b80f34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateTranspose</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a9545abd68f1bf6a3225c48a0dc79c206</anchor>
      <arglist>(const bool MakeDataContiguous, Epetra_CrsMatrix *&amp;TransposeMatrix, Epetra_Map *TransposeRowMap=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateTransposeValues</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a1d14aa579a2ad409bf5785d8caa6e42a</anchor>
      <arglist>(Epetra_RowMatrix *MatrixWithNewValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateOriginalMatrixValues</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a15672107c309ba92f7eaa470450d96d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>TransposeRowMap</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>a3de4b3ca37503f8be17dfa06d75a74d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Export &amp;</type>
      <name>TransposeExporter</name>
      <anchorfile>classEpetra__RowMatrixTransposer.html</anchorfile>
      <anchor>af492bd471cd2a2c39b02f794656557cd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialComm</name>
    <filename>classEpetra__SerialComm.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_Comm</base>
    <member kind="function">
      <type>Epetra_SerialComm &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aef784ffa33914896428f81784fb72fd3</anchor>
      <arglist>(const Epetra_SerialComm &amp;Comm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a7646dc027d1cdb72c2a1feea2ea33cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialCommData *</type>
      <name>SerialCommData_</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a2365ccd0c5cf05bb21bcf7e80d88167c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialComm</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aaffa2dad7202c5e83e47a0146a4bee51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialComm</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a1ecfe71c4c492ee461f2658e772fdf05</anchor>
      <arglist>(const Epetra_SerialComm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a7034cd3c8e697fd96b9e56f17b1710ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialComm</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a1487d8725b2035003231074c190a637d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a93855ac25a957a1fa89362936995cf79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>ac94f1335372d7fea507c8489a1d3c154</anchor>
      <arglist>(double *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a42bde3901f0014d4d5f54008a96ecf0d</anchor>
      <arglist>(int *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a22232ddaf19ea76c5777704a9ddcdc7a</anchor>
      <arglist>(long *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>ae1230912a5a745054043b70127d1be13</anchor>
      <arglist>(long long *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Broadcast</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aad627f1f52581a22f9ecf0f0a58a5e16</anchor>
      <arglist>(char *MyVals, int Count, int Root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a71996e45b95d957ae6e2cbd0f29a2fac</anchor>
      <arglist>(double *MyVals, double *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>ad99956d9c685bb988fce49712c88dbd4</anchor>
      <arglist>(int *MyVals, int *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a31eceb9807925910b004098d9e4cea33</anchor>
      <arglist>(long *MyVals, long *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GatherAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>ae876cfd2cd6173df16a5771e4a889288</anchor>
      <arglist>(long long *MyVals, long long *AllVals, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>af3b48eb8b50ed3e174971c2af52e6c6f</anchor>
      <arglist>(double *PartialSums, double *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a25f721abf7f85b14154c2a7c66e8f17c</anchor>
      <arglist>(int *PartialSums, int *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a3ff8001cdfe83275449105c0ed9ab1d2</anchor>
      <arglist>(long *PartialSums, long *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a451e27b718120aa397b1a85b08cc1681</anchor>
      <arglist>(long long *PartialSums, long long *GlobalSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>abb09046955a8f9a161f494293e86397f</anchor>
      <arglist>(double *PartialMaxs, double *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a8801f15fb26760b8ea970abebcd986cd</anchor>
      <arglist>(int *PartialMaxs, int *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>ad3862b6fe8b3379536ee6b5bcb9432e6</anchor>
      <arglist>(long *PartialMaxs, long *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aebdded90d39b00e7c178172540e5da09</anchor>
      <arglist>(long long *PartialMaxs, long long *GlobalMaxs, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a142bd54278b4f08049c49354e490fd64</anchor>
      <arglist>(double *PartialMins, double *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a0760285828ea36a4770081f8dfee0399</anchor>
      <arglist>(int *PartialMins, int *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a35142dd1897f3ebd2a4c22b1dc57b80e</anchor>
      <arglist>(long *PartialMins, long *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinAll</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a891072938bfc4b8c745b84ec7c335f6d</anchor>
      <arglist>(long long *PartialMins, long long *GlobalMins, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a8c6af8f5a3544f4ed5b11e7f33a3878d</anchor>
      <arglist>(double *MyVals, double *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a321bbf07dcf2edc2887679239e7b291a</anchor>
      <arglist>(int *MyVals, int *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a4265d4f2e2699eac16f45d08c8b07ebf</anchor>
      <arglist>(long *MyVals, long *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ScanSum</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a4c41b51268a4a3e42f09c9fe9d438242</anchor>
      <arglist>(long long *MyVals, long long *ScanSums, int Count) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyPID</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>abc261280cee91c62984ecb8d75942633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumProc</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a7aeaa2ed12b5b3d3ee4fbf54d9146e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>CreateDistributor</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a0275e692d5ae2ebe7f3ed2e0824a9b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_Directory *</type>
      <name>CreateDirectory</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aed1851946b29a60c08ef6c5dcf34cce8</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a7215e9501c00744872afc1027f2ca2d3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintInfo</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>aa297eb3b7515b71c9b27893bde7292c0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReferenceCount</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a8bd7955fcd3b340f77e5b53ed8d84221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_SerialCommData *</type>
      <name>DataPtr</name>
      <anchorfile>classEpetra__SerialComm.html</anchorfile>
      <anchor>a02ca16358dcca56e50f8c0e53f3b1cf8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialCommData</name>
    <filename>classEpetra__SerialCommData.html</filename>
    <base>Epetra_Data</base>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_SerialCommData</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a186f1f0a5ca1e0da12f1faf957eef258</anchor>
      <arglist>(const Epetra_SerialCommData &amp;CommData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_SerialCommData &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a247d561f1776ba582fb8f0aaac9fb072</anchor>
      <arglist>(const Epetra_SerialCommData &amp;CommData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MyPID_</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a9aa9c121c75d55bdbb3fa9991fc69724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumProc_</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>aa54c75d1e983638285e353833633906d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Epetra_SerialComm</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a4d7899af6bae5f8f39cce6bd49f52ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_SerialCommData</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a5bfde22f803c993f08be62101bed25b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~Epetra_SerialCommData</name>
      <anchorfile>classEpetra__SerialCommData.html</anchorfile>
      <anchor>a4a85a4f9b603b6a132522ec5272382cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDenseMatrix</name>
    <filename>classEpetra__SerialDenseMatrix.html</filename>
    <base>Epetra_CompObject</base>
    <base>Epetra_Object</base>
    <base>Epetra_SerialDenseOperator</base>
    <base>Epetra_BLAS</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyMat</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>aa15b4a952b6be28798f0e28cf6a1dfe4</anchor>
      <arglist>(const double *Source, int Source_LDA, int NumRows, int NumCols, double *Target, int Target_LDA, bool add=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a34af037b4dac24cf4aa207632dff15a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>M_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a55f0dea3d746a7b3d14859732ffbdef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>afc4a3f49b235a7cc3e0b1d9f27e0be06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>A_Copied_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a69cd162fe69c4d518e87172910e05351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a32cfd851a7172849795d5383949deda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a33fbc18ae160e4a93cf7fd327c91a21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>A_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a5550bab5885c33d23d5447465a59a663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a25b6640af82723ea24ac7fa826159369</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>aed04a04165ad30553cafe5060cda02db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a6ae69214180b6d38f80823da2f072792</anchor>
      <arglist>(bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a8be095aa5d567da3ecf4bf5cf8ec807d</anchor>
      <arglist>(int NumRows, int NumCols, bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a915b2e1c6b52ccb800378df6adb40399</anchor>
      <arglist>(Epetra_DataAccess CV, double *A_in, int LDA_in, int NumRows, int NumCols, bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a72628cfd25f8dbee68b4385cc2b8b428</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDenseMatrix</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>aecd5f7688933426dced9a01470989725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Shape</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>abc46dc9b724d39acec6fbf8412900f47</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reshape</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>af2323a48c6dc5ee395629da1876d94a1</anchor>
      <arglist>(int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>ac60743824e617f2aba38d1d107d15f0e</anchor>
      <arglist>(char TransA, char TransB, double ScalarAB, const Epetra_SerialDenseMatrix &amp;A, const Epetra_SerialDenseMatrix &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a50f76abe6d256d66ad4d4c64ccbdef47</anchor>
      <arglist>(bool transA, const Epetra_SerialDenseMatrix &amp;x, Epetra_SerialDenseMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a10e1c45a4501c4eb328745233297ec85</anchor>
      <arglist>(char SideA, double ScalarAB, const Epetra_SerialSymDenseMatrix &amp;A, const Epetra_SerialDenseMatrix &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a8b773082bf002c8a660c8d5511d94183</anchor>
      <arglist>(double ScalarA)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a502aadf18d9c7fff7e0dfbe6570888be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>abc252166847d9bb219ea635eb7e094b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>aa21f31b6af01e6323a52b91f47858ec7</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a923010207e0008838d4780d3148113e9</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a2c44bd2e7419544922990ba8cd6453e9</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>ab0c0adb04d76f4f6ef53e7c7e96956bc</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>acc2516251d8573d3852718b65ddb502b</anchor>
      <arglist>(int RowIndex, int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a7ad7c9251dff69e57a223ba1e63b8f19</anchor>
      <arglist>(int RowIndex, int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a435449d48ed1d44d4eb8c687139b776b</anchor>
      <arglist>(int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a83222b81ad5cd80afdb0d9a4bf0df4ce</anchor>
      <arglist>(int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a83020f8b3d46c2283512aed27baaf056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>M</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a46f715a26bd73adb701a8227b1f71494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a05d5e753c5fb335ef7030098a141bded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>aa1e69b1e7ac64b361bc7a255d95aed67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a35002ca430dcf50e689a8f0e96e78aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>abffb8c7b57e32a6d4412cc5b433a7e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a7fd3b587918b47ef71a93c6d3e08c74c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a145726c7b886035c474416d9bda65fc0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>OneNorm</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a38ad9e05fbf7f45a2d0890eb6543c4f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InfNorm</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a3470a87f6a9b72d1f16f15c61686f779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a9e58ebb85be2c890077e59c3ff91414b</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>af16075e1278b5831f57b1d8ea803e452</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;Y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a5b8f4a74549626e644453f659500bf6b</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;Y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>af883c19a43874bf02a15107640125876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a84fb65f9351d2cc1eefeb1635a8325d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>ae68a72c5dfa23f7305339dc3c6b147c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RowDim</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a62f410f68e7bdea5fffd431492ca730d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ColDim</name>
      <anchorfile>classEpetra__SerialDenseMatrix.html</anchorfile>
      <anchor>a84b67cc48cab30cdbed5f564cb7bdc99</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDenseOperator</name>
    <filename>classEpetra__SerialDenseOperator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDenseOperator</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a4e6dc0908c2338c10b739c9e8e70f8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>aeb9d3890d58ab13fb1e30a7e2737804e</anchor>
      <arglist>(bool UseTranspose)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>acf0e9b75b95321d3ccf4a2723e686208</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;Y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a8591454b9f31b1db814f39a2d694f53a</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;Y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a51dd55d75eaabc1a737ba1154687f0df</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a7a6f1ae535e7e0313c39427dc12bf368</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>ad81be0ef89af2e0967ada96304a93451</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a393221035b4e608f7a73ec2873a14af9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>RowDim</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a83f851b8db3f36ebd9f96b0c1f7242e9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ColDim</name>
      <anchorfile>classEpetra__SerialDenseOperator.html</anchorfile>
      <anchor>a1e092dd0d0b854867e2274bc3bbbe335</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDenseSolver</name>
    <filename>classEpetra__SerialDenseSolver.html</filename>
    <base>Epetra_CompObject</base>
    <base>Epetra_BLAS</base>
    <base>Epetra_LAPACK</base>
    <base>Epetra_Object</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateWORK</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a4034e65e7531a40346fc17360d7ac23c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateIWORK</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a322e8f701459bfdec4d1ec03313bdae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitPointers</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a59bca31c3d3c13f6e4aa97cac7107685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeleteArrays</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aab2d45a49d20e2a3ed99d6ca850345a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetMatrix</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ae6d48e7dfbc1d4f35154399300f09e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetVectors</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ac272d40f00b30215e7cfb9c95b692f7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Equilibrate_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ad39efb318cc8fe47362364135e44c3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ShouldEquilibrate_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a5b61609b30e0642d627ebb6a8d046710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>A_Equilibrated_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a7f22a3c9168badfac25e3772eea23ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>B_Equilibrated_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a19e5ec110a5f6e74bf6f43f466b2db4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Transpose_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a0aab6f6e663cfcd9d83d28e662e4ff79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a13ada66b4f617306bc6964d087ed79b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>EstimateSolutionErrors_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aaad0e91563b43ab4f20d198acf9c69d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SolutionErrorsEstimated_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a7916e251cae9a4c103ecb5139d8ad917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Solved_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ac943d046cac1337a3a4ffd61aaa173f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Inverted_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ac56b1b008e756cd2ef98c40dbb5e1c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReciprocalConditionEstimated_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a541327ccba38f40500c64c2206c73ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>RefineSolution_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>afc5ec218ca86c694320436515465cfde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SolutionRefined_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a60fbf23359ab670a8dfaea981051657b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>TRANS_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a03425e37c69a3bcb5bdd640e5270e2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>M_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a1946908487ea1a91ffed16ac7a0372f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>af338c64fed8b7918d986d95b80b5449b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Min_MN_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>af11de4e43f1ed393ca73a3cbcf687767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NRHS_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a75a5f2c66b8049c5c9ec47408d9d7d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>acbc9ed00d6958db73f06b2210719c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDAF_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a6a54d9b13bbbfe033a45e08f039dcc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDB_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2d18619c8a6789fcafea9061ad75e10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDX_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a62f14bb43442244689971ca377bc82f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>INFO_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aa4be0ceecd51236911a7ed174e56b7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LWORK_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a022396d140b7168990e030dccf165e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>IPIV_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a17396fdf3ada7c8b20efc377e815387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>IWORK_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aeb4adf5fe3f4bf1dce07fe5d4f794c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ANORM_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a9cbe61e3db87558527ae0fb5bce1f0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>RCOND_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ab6b4e3fd8574ebee901ddcdcdb13ebae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ROWCND_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aa65bb122adb579df4b99742168e3e97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>COLCND_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2ec73d7a1e80f8847beaafb22b63bf4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AMAX_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2efcac1e66ad8cf759d62a9da59a92d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Matrix_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a481c689c9daabae62a5751e743e145c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>add1ed36be647c7e19d1c2ffc7bf0144b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a78ea61ea6e05df655c04bd2ee1f45dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Factor_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a357ae1997446c840dab9669465a2bf3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>A_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>adfc8e0b6a9550a9ecc9230ea6841b9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>FERR_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2d03577a5b6f45a0b4407e14573cf09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>BERR_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ae472488048f676bf8d2de41e66eb07c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>AF_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aaebb6446bf89d7000f45a6420302d080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>WORK_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a61a2f027b16e2735625576c88122440a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>R_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aeb6ca5fdc176db5e4fea80a31d3600c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>C_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ab5451cbf9a2e3c1ba08842b49c3640a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>B_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a91cc5481540e198fa68a85d9211f99cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>X_</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a4a7badd77ae69e7771c8ee8baa7263c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_SerialDenseSolver</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a40a6a2ed142243054079c47f1fc9231c</anchor>
      <arglist>(const Epetra_SerialDenseSolver &amp;Source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_SerialDenseSolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>abee644b1179b8f982549907ea9fb76f6</anchor>
      <arglist>(const Epetra_SerialDenseSolver &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseSolver</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ad57922a39cdc1b83270d0afd54743d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDenseSolver</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a74d4821dbd892a65d1e831a358345b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMatrix</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a463db09d67b55f002d09b190233782f7</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetVectors</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>afe1e21cd4c5556318154c30d8ae523eb</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FactorWithEquilibration</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>afdcdce6b9d0a5eabbb3f2646675beb64</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolveWithTranspose</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a778bde814992f93ecc6db73d93c8d223</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolveToRefinedSolution</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a4405659559ec0099ed673bb0530dde7c</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EstimateSolutionErrors</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a686f12671fd1fae79a58b71324d4fc78</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Factor</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>abc48dcfe32dc80175f65db9facf8c240</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a1a84c3c2989e13d48417712eb6847a70</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Invert</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aeb894a7a57214cb1bfe6686175366492</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ComputeEquilibrateScaling</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aaf0dcb9503c7ff14346998f2e3d116c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>EquilibrateMatrix</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ae82ab853e65c9b961bd682e5c3b1e728</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EquilibrateRHS</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a251e7d0664d55ad25376adf81a12e41a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyRefinement</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a603850d84ffe41d7ece05ee3b848c60b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnequilibrateLHS</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a83f21e67939c7f1f4e63a66e1221cdf3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ReciprocalConditionEstimate</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a5b2aaa45cbdf18275ecb0703aa651c40</anchor>
      <arglist>(double &amp;Value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Transpose</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a4fad947b197aee9b59afa4f5269dd690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>acdb233a5bf41eaf162117bbc738ad2b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>A_Equilibrated</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a826823776bd79fc2dd93eabbb3e5fdb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>B_Equilibrated</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aeeb5eaf4a3a0dc83634e799d8e9124b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ShouldEquilibrate</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ab3f4036471925643a18538f6e2e663d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionErrorsEstimated</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a65a0d862dafa3921329964c02bd9c596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Inverted</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>acec8cfbb9961ab0103b7644fc0fbfac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReciprocalConditionEstimated</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a0aa8747386909cb8e32971f7458401c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solved</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>af81a52b499f6528686d83d3367e4bc79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionRefined</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a416b849e1c6cd500393361c0daf1624f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Matrix</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aeaf4988a9f9762f458790265b38638e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>FactoredMatrix</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ac5417c130601a2d5457c28a545d5a57c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a9d4c9279ad2a36fd0fe9a9aa764085b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2f1eaf413646e37c1aeee6e690d4cca9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>M</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a8a736c0a572cbdaaa28dbc06bf9adafe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>acbff77b0b9aacb7f579336478dbe2e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aee86874369f7e1017afe56cd18fee703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a615c2e9dcdd89c83353a6a015eb5e1a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>B</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a918f23b02882e2acc193b5f955f5e816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDB</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ad766d801ceb68bcf8ae97ec6afce0e7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NRHS</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ab85f87e50f2b49a6edcb286a6e08f2e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>X</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a2982f9e1b86e90a3258261cd000e822a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDX</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>abb9fa4ebdea60fa251bf92e32920e441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>AF</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>aab24fdf16c564f2632881d3628fd59fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDAF</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a4785c71bacc969289eb3d89518fdddd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>IPIV</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>afac89aa56187a2c4e78039344f7ed93b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ANORM</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a852dadf313b32ac4833385585731aed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RCOND</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a69182c569cdbdaed3c38e79b2b5c070a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ROWCND</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a681ab3cb5d4a51b209f0a59af3e07492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>COLCND</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>af7982c6ecea9d39e6cba075ff6c4d504</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AMAX</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>add6cb28cfd28014db4b0117cdf267e55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>FERR</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>ac569509fa3c61bd2b775fbf859a731b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>BERR</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a8634d79cd265cc7c764b03e1fccd53ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>R</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a3a3e4739c277f4ca1287b431a7a0577b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>C</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a018305434f59a1da84614f2ae8fb0339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialDenseSolver.html</anchorfile>
      <anchor>a33e90a8cbd745e80c0216b18fdba252a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDenseSVD</name>
    <filename>classEpetra__SerialDenseSVD.html</filename>
    <base virtualness="virtual">Epetra_SerialDenseOperator</base>
    <base>Epetra_CompObject</base>
    <base virtualness="virtual">Epetra_Object</base>
    <base>Epetra_BLAS</base>
    <base>Epetra_LAPACK</base>
    <member kind="function">
      <type>void</type>
      <name>AllocateWORK</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac6b9f6e572c434a60b0396b229933fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateIWORK</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a399a9b5aa8539f80e07e9ce949e4464c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitPointers</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aa6c1892446700be58fd21b0ed3faab06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteArrays</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aabf62569283b172ee1fec4fbe3e09632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMatrix</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a8c3eba2ad2ef8d916f06e4418b8812f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetVectors</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a75ec5b896020cad25be7c2a8f127d282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Transpose_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a57ed4bb76d3f71db9f8552ee9aef8aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ad36608eaf53274c2d6a9878494d6cdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Solved_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a5f8b0ae8f209aaf9971545c26a07a3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Inverted_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a39dd62e8898c41adb6381ced83484c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>TRANS_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a6b7a18942577e908b9f7a9694b72109e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>M_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a5e302188de64c02d34d1f1f247aee728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1453137cb977c20f384cb41d0f269667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Min_MN_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a54d0578581d00c958fdd7d24fe8ae944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NRHS_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a7648895718ffda774a1f7456dcf72535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>abc6becd07563e20e6658fd199ff1f946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LDAI_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aae038e773c97905c28d95bf0fcf259e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LDB_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ae86e45265ea1b499c4c728cff014acad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LDX_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a3cacd9d5df8c00ab61885bbd7e6e9229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>INFO_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a4f15bf8805c44e2b2a25e18a3a2be426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LWORK_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1fa0389a1993f185143af7486112f61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>IWORK_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a4c99dca4f34de3cf8c44bb04ac8c43b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANORM_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a9e7a0bd7d4dd1393ed76d35cb9d872b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Matrix_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1fc54e1ee5f0ba96b6826b1dc1d383fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a850c117b2e83143069507a1e03e59625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1bd8b44d786fe6fe8cdfa2bba04fb43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Inverse_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1f20a265f5a5656ab056eae8ed2fc0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>A_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>add03b1f7205ce1934e4510c838736942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>AI_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a8cdf8638169fe0068b09452a5ec3eb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>WORK_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a311615c6becece8246fa237efaa76822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>U_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab5629abc6415c92cd27c4e4498d86ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>S_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab55206db4bfd44fb9b0117b586024b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>Vt_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a9f3c430d2c148fb3be0985c12663fcc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>B_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a24dd2eb2e132b12962fbb043cdf44c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>X_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aa6322985b8b61aa70af5f5b562759fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a23b280ed7c13a2df79056948fdaef28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_SerialDenseSVD</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac88b366668c4d17408466bec41529a76</anchor>
      <arglist>(const Epetra_SerialDenseSVD &amp;Source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_SerialDenseSVD &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a67eb4c3adef390cd53e3f0f1410d318f</anchor>
      <arglist>(const Epetra_SerialDenseSVD &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseSVD</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>abc379816bafc2fc2a538ebaa1019acfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDenseSVD</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a7c44cf54da3bd4221f007831825e612f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMatrix</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a919cd7ac178ff7bd6ef889ca9f2a3c4c</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetVectors</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a542c2f4fa0708ada2eaf9038d674bb76</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolveWithTranspose</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab2b52b6d186d9a285e8aa9b7cdb5204b</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Factor</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>af73cfed3b16531a97ab373119f4e5ee5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a367daf8093025d99b5d79bad2ed94758</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Invert</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a6dc0a61b4b0e51e5260c209821244ea8</anchor>
      <arglist>(double rthresh=0.0, double athresh=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Transpose</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a22983d1900332f6d0bbcf16184cd1ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>af742206e5e89f3b47740f3509f7b9f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Inverted</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab79a36f504f0df1f2f3e649d8f79ade2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solved</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>afacd0c1a7ec9dd2930db85e367540b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>Matrix</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a33c974b92e01574b9f287034470ef7ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>InvertedMatrix</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a4ab1287b47931ba85ae001f2b6bad01a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a2357e708944bf92eafb028ab9f8e2944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac1f811e4b7fe325f4f819b668ec7ff23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>M</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac201bc1ad6a3d56f15547dea6443b662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aceb2104e6f4cd05c0ca629af92efd686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ad6e7b1fa643aa67e33a16dc2bb88ff66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a43832d96b0133e91eb4a3ab897feaf2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>B</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aaf7c56238e7c0d619920c4c837c2b0c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDB</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a3393d47e5f24df517fd40ec3017ef1c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NRHS</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a4bbf71fd657a55b65254bdf0c7efcc20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>X</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a09ce485f6e56cf0be7e1c58cfc90eac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDX</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a4b3280e2536028202464451f9282c018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>S</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ae2be5ce918b0eb762b4dcaae45759054</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>AI</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1bc26124d807b0ab0548763bda406b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDAI</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac692a65e5a214733195ee1fd1e929ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ANORM</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a33eb0551f5913500c80cd8961ec1678d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a24bd2264ad85d6db77d5085446111e96</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>aeaa5ee74cb591e1f2ed857bd2b92b1af</anchor>
      <arglist>(bool use_transpose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ac465b02c2aac764f64da56a9f0e900df</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;Xmat, Epetra_SerialDenseMatrix &amp;Ymat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a65d72cd6dd2088c0770d07de9ab8e988</anchor>
      <arglist>(const Epetra_SerialDenseMatrix &amp;Xmat, Epetra_SerialDenseMatrix &amp;Ymat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab987c9bf0bd8bc190eda78546e6cb113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ad39d16161a6608653d5b13037c675467</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a02790287bf403a3caad9c565ac8c6018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>ab9e4c3b687dfa0ca966f24bd5024dcd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RowDim</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a9b432d7486e18c0dd8ccfde22f6cbbcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ColDim</name>
      <anchorfile>classEpetra__SerialDenseSVD.html</anchorfile>
      <anchor>a1beb55915a1a172b9984ed2c19990354</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDenseVector</name>
    <filename>classEpetra__SerialDenseVector.html</filename>
    <base>Epetra_SerialDenseMatrix</base>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseVector</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a4573d58e52815b263a06d3eb12003d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseVector</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>aeaef40c1550d1815aff4c5a2297114ed</anchor>
      <arglist>(int Length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseVector</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>ac441f9e3229f426177c34f42a0459a3d</anchor>
      <arglist>(Epetra_DataAccess CV, double *Values, int Length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDenseVector</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>af0488e6e797db3737c7c02e12bd88bda</anchor>
      <arglist>(const Epetra_SerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDenseVector</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>ac474218ecc3a121ab763e2b40a66417d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a3248d2f17ad9ab3dd443b96f8f5fbc9b</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Resize</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a7f92a61e15a49e85dbe257a546735c16</anchor>
      <arglist>(int Length_in)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a28ce0ad0af61fe19d09f2889b6e72d9f</anchor>
      <arglist>(const Epetra_SerialDenseVector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>ab554c932e058380d31e7ba47c381564a</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a6dfb18e288ccdb0f944795d55e14c31c</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>ac9e57a1dcfe3c76f9d3112e371f91276</anchor>
      <arglist>(int Index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a180473f6e29d0e255b6e3a76a25ebce3</anchor>
      <arglist>(int Index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>aac6aad021fa439f54c2a4e5dbd95b802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a719bb24bad0c82c75cab60d29f3f2d31</anchor>
      <arglist>(const Epetra_SerialDenseVector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm1</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>af1273c0b24e78f3bc6cca10646b370c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm2</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a723bf86fa48d425f213f8ff2bd3ae9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a0e5a49c3ef915c3df055dad561ea7116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Length</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>abc68f1a6d94c5151a168ca6efe131ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>Values</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>afe3388798db8c2d7d3d31c0e80c1ef46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>ab4b2295454e4656b16b1527f8c92a417</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialDenseVector.html</anchorfile>
      <anchor>a8aee63fb40dfa549348d7d6e6530fce7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialDistributor</name>
    <filename>classEpetra__SerialDistributor.html</filename>
    <base>Epetra_Object</base>
    <base virtualness="virtual">Epetra_Distributor</base>
    <member kind="function">
      <type>int</type>
      <name>CreateFromSends</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a5551c7683f60a8e173aef1c473f6efa9</anchor>
      <arglist>(const int &amp;NumExportIDs, const int *ExportPIDs, bool Deterministic, int &amp;NumRemoteIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a341991a9d80b699ac47e6891b719c59d</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const int *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, int *&amp;ExportGIDs, int *&amp;ExportPIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateFromRecvs</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a025844ba15643138641923a12393efe1</anchor>
      <arglist>(const int &amp;NumRemoteIDs, const long long *RemoteGIDs, const int *RemotePIDs, bool Deterministic, int &amp;NumExportIDs, long long *&amp;ExportGIDs, int *&amp;ExportPIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Do</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a65322db44c1a5ad8e764be8517a52751</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a5ff929d065a3d8898ca954c79316a3b0</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>af5b4ba13f56bc4bf0ecc060cf88aca57</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoWaits</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a532959c837fbc0d5595690e5256cb59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>abe13445ac305fb3dbf239962d2321177</anchor>
      <arglist>(char *export_objs, int obj_size, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverseWaits</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>ac5043979eac78d7a592be431db0cbd74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Do</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a134cf624485edfb29c201eeb22c7c172</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReverse</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>aafc37243785b61531e191b14324a1d47</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoPosts</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a18b651ae6351fd28ac7f0d38bdb3c35c</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DoReversePosts</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a0bff4a06bbafac77b83098eedfdcf369</anchor>
      <arglist>(char *export_objs, int obj_size, int *&amp;sizes, int &amp;len_import_objs, char *&amp;import_objs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a5fd1e81c69f6d031de0ad57434f7449f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nrecvs_</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>aa312459f9cfa86424af76d06864bbf85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nsends_</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a16b47e12048ecf2932dbaee52475dbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDistributor</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>afcff7adadb2131acc81eec2a9f500466</anchor>
      <arglist>(const Epetra_SerialComm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialDistributor</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a029d5d28989c72bd99013e4fb14b44b9</anchor>
      <arglist>(const Epetra_SerialDistributor &amp;Plan)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>Clone</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>ac05aeba42a2180791c21761f5d1e059b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Distributor *</type>
      <name>ReverseClone</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>ad5660212d2f236dc36c2b2aa16fa8c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialDistributor</name>
      <anchorfile>classEpetra__SerialDistributor.html</anchorfile>
      <anchor>a5bd00997ff4f4609b882fe6bd8a4a90c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialSpdDenseSolver</name>
    <filename>classEpetra__SerialSpdDenseSolver.html</filename>
    <base>Epetra_SerialDenseSolver</base>
    <member kind="function" protection="private">
      <type></type>
      <name>Epetra_SerialSpdDenseSolver</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a2d48484d8d8768924b49de3807510b7e</anchor>
      <arglist>(const Epetra_SerialSpdDenseSolver &amp;Source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_SerialSpdDenseSolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a38570d743fcc6869b67e1bb842abfce3</anchor>
      <arglist>(const Epetra_SerialSpdDenseSolver &amp;Source)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>SCOND_</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a85b6730b9a8a78d4a8baa8b9dc15a065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialSymDenseMatrix *</type>
      <name>SymMatrix_</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>acd157eed405fcd9def9f256495fa1aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialSymDenseMatrix *</type>
      <name>SymFactor_</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a3ebcc4da7012ce94508a46ec909035ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialSpdDenseSolver</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a517a1e53b57fadd26bdd1d94ad795f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialSpdDenseSolver</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a860a9a5f147eb1a8163aa18524a8c711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMatrix</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a4925f524b46f1387599943b6a5bbb19e</anchor>
      <arglist>(Epetra_SerialSymDenseMatrix &amp;A_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Factor</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a3128531231c288e62c50d4fa93b74560</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a2e51d87a26883e761884b62462ff1eba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Invert</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a1d283c8f86e592c5e6d536b75fd3cf10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputeEquilibrateScaling</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a88f6d517ce1cc713582909b24be90b79</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EquilibrateMatrix</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a66fba56ebbf12230e5e3445e545b804c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EquilibrateRHS</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a4e5f368967525087466aab470d28ccee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyRefinement</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>aee6ec9b1614f5debe082e69ab67a88f8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnequilibrateLHS</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>ae30f3c1d4ca4cc22ddb434af0d30d06a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReciprocalConditionEstimate</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>ab1978ff963c5afc0dee6997ff37cdd5c</anchor>
      <arglist>(double &amp;Value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldEquilibrate</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a3d7ecb7ae8a09d915c3b270a90511c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialSymDenseMatrix *</type>
      <name>SymMatrix</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a1eaf778b7fa190f9b2b6822f7fc93fd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialSymDenseMatrix *</type>
      <name>SymFactoredMatrix</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>ab276866a21aebff4a6c006a057a52e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SCOND</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>a5f1ac14a1e01cf6eb072f888ae267280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AMAX</name>
      <anchorfile>classEpetra__SerialSpdDenseSolver.html</anchorfile>
      <anchor>abeb125c9bd599a78e322c95afb091527</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SerialSymDenseMatrix</name>
    <filename>classEpetra__SerialSymDenseMatrix.html</filename>
    <base>Epetra_SerialDenseMatrix</base>
    <member kind="function">
      <type>void</type>
      <name>CopyUPLOMat</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a1af86a72b5c63d0c9d3c1de898715218</anchor>
      <arglist>(bool Upper, double *A, int LDA, int NumRows)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Upper_</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>ab59293d613c617b62242bdf940d48e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>UPLO_</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a11a9711e74d43186231bfd59fe7f3ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialSymDenseMatrix</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a23afc32e60599e36f0c4184e5369f0e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialSymDenseMatrix</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a721e9c9a9ae91120885dabb43cd4c395</anchor>
      <arglist>(Epetra_DataAccess CV, double *A, int LDA, int NumRowsCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_SerialSymDenseMatrix</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a0050875813e7ae32efb0c32bad2f9860</anchor>
      <arglist>(const Epetra_SerialSymDenseMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SerialSymDenseMatrix</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a44e218332826c233611b7f9ebdf41957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Shape</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a6d25c931341d0e22f6c9c5f4a54b0d3e</anchor>
      <arglist>(int NumRowsCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reshape</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a17f0e38af4bb6354e2379f24175bfd31</anchor>
      <arglist>(int NumRowsCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLower</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>aa661d252e1cc76a5c71aa71a47b05ba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUpper</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>aa30dacd619f71538c77675bd397f1459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Upper</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>af3155a01243bc2b3fd5ca4638b748aad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>UPLO</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>acc5b5af4209a975be9827bd0ac7b5da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>aec8794680e30961570b7d29f4908b7b4</anchor>
      <arglist>(double ScalarA)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>ad5f3796e3c684fc209d86fae09346e75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a716955c34b951c0c3d65f865107071e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>OneNorm</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a08eefc2626e4fccbc3dc27b4322374e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InfNorm</name>
      <anchorfile>classEpetra__SerialSymDenseMatrix.html</anchorfile>
      <anchor>a7a9675d18718f400c8a5e9dde506bef8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_SrcDistObject</name>
    <filename>classEpetra__SrcDistObject.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_SrcDistObject</name>
      <anchorfile>classEpetra__SrcDistObject.html</anchorfile>
      <anchor>a9f7ce0515cfecef2d90543d0c572d3bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classEpetra__SrcDistObject.html</anchorfile>
      <anchor>a1c2d2949d972d70f8732c5f4b0e8152d</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Time</name>
    <filename>classEpetra__Time.html</filename>
    <base>Epetra_Object</base>
    <member kind="function">
      <type></type>
      <name>Epetra_Time</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>abd57e7afa50d6e5801d4b83c03ee3383</anchor>
      <arglist>(const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Time</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a8ae79b7de565e67b5fd0a06872a8317f</anchor>
      <arglist>(const Epetra_Time &amp;Time)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WallTime</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a6528f5bc504d376893c97ad2d80e3d42</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetStartTime</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a9a347630f131d1f3ded19a8e2bf73512</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ElapsedTime</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a70fa2c7b522c38efc12e118682a5066f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Time</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a1c69705f7695fbd12065a8c5429606e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Time &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a5ad6671bc9e68fb14783c439065168f9</anchor>
      <arglist>(const Epetra_Time &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>StartTime_</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a3da36233c7439fca98395c4ba3d6042e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm *</type>
      <name>Comm_</name>
      <anchorfile>classEpetra__Time.html</anchorfile>
      <anchor>a0edd2b343d292be959cf7d21771e101c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Util</name>
    <filename>classEpetra__Util.html</filename>
    <member kind="function">
      <type></type>
      <name>Epetra_Util</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a105a6146821c391071b6633c74b4bd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Util</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a444cb14d7178ef871ff1012f3bf22603</anchor>
      <arglist>(const Epetra_Util &amp;Util)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Util</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ab5bcb626c9c77b3038ad7a6734d371ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sort</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a74c1e3b7b0343079cfe93d779898f8e1</anchor>
      <arglist>(bool SortAscending, int NumKeys, T *Keys, int NumDoubleCompanions, double **DoubleCompanions, int NumIntCompanions, int **IntCompanions, int NumLongLongCompanions, long long **LongLongCompanions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sort</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a846a910c894e7bfaebc6b119c994e267</anchor>
      <arglist>(bool SortAscending, int NumKeys, int *Keys, int NumDoubleCompanions, double **DoubleCompanions, int NumIntCompanions, int **IntCompanions, int NumLongLongCompanions, long long **LongLongCompanions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sort</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ac27cd9ea65dcd0bb05e290c30325e7cb</anchor>
      <arglist>(bool SortAscending, int NumKeys, long long *Keys, int NumDoubleCompanions, double **DoubleCompanions, int NumIntCompanions, int **IntCompanions, int NumLongLongCompanions, long long **LongLongCompanions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sort</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a7e5ea118f4d6b5572cb9a34729dcea51</anchor>
      <arglist>(bool SortAscending, int NumKeys, int *Keys, int NumDoubleCompanions, double **DoubleCompanions, int NumIntCompanions, int **IntCompanions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sort</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a854fc53baf23b5875e57adfb9c6f95b8</anchor>
      <arglist>(bool SortAscending, int NumKeys, double *Keys, int NumDoubleCompanions, double **DoubleCompanions, int NumIntCompanions, int **IntCompanions, int NumLongLongCompanions, long long **LongLongCompanions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Epetra_Map</type>
      <name>Create_Root_Map</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a58f3745a2e8a71d8ab6a3af6e74b622f</anchor>
      <arglist>(const Epetra_Map &amp;usermap, int root=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Epetra_Map</type>
      <name>Create_OneToOne_Map</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>af53c13c0fd76fb48b10e1e6fe384577b</anchor>
      <arglist>(const Epetra_Map &amp;usermap, bool high_rank_proc_owns_shared=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Epetra_BlockMap</type>
      <name>Create_OneToOne_BlockMap</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a37739d1c7676910b3c0abd0c90317c37</anchor>
      <arglist>(const Epetra_BlockMap &amp;usermap, bool high_rank_proc_owns_shared=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>SortCrsEntries</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a16e0c4e2a55a9167d93798ec3322d61c</anchor>
      <arglist>(int NumRows, const int *CRS_rowptr, int *CRS_colind, double *CRS_vals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>SortAndMergeCrsEntries</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ab175c8060ab7f27e816d0b33800348b5</anchor>
      <arglist>(int NumRows, int *CRS_rowptr, int *CRS_colind, double *CRS_vals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPidGidPairs</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ab3dd71ec80b3eea3d672d7c4c9052ef3</anchor>
      <arglist>(const Epetra_Import &amp;Importer, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;gpids, bool use_minus_one_for_local)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPidGidPairs</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a4e10a073d8ed00d49039ba3b82585ab3</anchor>
      <arglist>(const Epetra_Import &amp;Importer, std::vector&lt; std::pair&lt; int, long long &gt; &gt; &amp;gpids, bool use_minus_one_for_local)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPids</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a5a2444e3e8ad943139afff65455c8eb9</anchor>
      <arglist>(const Epetra_Import &amp;Importer, std::vector&lt; int &gt; &amp;pids, bool use_minus_one_for_local)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetRemotePIDs</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a5e6ba6b2d0a9006180200bb5e08c792c</anchor>
      <arglist>(const Epetra_Import &amp;Importer, std::vector&lt; int &gt; &amp;RemotePIDs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Chop</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ac8a1e5bd16a0861624c2c6c80e450008</anchor>
      <arglist>(const double &amp;Value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>chopVal_</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a52b140d8bd51d9c7127384086d1548e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>Seed_</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a1cc8696353d89b726aad562aa781066d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>RandomInt</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>ae2818dc7d2bcee7bae1a793fd34ce7a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RandomDouble</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>acb506d4b5573d4e2d549c97289ec9fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>Seed</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a51900f25d542ee4e58250bfc7676bff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetSeed</name>
      <anchorfile>classEpetra__Util.html</anchorfile>
      <anchor>a0e2a9edbb54d876e8f4f10321ebf181d</anchor>
      <arglist>(unsigned int Seed_in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_VbrMatrix</name>
    <filename>classEpetra__VbrMatrix.html</filename>
    <base>Epetra_DistObject</base>
    <base>Epetra_CompObject</base>
    <base>Epetra_BLAS</base>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeleteMemory</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad43a2044d225839c28d67773ed3e3889</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a7a5fa964bd7820bf7e386f57fba20f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetAllocated</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a72a245fc8ed0e15fc69b5e2faea07f32</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Epetra_SerialDenseMatrix ***</type>
      <name>Values</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>afcb3b93d6e9f0120cdff86e55f78153a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DoMultiply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af05d3cd021b99c91697f7ea4e6cbaf7b</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DoSolve</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a53b22e1a31c69b8167643361f18ae1ec</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDefaults</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1cc6e44f928e99e1c12a72d536841043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ada0778a0b6f89097ed1e1a10dbb4e365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BeginInsertValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a9971667399dc6678cf832568fac243cc</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices, bool IndicesAreLocal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BeginReplaceValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aafc7330847eb1b623b07cde77bfd2998</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices, bool IndicesAreLocal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BeginSumIntoValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad3eac65d59077199f54bf842f3a4db64</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices, bool IndicesAreLocal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetupForSubmits</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>affbcdf334789b8bce128cfdab264f520</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices, bool IndicesAreLocal, Epetra_CombineMode SubmitMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>EndReplaceSumIntoValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae3395bd9b49089e05a4fe317de7716f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>EndInsertValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa1cd26b5d2f042a3f147a343dac8cf28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyMat</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>affd5d2ff12194bb001275780bf8727e2</anchor>
      <arglist>(double *A, int LDA, int NumRows, int NumCols, double *B, int LDB, bool SumInto) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BeginExtractBlockRowCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a894ca6bd47654fe21ab18263d4a71b2a</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, int *ColDims, bool IndicesAreLocal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetupForExtracts</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae638e7d05bf00a88a3171d101a0a149c</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int NumBlockEntries, bool ExtractView, bool IndicesAreLocal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ExtractBlockDimsCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1176145988ee526847f43f32c131c429</anchor>
      <arglist>(int NumBlockEntries, int *ColDims) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ExtractBlockRowPointers</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab0316c1cc34c15b8117ee77501e5cd59</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, Epetra_SerialDenseMatrix **&amp;Values, bool IndicesAreLocal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BeginExtractBlockRowView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa6a72da2e941794ef7e14b13227eecc3</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int &amp;NumBlockEntries, int *&amp;BlockIndices, bool IndicesAreLocal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyMatDiag</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>abe72145e92cc898fb68c18fafabcf09b</anchor>
      <arglist>(double *A, int LDA, int NumRows, int NumCols, double *Diagonal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ReplaceMatDiag</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a41a1ddc46df7cc240f6ad8eec15f7c38</anchor>
      <arglist>(double *A, int LDA, int NumRows, int NumCols, double *Diagonal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BlockRowMultiply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3b5dacbf0d7eb85f3b6b19b511ccf2d2</anchor>
      <arglist>(bool TransA, int RowDim, int NumEntries, int *BlockIndices, int RowOff, int *FirstPointInElementList, int *ElementSizeList, double Alpha, Epetra_SerialDenseMatrix **As, double **X, double Beta, double **Y, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BlockRowMultiply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af9af4e4ad9ade46ff680e224bcc45f69</anchor>
      <arglist>(bool TransA, int RowDim, int NumEntries, int *BlockIndices, int RowOff, int *FirstPointInElementList, int *ElementSizeList, Epetra_SerialDenseMatrix **As, double **X, double **Y, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FastBlockRowMultiply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a51da33a1d20c08770c043949dca7e512</anchor>
      <arglist>(bool TransA, int RowDim, int NumEntries, int *BlockIndices, int RowOff, int *FirstPointInElementList, int *ElementSizeList, Epetra_SerialDenseMatrix **As, double **X, double **Y, int NumVectors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>InverseSums</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aaca7683177510739e7684f7b054ecc16</anchor>
      <arglist>(bool DoRows, Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a66b70eca72fede7d99eb3f0ba6abdc9d</anchor>
      <arglist>(bool DoRows, const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BlockRowNormInf</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a90785c5fda606082b31ef0d2eee4eb09</anchor>
      <arglist>(int RowDim, int NumEntries, Epetra_SerialDenseMatrix **As, double *Y) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>BlockRowNormOne</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a410537d76c8e879c71c366ec4e81f3e9</anchor>
      <arglist>(int RowDim, int NumEntries, int *BlockRowIndices, Epetra_SerialDenseMatrix **As, int *ColFirstPointInElementList, double *x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetStaticGraph</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae1f9838b1e138619bb5238e022c24446</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CheckSizes</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a368293bd148d6b3e6b42abee55a158a1</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;A)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>CopyAndPermute</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a39be7998c6d214e57b453834a65dfbce</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumSameIDs, int NumPermuteIDs, int *PermuteToLIDs, int *PermuteFromLIDs, const Epetra_OffsetIndex *Indexor, Epetra_CombineMode CombineMode=Zero)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>PackAndPrepare</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab911fd00ac95bc6721f2f2971d2b0915</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, Epetra_Distributor &amp;Distor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UnpackAndCombine</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a379d6d9252e47d1789c5a9484f949096</anchor>
      <arglist>(const Epetra_SrcDistObject &amp;Source, int NumImportIDs, int *ImportLIDs, int LenImports, char *Imports, int &amp;SizeOfPacket, Epetra_Distributor &amp;Distor, Epetra_CombineMode CombineMode, const Epetra_OffsetIndex *Indexor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SortEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a421bd76f5fa0678a9812b2aa1bcc6389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Sorted</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a42b9cfbf6beca11657a2fa8f60d0ce26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>MergeRedundantEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4c53a52346eaccc5eea18c0c9b6fc3cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>NoRedundancies</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4037149e4bcfb0a7fd92bca09d3a249b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StaticGraph</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aeec37a83d1ec34599f06cff03ad91b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GeneratePointObjects</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a04fec7c831e249b38de744fe8593085f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BlockMap2PointMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae135a223d42bc85db28b23141861d11c</anchor>
      <arglist>(const Epetra_BlockMap &amp;BlockMap, Epetra_Map *&amp;PointMap) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>UpdateOperatorXY</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>abb466b9e6ccdc4bd11cff218f9277466</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, const Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CrsGraph *</type>
      <name>Graph_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a5ebdac44e5003129d9199dababa2206e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aebed3024385bb22193b120a308df2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>StaticGraph_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3959397a760e1a5d57a5aac3314895bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3cf361a1b4bbdf8a42005c50e8feb20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>constructedWithFilledGraph_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a5066017828e9130b943541fc113de8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>matrixFillCompleteCalled_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>adf3ca3a8449cfa9d0206a8fdcb6d18d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>StorageOptimized_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad96651e3572198de87c4832616d9876e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumMyBlockRows_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae734e02e5075fcb0f1000dd7ca944158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa60d46123f130ecb37fd88bcc9f9bb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>NumBlockEntriesPerRow_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a066ca8aaeb94d9af327175da436581da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>NumAllocatedBlockEntriesPerRow_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af6b85803dba589e079234cab86282108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int **</type>
      <name>Indices_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4d4d3be2e51e79b011a290cefef7d462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>ElementSizeList_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a800eaba0855a7cffff80653ba628bddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>FirstPointInElementList_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a30031aac29ed057310fa51baf71557cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix ***</type>
      <name>Entries_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac173aa1ea0cea769b5150f4ad9a31a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>All_Values_Orig_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aed1fc1ae295cb72098463f569c2c2d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>All_Values_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aac9b16bd1f668d86181e8d3c7351b919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormInf_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2f31684bf904e1cb167c0e9d0a910a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormOne_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a384357479f7b21afd31fa081057ac7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NormFrob_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a15b419f9cff1f72749f5a65f24f24916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ImportVector_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a48a510a49a5d4d5489a34136d46ec4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>ExportVector_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a89b72fb76062c1f8e2968f69607e80ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>TempRowDims_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a548b607faccd0e52e86a0de23f35864d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix **</type>
      <name>TempEntries_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>acaaeaab3bce06b0470ce39ea9421c8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LenTemps_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a68785cb51d9fb4e20a1cc9ada79e6c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurBlockRow_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a45524e5e4a46b324e17884c4c1cd815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurNumBlockEntries_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa2fd9f32020fc5182730738510080139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>CurBlockIndices_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a09d1559562fac660956b151521bd2dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurEntry_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a44891264bd7e5d26730ed1c964073eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CurIndicesAreLocal_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aefb518321a6f86057c399a0cbc2990d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CombineMode</type>
      <name>CurSubmitMode_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aebdb96de6f049f12b9f6b0782079b57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurExtractBlockRow_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac64208af50ec669c816fc8f5ec2b895d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurExtractEntry_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>adbf63d9517fbaa0093caf1aecc699c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurExtractNumBlockEntries_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3090dc6bb6e721ff3b1c3455f48821c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CurExtractIndicesAreLocal_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>abc6de756076a70f2737a64d4af497a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CurExtractView_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a413ab9be888ea0ea12241e9e10dc694a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurRowDim_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a61ed47adf519b46e39e34104bd9a4b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>CurBlockDiag_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aaed6601c4b855737f9955e171f11667b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>RowMatrixRowMap_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a7ddbf08deccd0fed514b3a6675eefead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>RowMatrixColMap_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae3e8948fff182c0c234bdde55900ab97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Import *</type>
      <name>RowMatrixImporter_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1f098a39883dc73b5df48ff22e108604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>OperatorDomainMap_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac877f10a3e598ebd9fc6e437f0771acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_Map *</type>
      <name>OperatorRangeMap_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>adba7ae2b49ad9610e65398416aa18bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>OperatorX_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2856c0d7edbe68bb92aa544dea8fd14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_MultiVector *</type>
      <name>OperatorY_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>affe088d4b824afaf196addc0a78c7710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>HavePointObjects_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab27ec54a7b0c614a36484f23aaaec8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>squareFillCompleteCalled_</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a750a786cf84861422315d602fcd68591</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af23a56963abd63eabacb2f089d85de4d</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int *NumBlockEntriesPerRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae1d0ab4eff672cd0d755919b7667f9a4</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, int NumBlockEntriesPerRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>acfb553794e730f40a506d381e7ac359f</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int *NumBlockEntriesPerRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab0ee70ea5c54873adbc3f7c8058486f2</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;RowMap, const Epetra_BlockMap &amp;ColMap, int NumBlockEntriesPerRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a8e2526c4dcd7df4b6283b58d0eecfd2f</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_CrsGraph &amp;Graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a40bfbc60f094b9b832e953fe3e81ca63</anchor>
      <arglist>(const Epetra_VbrMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_VbrMatrix</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4b89a3531f6ebd79a141464bc27e84f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_VbrMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1c2f5823b41564b66f557f744ff2f345</anchor>
      <arglist>(const Epetra_VbrMatrix &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PutScalar</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1ab1516f016eb7ce415beefa2acacc3c</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad37d7b6f012f998c104de6f9d7cd4062</anchor>
      <arglist>(double ScalarConstant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DirectSubmitBlockEntry</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab60013226a5b44f204b98c3a9923885d</anchor>
      <arglist>(int GlobalBlockRow, int GlobalBlockCol, const double *values, int LDA, int NumRows, int NumCols, bool sum_into)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginInsertGlobalValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a5978261e9dda99a5a099039af788d91c</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginInsertMyValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2ad358a9ba360f2dbb009da99a55b194</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginReplaceGlobalValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a59ac95c5e9e57400ee962508a5c17492</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginReplaceMyValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a86f75bc236434fa242370db1bf215e20</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginSumIntoGlobalValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a33860f52b16535240c30fca5acbc05c9</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginSumIntoMyValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab2b010041fab0310f0d88fed66d461dc</anchor>
      <arglist>(int BlockRow, int NumBlockEntries, int *BlockIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubmitBlockEntry</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1b4b8004cee655f2e82cdcd679ad1ad5</anchor>
      <arglist>(double *Values, int LDA, int NumRows, int NumCols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubmitBlockEntry</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2e4a2fbb7354269d7f32104a89b6a269</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndSubmitEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a147b5433985946b4ff842182a3df2f6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceDiagonalValues</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4711a442b8cc8f5f560806c2e60a75c1</anchor>
      <arglist>(const Epetra_Vector &amp;Diagonal)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a7948f79031b83b65aa8935abd4d5f2ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FillComplete</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a0374ef908a53659fb8626d49f6306af5</anchor>
      <arglist>(const Epetra_BlockMap &amp;DomainMap, const Epetra_BlockMap &amp;RangeMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Filled</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae737e5a3b6a22ad461994f562cac6f26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalBlockRowPointers</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a71c7bf9af0bf897d9d78e0dc437ee927</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, Epetra_SerialDenseMatrix **&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyBlockRowPointers</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac9481e43092b711599ba1b916fbb723b</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, Epetra_SerialDenseMatrix **&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractGlobalBlockRowCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a9dd52bbe887dd454c4411fc834cb629c</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, int *ColDims) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractMyBlockRowCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aea201ef99c18f6827dfe40a3db03c3f5</anchor>
      <arglist>(int BlockRow, int MaxNumBlockEntries, int &amp;RowDim, int &amp;NumBlockEntries, int *BlockIndices, int *ColDims) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractEntryCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a45f4886095cbd5041b66fc8a65fa4b6f</anchor>
      <arglist>(int SizeOfValues, double *Values, int LDA, bool SumInto) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractGlobalBlockRowView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a8e225873b2fe55caaf8639114036c588</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int &amp;NumBlockEntries, int *&amp;BlockIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractMyBlockRowView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a89f9804115090398cf14acabe84ee360</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int &amp;NumBlockEntries, int *&amp;BlockIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractEntryView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a26d2554bb7ffe4b8b9c42c5fbcb03a03</anchor>
      <arglist>(Epetra_SerialDenseMatrix *&amp;entry) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalBlockRowView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1ee97558fbd6aafc9c098bf0b7f775c2</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int &amp;NumBlockEntries, int *&amp;BlockIndices, Epetra_SerialDenseMatrix **&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyBlockRowView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad36cf4373846d96c7f1d7655b967432c</anchor>
      <arglist>(int BlockRow, int &amp;RowDim, int &amp;NumBlockEntries, int *&amp;BlockIndices, Epetra_SerialDenseMatrix **&amp;Values) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad05d2ded0481b4ca163b5c8deddff9f0</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractBlockDiagonalCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a346d54b31eea025fd523940a81dfcac1</anchor>
      <arglist>(int MaxNumBlockDiagonalEntries, int &amp;NumBlockDiagonalEntries, int *RowColDims) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractBlockDiagonalEntryCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa9a3414e2ab9a71da1dd20c88732dc41</anchor>
      <arglist>(int SizeOfValues, double *Values, int LDA, bool SumInto) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginExtractBlockDiagonalView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a376b1c659981feb36401df7ba006a74a</anchor>
      <arglist>(int &amp;NumBlockDiagonalEntries, int *&amp;RowColDims) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractBlockDiagonalEntryView</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3f18e427499eb1c72f70b3975f6f68f3</anchor>
      <arglist>(double *&amp;Values, int &amp;LDA) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply1</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aecbb897cb89e82c56707d883b252b838</anchor>
      <arglist>(bool TransA, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a23d4607809f1cbd76c550ee04ec1ebd9</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>afb2b852d8a232b8f686d41539cd0bed8</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a58dbafd182dc1ca890cb59a0711f1e83</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvRowSums</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a778c85b4fd091135fc5464df32f68b8f</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab30b96ba1a9265510f7bd162cd31faab</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvColSums</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1a81bc76feac801cadde9197d7e9366f</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac512f3027100ec7434356026dee761f5</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OptimizeStorage</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac73e1ed4b005de8188f111ea50cda2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StorageOptimized</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad2f02f252cd4c629a68ca476b6f27a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreGlobal</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae740ab64ea0dd835cd9728d4ad8c3d65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreLocal</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4b2a00e01fb8c43a5cb939df78b7a2a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IndicesAreContiguous</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a52aa59cb5319747eb6f2c22abfa03c82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a0a2ffef51d095427351c5de6c56dc90f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a01034762b45301bfe98063ac29f371ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NoDiagonal</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a6233a577f7d56e434702fd78d929040d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a61013cf817a39c6361a156bddf893583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormOne</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af956a095dc844a9a14e462acdbb9bdfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormFrobenius</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a8b51cc2d430b07df733ff00cc2112eff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxRowDim</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab4de7af17726aa07c03be5b478a45130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxColDim</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a07311c36d2b6817c8d616017aea1c523</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxRowDim</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1289451de03159f6e7e84cc4eb47c0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxColDim</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a6a8b7d5d35fbbf7d94aa2fb5d0efddae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aeb7309fa8b259036f432e27c63cc37e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab577196aa9ec339809d12d1e0e04551f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a91bd74d45813578cb6441de94e064d28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac590ab62b3e1160dd13f85ca8cc0e4b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2ef5d1468ed9f1ad44b8c88435670747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a5d8054d16a41b5a714fc84b5cad5a1b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>acef5b068960a80e680522676733b7bb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aba351b482d84c24f7e8ec89d4d00bc68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa83a316233017feaa68269afed7ea549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockRows</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aaef386c2cfe9b930bcb7c9a30feec295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockCols</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a10f00a6da8757b6eee93d9a6395fa320</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a56ef774f3fdde0bfb6b36634e46204bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockDiagonals</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af02161ea2fc059c4097ff1eaa07b412f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a53f9fe31f7669e162658071e7a65f0d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockRows</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3ba691ef870422392991b1a9fec01174</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockRows64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a5bb9c55a5a2a8b79e92d1e89bf60d362</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockCols</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab8c780cd992e082ab247e2f21cf0f4ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockCols64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2be45296e530e3e9a063b582a917ea4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a0a8be775c94cbf1a99732a48076c3200</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockEntries64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a8ccd7535df21ec13032f79834f037629</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockDiagonals</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a95fb4e6cd83e7b0827f5c305e4b9e3ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockDiagonals64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa2bb4241199b8e3db5fe1b1a3759f05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4373872970b22d6f5133eb0e877548d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a27bebe3a45b32ce49d0cc3d0ed620239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad8a923444d2e9512063b339651f27bd8</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedGlobalBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a81f2e6188738f6d0c2f1f9dbc55c07f4</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad4277573c9d5380ec78954e822c31303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxNumBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4a70e5a78d48c9ed70d98523752fe285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1440aae299ce92d00b8a376f79aa20ee</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumAllocatedMyBlockEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af278bc2d23b6e4ecb3fdd7662fdf010e</anchor>
      <arglist>(int Row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumNonzeros</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a315db3988702971f7153aa4705be5c8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMaxNumNonzeros</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1c0f791f40bb53b853e6e5295ed69907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a926da0af00370df1db77cbb2b84bb212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a7598cf1ac11ad3832601ae44da8d6cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsGraph &amp;</type>
      <name>Graph</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa78b37340696bc907158cd16d532e15d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import *</type>
      <name>Importer</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a768014a6bd2fa383555641300f00e3e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Export *</type>
      <name>Exporter</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae48f8bd8046efc9542597d6484a0dc3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>DomainMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a03416bc97e282a2154d6a29d26b0c1cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>RangeMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>abefc4d05d20acf0f4679dd918210c864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>RowMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae296958c6d4185417b1a67cc9b4a068c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>ColMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a11001c604b9a21dee7c5245994ff5af0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>afb704a441d54383b286ce90c048d2c75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a46cf48ec57d3a773543e43d43bddcc06</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>acb54431ca86f23fb55f01055bd41e3c4</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3e78c1a633e8a9494320613fc2ca9c48</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GRID64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af6bfb4be23cfe2cf0d6f193d3ae3cb87</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab03501b06d9452f0780705f6ec44503b</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ad090e96617b6394ed2c15ec059ad9812</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a42a19c06e3257edecd54ef9d9aa7a129</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GCID64</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a78f681065e9b2bf302779123a9c71b99</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af886ce9252d905ccc933b5dd30402371</anchor>
      <arglist>(int GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a1666de29d98fd9268ba10a02afd7d7d2</anchor>
      <arglist>(long long GRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLRID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3491f29be79146b5d0427d395533cbd4</anchor>
      <arglist>(int LRID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a2427050e4ce58d489438615f8a4f6046</anchor>
      <arglist>(int GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a9bf18963958969fcfe0692cf49b367ed</anchor>
      <arglist>(long long GCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyLCID</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a4eb58013085be8ab66aae975c5722af2</anchor>
      <arglist>(int LCID_in) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalBlockRow</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>acc9a665c46efd7953194e74ecbf6ceb2</anchor>
      <arglist>(int GID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MyGlobalBlockRow</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a037c1366e4896aaace5942455adc5d3e</anchor>
      <arglist>(long long GID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ac5973255eadf254518ea074bf0aa6c95</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ab71a537d9ebcad64ab19a099ba6ceee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a9f44138173772f5dbfc588ea9cacf03d</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af6c2bd162a3b9892aec6dd475b42986e</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a0e200638d4de86abc2b1b2c852f40ea9</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af5b52110f04eac4c0a75dab778349f29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a73e4efa358f647ab44fca01b425e8cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a32431c7f9b988759677f48272bfdd972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aef6164a84d174909343bf8497fba6853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractGlobalRowCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae1636aea2ebc42e92fed282a013a1471</anchor>
      <arglist>(int GlobalRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a6dbd446d0ff571f9a71d17a8241f2e5a</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a0b2099ef8c7fe1780263f0e5f20704fc</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>ae931f38e4de12011ffb7fd294449746a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a04234407cd675a393236be688094ba9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a3209cf4c145df64310dd8644e19c9233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a95f5fb6446233a5829ccfaa54b3e06b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a388fa11f7945ac7d4d56bbab83910d6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>BlockImportMap</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>aa05e627bd5a13cd00b657783011f292b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>af22129f93ed473d83fae0478c25ce13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TransformToLocal</name>
      <anchorfile>classEpetra__VbrMatrix.html</anchorfile>
      <anchor>a25c4884028feb52741e985af7a336881</anchor>
      <arglist>(const Epetra_BlockMap *DomainMap, const Epetra_BlockMap *RangeMap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_VbrRowMatrix</name>
    <filename>classEpetra__VbrRowMatrix.html</filename>
    <base>Epetra_BasicRowMatrix</base>
    <member kind="variable" protection="private">
      <type>Epetra_VbrMatrix *</type>
      <name>matrix_</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a695a2377ff707519c19590d32703bcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_VbrRowMatrix</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>acddb1e0b5e78e5326ad13c48a914e306</anchor>
      <arglist>(Epetra_VbrMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_VbrRowMatrix</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a3b06b8e8a440cd9b4714aa432362ba35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateMatrix</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>ad6c46f4b4351b9e67a900d491c813db6</anchor>
      <arglist>(Epetra_VbrMatrix *Matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a8b544979e7bdc77e2e484f443449f72c</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>aa3935eef6f33e4e4aa6ad4b0da45eda7</anchor>
      <arglist>(int CurEntry, double *&amp;Value, int &amp;RowIndex, int &amp;ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyEntryView</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a13dc3d466438e988ebe3d42d9ea324fc</anchor>
      <arglist>(int CurEntry, double const *&amp;Value, int &amp;RowIndex, int &amp;ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a8073c600137431c180e4aca8a8e31c01</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RightScale</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a10c5908a6f89ea478e076fccdd1e5389</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LeftScale</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>a29e08fd766862e09c5e5625678dc79ff</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>aa5308050cc8d29f087f622ad011ff19f</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classEpetra__VbrRowMatrix.html</anchorfile>
      <anchor>ab084a9388768c7186da4d726c2fbabe5</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Epetra_Vector</name>
    <filename>classEpetra__Vector.html</filename>
    <base>Epetra_MultiVector</base>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ChangeValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a006625655d4821d55357cd1d376c1c62</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int *Indices, bool IndicesGlobal, bool SumInto)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ChangeValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a154488f7c81452a4a5b61807766f4220</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const long long *Indices, bool IndicesGlobal, bool SumInto)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TChangeValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a3973791d767600d411faac114bce0a5c</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int_type *Indices, bool IndicesGlobal, bool SumInto)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Vector</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a64872db1da964d135e5828b06dd6bc01</anchor>
      <arglist>(const Epetra_BlockMap &amp;Map, bool zeroOut=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Vector</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a933d5cafdb3bbb0d7ecad4597ad27a9e</anchor>
      <arglist>(const Epetra_Vector &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Vector</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a7103634e9ff57e06a612d270c0965eea</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_BlockMap &amp;Map, double *V)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Epetra_Vector</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a5018ea0831d6da69fd2726dcd4674b83</anchor>
      <arglist>(Epetra_DataAccess CV, const Epetra_MultiVector &amp;Source, int Index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Epetra_Vector</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a9c730d7afe0e73dcd8d8807fbff2f395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a54e8c91c1cde7c3fd27a32070df21da3</anchor>
      <arglist>(int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a8ab32ce5c8e880f2150ba192de89d502</anchor>
      <arglist>(int NumEntries, const double *Values, const long long *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>ad4bdb2084f0562c1d7d6c5e7ea7ebf90</anchor>
      <arglist>(int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>afe7d8097b48162dffc22feb18f5d6cb5</anchor>
      <arglist>(int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>ae5ce73a8d56d8ade11fc404da36a4f24</anchor>
      <arglist>(int NumEntries, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceGlobalValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a49ded56876e0f0322dbd22b77935fb3e</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReplaceMyValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a3c97dbee4281c8d8d0b3acaa5fb73938</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoGlobalValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a04f3b860be9957c6482964153525bc54</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SumIntoMyValues</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a97d06ea90aac0dcd208f217e77abc712</anchor>
      <arglist>(int NumEntries, int BlockOffset, const double *Values, const int *Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractCopy</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a41de4e40c4fdca3c9aaedbfd4feb0f60</anchor>
      <arglist>(double *V) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractView</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>aedfad8fc25c5eadc3efd93f8dfac769d</anchor>
      <arglist>(double **V) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a0c80eedb02e4acc89ecc45dd76b58dd3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a89718573a95032e577bef7940a2346b9</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ResetView</name>
      <anchorfile>classEpetra__Vector.html</anchorfile>
      <anchor>a65e5d2d7669ad8a428ac4d01321ae851</anchor>
      <arglist>(double *Values_in)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Epetra_CrsGraphData::IndexData</name>
    <filename>structEpetra__CrsGraphData_1_1IndexData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Epetra_CrsGraphData::IndexData&lt; int &gt;</name>
    <filename>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexData</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a9a98a900ae6daf88b992d3dfdc66692e</anchor>
      <arglist>(int NumMyBlockRows, bool AllocSorted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>ab8490a2541519be35ff4c22a4535a2d7</anchor>
      <arglist>(int NumMyBlockRows, bool AllocSorted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>ad36860bfc10093a2e29ad55fd8237012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>Indices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a1ff440e75b6374e62320d6462ca62413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; EntriesInOneRow&lt; int &gt; &gt;</type>
      <name>SortedEntries_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a9f4cfff70a80c8702465d06e9282dc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>TempColIndices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a267019a52ea9af1b1dbc5b3f8383c425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_IntSerialDenseVector</type>
      <name>All_Indices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a49cb050548cf6db6a4f15ddc95763af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_IntSerialDenseVector</type>
      <name>All_IndicesPlus1_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01int_01_4.html</anchorfile>
      <anchor>a2c0e8c64f8b67f000e65a389146cf801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Epetra_CrsGraphData::IndexData&lt; long long &gt;</name>
    <filename>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexData</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>ad14b823f73077bba28555f603856a90b</anchor>
      <arglist>(int NumMyBlockRows, bool AllocSorted)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexData</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>a5e02724a570060cb277676083a3e4a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>afa8411268f1428a85432b9ba8c92b777</anchor>
      <arglist>(int NumMyBlockRows, bool AllocSorted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>a2568789f5c61c5f5e2f7649e93a0a3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>long long **</type>
      <name>Indices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>a33175c9b074091927ab4f8f02efb3775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; EntriesInOneRow&lt; long long &gt; &gt;</type>
      <name>SortedEntries_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>ab8c413362640881ec4d9986656506cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long long *</type>
      <name>TempColIndices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>a5fd4251445d545917e5cf1bba01f10fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_LongLongSerialDenseVector</type>
      <name>All_Indices_</name>
      <anchorfile>structEpetra__CrsGraphData_1_1IndexData_3_01long_01long_01_4.html</anchorfile>
      <anchor>a26ba340e7290ba574f11fa55d9f6a313</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Epetra_MapColoring::ListItem</name>
    <filename>structEpetra__MapColoring_1_1ListItem.html</filename>
    <member kind="function">
      <type></type>
      <name>ListItem</name>
      <anchorfile>structEpetra__MapColoring_1_1ListItem.html</anchorfile>
      <anchor>aa5cf7a1333edc37f214498368421bb48</anchor>
      <arglist>(const int itemValue=0, ListItem *nextItem=0)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ItemValue</name>
      <anchorfile>structEpetra__MapColoring_1_1ListItem.html</anchorfile>
      <anchor>acf32b368f531684d30c3293c6d2fc927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ListItem *</type>
      <name>NextItem</name>
      <anchorfile>structEpetra__MapColoring_1_1ListItem.html</anchorfile>
      <anchor>a71fce010aba9190df9bd96f3552eacc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>epetra_test::matrix_data</name>
    <filename>classepetra__test_1_1matrix__data.html</filename>
    <member kind="function">
      <type></type>
      <name>matrix_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>af4b31bac82d39514c49119d0ebb185c5</anchor>
      <arglist>(int num_rows, int *rowlengths, int blocksize=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>abe1ceb788aa515048513b0c728da1d37</anchor>
      <arglist>(int num_rows, int num_cols, int num_off_diagonals, int blocksize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>ad86e71dd5aebab45e75a3b5b92ea0ca0</anchor>
      <arglist>(int num_quad_elements, int num_dof_per_node, bool make_numerically_nonsymmetric=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~matrix_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a4d544b8b9d0cb409efb50e8fb693ef8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numrows</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>aa0ef3b28a4c1621c72447209b8e11f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numcols</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>aeef72087a234212b7fe596ee5a3fff89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blocksize</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>aff371ab38fe8de3a1b069ad48b9cb62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>rows</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>ab8805ebbeb48a96361fe9a8676358022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>rowlengths</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>abbbdc60ce0a0342fb371e4f78534aa0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>colindices</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>ace8ef421c651a886525bdf90562c18bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double **</type>
      <name>coefs</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a2b03706dfb536b6bbcd4773543424c3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>coefs</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a9c675b21ca1596186a04ca0df9662941</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_local_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a12472ba97c8adc91851181d2de152bb9</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>matrix_data</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a1a5485177f220034c155fa3633b73f67</anchor>
      <arglist>(const matrix_data &amp;data)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>matrix_data &amp;</type>
      <name>operator=</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a81f1b5bb4338eca1ae88a68489382048</anchor>
      <arglist>(const matrix_data &amp;data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numrows_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>aeba683222698a0146ab439adcb3c1ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numcols_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a8fbe5cedfca5748c6abfebe8df4e19ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>rows_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a2d1472c81d2c8c92dd8fbde4f31ab7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>rowlengths_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>ab6a8a4b243282dc4852efe217037f8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>blocksize_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>ab095b43f6b09f1ab6469825d2f21bbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>colindices_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a136e24db9e730728c4ed775b923bfbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>coefs_</name>
      <anchorfile>classepetra__test_1_1matrix__data.html</anchorfile>
      <anchor>a71c9f7be3b2a481f1ba5d09c9e948eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Epetra_HashTable::Node</name>
    <filename>structEpetra__HashTable_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>a6473181e9c8bebd0c2a65b7c07b57d5a</anchor>
      <arglist>(const long long key=0, const value_type value=0, Node *ptr=0)</arglist>
    </member>
    <member kind="variable">
      <type>long long</type>
      <name>Key</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>a17291dd518554a3a4e9fcbaeab61e7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Value</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>a8597a89e3574a62e3a2b1602bfbd1d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>Ptr</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>a5aafd00dddfdefb6620448265e5f0e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Node</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>a1733153cbd52b486b6eb8489212fafd7</anchor>
      <arglist>(const Node &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Node &amp;</type>
      <name>operator=</name>
      <anchorfile>structEpetra__HashTable_1_1Node.html</anchorfile>
      <anchor>acf15c24192a6967d247d2fefa7d84f39</anchor>
      <arglist>(const Node &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Epetra_Import_Util</name>
    <filename>namespaceEpetra__Import__Util.html</filename>
    <member kind="function">
      <type>int</type>
      <name>TPackAndPrepareWithOwningPIDs</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a9401308c4023b15bf3f572bc7e919387</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, std::vector&lt; int &gt; &amp;pids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackAndPrepareWithOwningPIDs</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aa39b2cdcdb576dc9489d5d8bbe30b01f</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumExportIDs, int *ExportLIDs, int &amp;LenExports, char *&amp;Exports, int &amp;SizeOfPacket, int *Sizes, bool &amp;VarSizes, std::vector&lt; int &gt; &amp;SourcePids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TUnpackWithOwningPIDsCount</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ad53d542bb0e4ffe11233fc8486aab38c</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackWithOwningPIDsCount</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ad233b537d1e31c435623782b61017499</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TUnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>abf2d29374a4cb081235d93bfda986129</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, int_type *CSR_colind, double *CSR_vals, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>aeb743a5ccca637314632bd5d358e10a0</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, int *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UnpackAndCombineIntoCrsArrays</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a2d7af6e3a06a62e76b435b0968b1e9ae</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;SourceMatrix, int NumSameIDs, int NumRemoteIDs, const int *RemoteLIDs, int NumPermuteIDs, const int *PermuteToLIDs, const int *PermuteFromLIDs, int LenImports, char *Imports, int TargetNumRows, int TargetNumNonzeros, int MyTargetPID, int *CSR_rowptr, long long *CSR_colind, double *CSR_values, const std::vector&lt; int &gt; &amp;SourcePids, std::vector&lt; int &gt; &amp;TargetPids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>TLowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>ac2180405f6ddcbbdcd218435522dc60d</anchor>
      <arglist>(int N, const int *rowptr, int *colind_LID, const int_type *colind_GID, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, MapType1 &amp;NewColMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a6bca916f0583a6cd5f4a483f1054efd0</anchor>
      <arglist>(int N, const int *rowptr, int *colind, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LowCommunicationMakeColMapAndReindex</name>
      <anchorfile>namespaceEpetra__Import__Util.html</anchorfile>
      <anchor>a765137d806bfc72ff2ad0d88ec5c60ea</anchor>
      <arglist>(int N, const int *rowptr, int *colind_LID, long long *colind_GID, const Epetra_Map &amp;domainMap, const int *owningPIDs, bool SortGhostsAssociatedWithEachProcessor, std::vector&lt; int &gt; &amp;RemotePIDs, Epetra_BlockMap &amp;NewColMap)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>epetra_test</name>
    <filename>namespaceepetra__test.html</filename>
    <class kind="class">epetra_test::matrix_data</class>
    <member kind="function">
      <type>void</type>
      <name>get_node_ids</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>aad1d0b8b33173ebb40eb80acec17a1c1</anchor>
      <arglist>(int elem_id, int *node_ids)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>global_check_for_flag_on_proc_0</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>a17c9ed8b19842979e7ed47ed45766929</anchor>
      <arglist>(const char *flag, int numargs, char **strargs, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>create_comm</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab48b54595ab18e6d73169f6533ec0e20</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_matrices</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ab53a9212dec6a8356c33c3b7a5eaf27b</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_matrices_LL</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>ad6f38660e0322038cf6dca90e1af0acd</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Epetra_CrsMatrix &amp;B)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>nodes_per_elem</name>
      <anchorfile>namespaceepetra__test.html</anchorfile>
      <anchor>a33863298af87f81f38c4b064231fc362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>Epetra_Lesson01</name>
    <title>Epetra Lesson 01: Initialization</title>
    <filename>Epetra_Lesson01</filename>
    <docanchor file="Epetra_Lesson01" title="Lesson topics">Epetra_Lesson01_Topics</docanchor>
    <docanchor file="Epetra_Lesson01" title="Initialization for a code that only uses MPI through Trilinos">Epetra_Lesson01_MpiOnlyThroughTrilinos</docanchor>
    <docanchor file="Epetra_Lesson01" title="Initialization for an existing MPI code">Epetra_Lesson01_ExistingMpiCode</docanchor>
    <docanchor file="Epetra_Lesson01" title="Initialization for an existing non-MPI code">Epetra_Lesson01_ExistingNonMpiCode</docanchor>
    <docanchor file="Epetra_Lesson01" title="Things we didn&apos;t explain above">Epetra_Lesson01_Other</docanchor>
    <docanchor file="Epetra_Lesson01" title="Epetra_Comm, Epetra_MpiComm, and Epetra_SerialComm">Epetra_Lesson01_Other_Comm</docanchor>
  </compound>
  <compound kind="page">
    <name>Epetra_Lesson02</name>
    <title>Epetra Lesson 02: Map and Vector</title>
    <filename>Epetra_Lesson02</filename>
    <docanchor file="Epetra_Lesson02" title="Lesson topics">Epetra_Lesson02_Topics</docanchor>
    <docanchor file="Epetra_Lesson02" title="Epetra_Map">Epetra_Lesson02_Map</docanchor>
    <docanchor file="Epetra_Lesson02" title="A Map instance describes a data distribution">Epetra_Lesson02_Map_distribution</docanchor>
    <docanchor file="Epetra_Lesson02" title="A Map assigns entries of a data structure to processes">Epetra_Lesson02_Map_assigns</docanchor>
    <docanchor file="Epetra_Lesson02" title="Global indices matter to you">Epetra_Lesson02_Map_assigns_GIDs</docanchor>
    <docanchor file="Epetra_Lesson02" title="Local indices are an implementation detail">Epetra_Lesson02_Map_assigns_LIDs</docanchor>
    <docanchor file="Epetra_Lesson02" title="We expose local indices for performance reasons">Epetra_Lesson02_Map_assigns_exposeLIDs</docanchor>
    <docanchor file="Epetra_Lesson02" title="Maps are themselves distributed data">Epetra_Lesson02_Map_assigns_Maps</docanchor>
    <docanchor file="Epetra_Lesson02" title="Map compatibility">Epetra_Lesson02_compat</docanchor>
    <docanchor file="Epetra_Lesson02" title="Types of local and global indices">Epetra_Lesson02_LID_GID_types</docanchor>
    <docanchor file="Epetra_Lesson02" title="Different categories of Maps">Epetra_Lesson02_Map_categories</docanchor>
    <docanchor file="Epetra_Lesson02" title="One to one">Epetra_Lesson02_Map_categories_one_to_one</docanchor>
    <docanchor file="Epetra_Lesson02" title="Contiguity and uniformity">Epetra_Lesson02_Map_categories_contig</docanchor>
    <docanchor file="Epetra_Lesson02" title="Globally distributed or locally replicated">Epetra_Lesson02_Map_categories_dist_repl</docanchor>
    <docanchor file="Epetra_Lesson02" title="Epetra_Vector">Epetra_Lesson02_Vector</docanchor>
    <docanchor file="Epetra_Lesson02" title="Code example: Initialize Maps and Vectors">Epetra_Lesson02_example_init</docanchor>
    <docanchor file="Epetra_Lesson02" title="Code example: Read and modify the entries of a Vector">Epetra_Lesson02_example_read_modify_vec</docanchor>
    <docanchor file="Epetra_Lesson02" title="Things not previously explained">Epetra_Lesson02_Other</docanchor>
    <docanchor file="Epetra_Lesson02" title="Teuchos memory management classes">Epetra_Lesson02_Other_Array</docanchor>
  </compound>
  <compound kind="page">
    <name>Epetra_Lesson03</name>
    <title>Epetra Lesson 03: Power method</title>
    <filename>Epetra_Lesson03</filename>
    <docanchor file="Epetra_Lesson03" title="Lesson topics">Epetra_Lesson03_Topics</docanchor>
    <docanchor file="Epetra_Lesson03" title="Relation to other lessons">Epetra_Lesson03_Relation</docanchor>
    <docanchor file="Epetra_Lesson03" title="Creating and filling a sparse matrix">Epetra_Lesson03_Fill</docanchor>
    <docanchor file="Epetra_Lesson03" title="Creating the CrsMatrix">Epetra_Lesson03_Fill_create</docanchor>
    <docanchor file="Epetra_Lesson03" title="Adding entries to the sparse matrix">Epetra_Lesson03_Fill_add</docanchor>
    <docanchor file="Epetra_Lesson03" title="Calling \c FillComplete()">Epetra_Lesson03_Fill_FillComplete</docanchor>
    <docanchor file="Epetra_Lesson03" title="Code example">Epetra_Lesson03_example</docanchor>
  </compound>
  <compound kind="page">
    <name>Epetra_Lesson04</name>
    <title>Epetra Lesson 04: Sparse matrix fill</title>
    <filename>Epetra_Lesson04</filename>
    <docanchor file="Epetra_Lesson04" title="Lesson topics">Epetra_Lesson04_Topics</docanchor>
    <docanchor file="Epetra_Lesson04" title="Filling a sparse matrix">Epetra_Lesson04_Fill</docanchor>
    <docanchor file="Epetra_Lesson04" title="Rowwise access, not rowwise distribution">Epetra_Lesson04_Rowwise</docanchor>
    <docanchor file="Epetra_Lesson04" title="Phases of fill">Epetra_Lesson04_Phases</docanchor>
    <docanchor file="Epetra_Lesson04" title="Trade-offs between flexibility and performance">Epetra_Lesson04_Tradeoffs</docanchor>
    <docanchor file="Epetra_Lesson04" title="The most general case: dynamic allocation, no size hint">Epetra_Lesson04_Tradeoffs_dyn_no_hint</docanchor>
    <docanchor file="Epetra_Lesson04" title="Dynamic allocation with a size hint">Epetra_Lesson04_Tradeoffs_dyn_hint</docanchor>
    <docanchor file="Epetra_Lesson04" title="Static allocation">Epetra_Lesson04_Tradeoffs_static</docanchor>
    <docanchor file="Epetra_Lesson04" title="Constant graph">Epetra_Lesson04_Tradeoffs_const_graph</docanchor>
    <docanchor file="Epetra_Lesson04" title="Local vs. global indices">Epetra_Lesson04_local_vs_global</docanchor>
    <docanchor file="Epetra_Lesson04" title="Exercise">Epetra_Lesson04_Exercise</docanchor>
  </compound>
  <compound kind="page">
    <name>Epetra_Lesson05</name>
    <title>Epetra Lesson 05: Redistribution</title>
    <filename>Epetra_Lesson05</filename>
    <docanchor file="Epetra_Lesson05" title="Lesson topics">Epetra_Lesson05_Topics</docanchor>
    <docanchor file="Epetra_Lesson05" title="Epetra data redistribution: Import and Export">Epetra_Lesson05_Redist</docanchor>
    <docanchor file="Epetra_Lesson05" title="Code example">Epetra_Lesson05_Example</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Epetra Package Browser (Single Doxygen Collection)</title>
    <filename>index</filename>
  </compound>
</tagfile>
