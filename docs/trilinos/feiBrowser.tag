<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AccessPattern.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>AccessPattern_8hpp</filename>
    <class kind="class">AccessPattern</class>
  </compound>
  <compound kind="file">
    <name>BCNodeSet.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>BCNodeSet_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="BCNodeSet_8hpp" name="BCNodeSet.hpp" local="no" imported="no">test_utils/BCNodeSet.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BCNodeSet.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>BCNodeSet_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">BCNodeSet</class>
  </compound>
  <compound kind="file">
    <name>beam.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/example/beam/</path>
    <filename>beam_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="yes" imported="no">fei_base.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="yes" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="yes" imported="no">test_utils/HexBeam.hpp</includes>
    <includes id="HexBeamCR_8hpp" name="HexBeamCR.hpp" local="yes" imported="no">test_utils/HexBeamCR.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="yes" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>beam_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>beam_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>beam_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>beam__main_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="no" imported="no">test_utils/HexBeam.hpp</includes>
    <includes id="HexBeamCR_8hpp" name="HexBeamCR.hpp" local="no" imported="no">test_utils/HexBeamCR.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>beam__main_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beam_main</name>
      <anchorfile>beam__main_8cpp.html</anchorfile>
      <anchor>a4d0d099433e76eb4d9026997341706f5</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>beam_oldfei.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/example/beam/</path>
    <filename>beam__oldfei_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="no" imported="no">test_utils/HexBeam.hpp</includes>
    <includes id="HexBeamCR_8hpp" name="HexBeamCR.hpp" local="no" imported="no">test_utils/HexBeamCR.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>beam__oldfei_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>beam__oldfei_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>beam_oldfei_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>beam__oldfei__main_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="no" imported="no">test_utils/HexBeam.hpp</includes>
    <includes id="HexBeamCR_8hpp" name="HexBeamCR.hpp" local="no" imported="no">test_utils/HexBeamCR.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>beam__oldfei__main_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beam_oldfei_main</name>
      <anchorfile>beam__oldfei__main_8cpp.html</anchorfile>
      <anchor>a4fb85cac82fa28ed02a0a7decf2b6373</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoefAccess.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>CoefAccess_8hpp</filename>
    <class kind="class">CoefAccess</class>
  </compound>
  <compound kind="file">
    <name>CommNodeSet.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>CommNodeSet_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CommNodeSet.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>CommNodeSet_8hpp</filename>
    <class kind="class">CommNodeSet</class>
  </compound>
  <compound kind="file">
    <name>CRSet.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>CRSet_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CRSet.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>CRSet_8hpp</filename>
    <class kind="class">CRSet</class>
  </compound>
  <compound kind="file">
    <name>DataReader.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>DataReader_8cpp</filename>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="BCNodeSet_8hpp" name="BCNodeSet.hpp" local="no" imported="no">test_utils/BCNodeSet.hpp</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
    <includes id="AccessPattern_8hpp" name="AccessPattern.hpp" local="no" imported="no">test_utils/AccessPattern.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
  </compound>
  <compound kind="file">
    <name>DataReader.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>DataReader_8hpp</filename>
    <includes id="BCNodeSet_8hpp" name="BCNodeSet.hpp" local="no" imported="no">test_utils/BCNodeSet.hpp</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
    <includes id="AccessPattern_8hpp" name="AccessPattern.hpp" local="no" imported="no">test_utils/AccessPattern.hpp</includes>
    <includes id="CoefAccess_8hpp" name="CoefAccess.hpp" local="no" imported="no">test_utils/CoefAccess.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <class kind="class">DataReader</class>
  </compound>
  <compound kind="file">
    <name>driverData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>driverData_8cpp</filename>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="FEI_8hpp" name="FEI.hpp" local="no" imported="no">FEI.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="driverData_8hpp" name="driverData.hpp" local="no" imported="no">test_utils/driverData.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>CHK_ERR</name>
      <anchorfile>driverData_8cpp.html</anchorfile>
      <anchor>af9c60653bb9f63fc5550f3f2a62356f3</anchor>
      <arglist>(a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>driverData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>driverData_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">initElem</class>
    <class kind="class">sumInElem</class>
    <class kind="class">nodeBC</class>
    <class kind="class">initCR</class>
    <class kind="class">loadCR</class>
    <class kind="class">sharedNodes</class>
    <class kind="class">parameters</class>
    <class kind="class">setIDLists</class>
    <class kind="class">putBlockFieldNodeSolution</class>
    <class kind="class">driverData</class>
  </compound>
  <compound kind="file">
    <name>ElemBlock.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>ElemBlock_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ElemBlock.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>ElemBlock_8hpp</filename>
    <class kind="class">ElemBlock</class>
  </compound>
  <compound kind="file">
    <name>FEData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>FEData_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="FEData_8hpp" name="FEData.hpp" local="no" imported="no">test_utils/FEData.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>FEData_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>FEData_8hpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <class kind="class">FEData</class>
    <member kind="define">
      <type>#define</type>
      <name>dbgOut</name>
      <anchorfile>FEData_8hpp.html</anchorfile>
      <anchor>a8aa5b13c0b0b6a27c35042436a72682a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEI.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>FEI_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">FEI</class>
  </compound>
  <compound kind="file">
    <name>fei_ArrayUtils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ArrayUtils_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>int</type>
      <name>lowerBound</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a0efc4a8e242575239085dff260d5067e</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abc8f01488b2d10e91c73453e3067fc07</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertion_sort_with_companions</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>afcc5443b9ed0c896b6d0dbfba8fa6eca</anchor>
      <arglist>(int len, int *array, T *companions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a29656e9f9d21e1cbb0659f5c7db2187c</anchor>
      <arglist>(const T &amp;item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a89ab72509f596deeb7c844d088bd7dc8</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a70606676b37cc67b3432ed751deb13a7</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad0946cec4b73f857af5212104a46a8ad</anchor>
      <arglist>(const T &amp;item, const T *list, int, int start, int end, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab4b6c849ff3cdffb0845769c8abdbb2b</anchor>
      <arglist>(int numItems, const T *items, int *offsets, const T *list, int listLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acc28917fd0b26792db6d64ef5a52ce95</anchor>
      <arglist>(const T &amp;item, std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a41d157b4a60fe59dabe579287f1eb3d5</anchor>
      <arglist>(const T &amp;item, T *&amp;list, int &amp;len, int &amp;allocLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>listInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaed8c8a03cb7d092ebb73ddc32eaca25</anchor>
      <arglist>(const T &amp;item, int offset, T *&amp;list, int &amp;usedLength, int &amp;allocatedLength, int allocChunkSize=200)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>searchList</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4c5bd8920f581c1ad21bc00afb030439</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_BlockMap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__BlockMap_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_BlockMap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__BlockMap_8hpp</filename>
    <class kind="class">fei_trilinos::Aztec_BlockMap</class>
    <namespace>fei_trilinos</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_LinSysCore.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__LinSysCore_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_LinSysCore.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__LinSysCore_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__Data_8hpp" name="fei_Data.hpp" local="no" imported="no">fei_Data.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__AztecDMSR__Matrix_8hpp" name="fei_AztecDMSR_Matrix.hpp" local="no" imported="no">fei_AztecDMSR_Matrix.hpp</includes>
    <class kind="class">fei_trilinos::Aztec_LinSysCore</class>
    <namespace>fei_trilinos</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_LSVector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__LSVector_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_LSVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__LSVector_8hpp</filename>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">fei_trilinos::Aztec_LSVector</class>
    <namespace>fei_trilinos</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_Map.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__Map_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Aztec_Map.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Aztec__Map_8hpp</filename>
    <class kind="class">fei_trilinos::Aztec_Map</class>
    <namespace>fei_trilinos</namespace>
  </compound>
  <compound kind="file">
    <name>fei_AztecDMSR_Matrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__AztecDMSR__Matrix_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_AztecDMSR_Matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__AztecDMSR__Matrix_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>fei_AztecDVBR_Matrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__AztecDVBR__Matrix_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_AztecDVBR_Matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__AztecDVBR__Matrix_8hpp</filename>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">fei_trilinos::AztecDVBR_Matrix</class>
    <namespace>fei_trilinos</namespace>
  </compound>
  <compound kind="file">
    <name>fei_base.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/</path>
    <filename>fei__base_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="yes" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="yes" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="yes" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="yes" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="yes" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="yes" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__LinearSystem_8hpp" name="fei_LinearSystem.hpp" local="yes" imported="no">fei_LinearSystem.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="yes" imported="no">fei_utils.hpp</includes>
    <includes id="fei__FEI__Impl_8hpp" name="fei_FEI_Impl.hpp" local="yes" imported="no">fei_FEI_Impl.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_BlockDescriptor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__BlockDescriptor_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="no" imported="no">fei_BlockDescriptor.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_BlockDescriptor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__BlockDescriptor_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <class kind="class">BlockDescriptor</class>
  </compound>
  <compound kind="file">
    <name>fei_BlockLinearProblemManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__BlockLinearProblemManager_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <class kind="class">fei::BlockLinearProblemManager</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_bool.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__bool_8h</filename>
  </compound>
  <compound kind="file">
    <name>fei_chk_mpi.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__chk__mpi_8hpp</filename>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CHK_MPI</name>
      <anchorfile>fei__chk__mpi_8hpp.html</anchorfile>
      <anchor>a7ee1effb47d685ba3913e302650a9dc3</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>fei_mpi_file</name>
      <anchorfile>fei__chk__mpi_8hpp.html</anchorfile>
      <anchor>a7a639c432d6fac3ac1df4b8fa6c084ad</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CommMap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CommMap_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <class kind="struct">fei::CommMap</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>addItemsToCommMap</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab140e04f0d8436d728c942b6c51fc060</anchor>
      <arglist>(int proc, size_t numItems, const T *items, typename CommMap&lt; T &gt;::Type &amp;comm_map, bool keep_sorted_and_unique=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CommUtils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CommUtils_8cpp</filename>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__CommUtils_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localProc</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a0e3a06536098e9ff002247a35f1b6fa7</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae4de8e0030da28cb961a03df9d424a00</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af8f97c5d507e3e8bfba9d4af9a4dd27e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a86d65d9b2a28cd11f1d72d2eb4844e11</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;toProcs, std::vector&lt; int &gt; &amp;fromProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorCommPattern</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a71950510d0cccb162802f85f5cc40d04</anchor>
      <arglist>(MPI_Comm comm, comm_map *inPattern, comm_map *&amp;outPattern)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeIntData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaf9956842e18172ec5d3b6e21f00bb0e</anchor>
      <arglist>(MPI_Comm comm, const std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; int &gt; &amp;sendData, const std::vector&lt; int &gt; &amp;recvProcs, std::vector&lt; int &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allreduce</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac8327d1a3aa9c95c430136bb33f9da71</anchor>
      <arglist>(MPI_Comm comm, bool localBool, bool &amp;globalBool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CommUtils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CommUtils_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__mpiTraits_8hpp" name="fei_mpiTraits.hpp" local="no" imported="no">fei_mpiTraits.hpp</includes>
    <includes id="fei__chk__mpi_8hpp" name="fei_chk_mpi.hpp" local="no" imported="no">fei_chk_mpi.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__CommMap_8hpp" name="fei_CommMap.hpp" local="no" imported="no">fei_CommMap.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::MessageHandler</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__CommUtils_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::RaggedTable&lt; std::map&lt; int, std::set&lt; int &gt; * &gt;, std::set&lt; int &gt; &gt;</type>
      <name>comm_map</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abc55f32e362d94836bd77f3544b2210e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localProc</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a0e3a06536098e9ff002247a35f1b6fa7</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae4de8e0030da28cb961a03df9d424a00</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af8f97c5d507e3e8bfba9d4af9a4dd27e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a86d65d9b2a28cd11f1d72d2eb4844e11</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;toProcs, std::vector&lt; int &gt; &amp;fromProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorCommPattern</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a71950510d0cccb162802f85f5cc40d04</anchor>
      <arglist>(MPI_Comm comm, comm_map *inPattern, comm_map *&amp;outPattern)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allreduce</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac8327d1a3aa9c95c430136bb33f9da71</anchor>
      <arglist>(MPI_Comm comm, bool localBool, bool &amp;globalBool)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeIntData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaf9956842e18172ec5d3b6e21f00bb0e</anchor>
      <arglist>(MPI_Comm comm, const std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; int &gt; &amp;sendData, const std::vector&lt; int &gt; &amp;recvProcs, std::vector&lt; int &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMax</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad3dc3c245361504fc96e8f10773d5d39</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMax</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1557e3aa42e2023a206f54b87b32f59d</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMin</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a51f8e9679eb87080cadd1dfafb18c597</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMin</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4cf910b47415678f7cad553409fbe54f</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalSum</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae808d07911cdef542d4eaecdda341443</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalSum</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae4018feca418c8a9a25584156eed1f2b</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allgatherv</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab5abe7c1735b40ec8f7a3bcaca1a8c53</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;sendbuf, std::vector&lt; int &gt; &amp;recvLengths, std::vector&lt; T &gt; &amp;recvbuf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Bcast</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab839d0bed53272c1a0a38745da038f9e</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;sendbuf, int sourceProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeCommMapData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaebe97d8eb96b7081e54210ed61f82b7</anchor>
      <arglist>(MPI_Comm comm, const typename CommMap&lt; T &gt;::Type &amp;sendCommMap, typename CommMap&lt; T &gt;::Type &amp;recvCommMap, bool recvProcsKnownOnEntry=false, bool recvLengthsKnownOnEntry=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>afde477350aef49c6a51744f4dd0a8935</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;sendData, std::vector&lt; int &gt; &amp;recvProcs, bool recvDataLengthsKnownOnEntry, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a82477847e017b847c3a86b426b5c01cc</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; std::vector&lt; T &gt; * &gt; &amp;sendData, std::vector&lt; int &gt; &amp;recvProcs, bool recvLengthsKnownOnEntry, std::vector&lt; std::vector&lt; T &gt; * &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchange</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aae801b561aa12481968d657e479f1746</anchor>
      <arglist>(MPI_Comm comm, MessageHandler&lt; T &gt; *msgHandler)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_ConnectivityBlock.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ConnectivityBlock_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__ConnectivityBlock_8hpp" name="fei_ConnectivityBlock.hpp" local="no" imported="no">fei_ConnectivityBlock.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__ConnectivityBlock_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_ConnectivityBlock.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ConnectivityBlock_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::ConnectivityBlock</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_ConnectivityTable.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ConnectivityTable_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <class kind="class">ConnectivityTable</class>
  </compound>
  <compound kind="file">
    <name>fei_console_ostream.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__console__ostream_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>std::ostream *</type>
      <name>console_ostream_ptr</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a018fc2d6d1fc837d7360c00b4884e1bb</anchor>
      <arglist>(std::ostream *osptr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_console_ostream</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa1be28e3aae0dea3eb504f4913ea9a3f</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>console_out</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abd0fcf9f34f05ec5d0ffbfed82ab1588</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_console_ostream.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__console__ostream_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>set_console_ostream</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa1be28e3aae0dea3eb504f4913ea9a3f</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>console_out</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abd0fcf9f34f05ec5d0ffbfed82ab1588</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_constants.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__constants_8hpp</filename>
    <namespace>fei</namespace>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a9ff368bd5d98e546c2b68f84636a0ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b86cf2a31f789b873ce203745f29072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a42edb6ae8cec41a9ffe89b336332b063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae8ad4f3c0d9d66b61cb6f8eb998b5bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a199ec1e4b07af54a7ded48e9589030a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1034d8c383c3ea1b0729a3e8c5137e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abfcff51703d83aa06318c0422ee264b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a8bb19aad27b2031eccad79265170e94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a98bb1de44c0be75e8399f528d545ead2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aabf68791afd1695a0efa2c3416544f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a3d605e9f24f289fec3d45d287f42aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af2478406c3a676760784ae7d05b628ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aee2087954ff10742ee5f7543f026bc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a146dc17df29fd479a275313a7ca96077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6176d0a0a6ce994d1dbdfa7f7f059c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4a1572483b78b78c2627f16a7e36ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>TEMPERATURE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a655cdee12b848f7f3e07f42c423145ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UNKNOWN</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6ee18b4411c13021a5aa10c049caa16b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CSRMat.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CSRMat_8cpp</filename>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="yes" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="yes" imported="no">fei_ArrayUtils.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad58b7ad63318699e0141fd7d819053fd</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab699a07c0dc1e4c2977fceaa97f79103</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b2c8c56cf90537d52fb2ab7e380c5c0</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b46a568705048eb31cac3de84db86b9</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSRMat_to_FillableMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab11d44f017277d321853e8da6de1628b</anchor>
      <arglist>(const CSRMat &amp;csrm, FillableMat &amp;fm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CSRMat.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CSRMat_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="yes" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="yes" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="yes" imported="no">fei_CSVec.hpp</includes>
    <class kind="class">fei::CSRMat</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad58b7ad63318699e0141fd7d819053fd</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab699a07c0dc1e4c2977fceaa97f79103</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b2c8c56cf90537d52fb2ab7e380c5c0</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b46a568705048eb31cac3de84db86b9</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSRMat_to_FillableMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab11d44f017277d321853e8da6de1628b</anchor>
      <arglist>(const CSRMat &amp;csrm, FillableMat &amp;fm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CSVec.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CSVec_8cpp</filename>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_entries</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a857370635367b5bbadf335f3542fd10d</anchor>
      <arglist>(CSVec &amp;vec, int num, const int *eqns, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a012804085562509ad99607499d752a8f</anchor>
      <arglist>(CSVec &amp;vec, int eqn, double coef)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4cb602b46ec33e666d3eeb35a8664618</anchor>
      <arglist>(const CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a9b1a461e2aba12481791e2c7288f7e2c</anchor>
      <arglist>(CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad5ec1c8fd2bd21c1328103a4bfe3ce5c</anchor>
      <arglist>(CSVec &amp;vec, double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSVec_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a392fd8e0be3d07d974f76fbbe95b45f7</anchor>
      <arglist>(const CSVec &amp;u, CSVec &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_CSVec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__CSVec_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::CSVec</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa80e47276ad89c207cdff2f797bd8636</anchor>
      <arglist>(CSVec &amp;vec, int eqn, double coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entries</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a857370635367b5bbadf335f3542fd10d</anchor>
      <arglist>(CSVec &amp;vec, int num, const int *eqns, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a012804085562509ad99607499d752a8f</anchor>
      <arglist>(CSVec &amp;vec, int eqn, double coef)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4cb602b46ec33e666d3eeb35a8664618</anchor>
      <arglist>(const CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a9b1a461e2aba12481791e2c7288f7e2c</anchor>
      <arglist>(CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad5ec1c8fd2bd21c1328103a4bfe3ce5c</anchor>
      <arglist>(CSVec &amp;vec, double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSVec_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a392fd8e0be3d07d974f76fbbe95b45f7</anchor>
      <arglist>(const CSVec &amp;u, CSVec &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_ctg_set.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ctg__set_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <class kind="class">fei::ctg_set</class>
    <class kind="class">fei::ctg_set::const_iterator</class>
    <namespace>fei</namespace>
    <member kind="variable">
      <type>const int</type>
      <name>Set_end_val</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a32b08d5111a96b124e47e23c23467af9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Data.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Data_8hpp</filename>
    <class kind="class">Data</class>
  </compound>
  <compound kind="file">
    <name>fei_defs.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>FEI_SINGLE_SYSTEM</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>af983d2fcc27f51fb59eb1bc306bd6f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_EIGEN_SOLVE</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a30def3c0fc286682886933b9021d58e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_AGGREGATE_SUM</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a1df6eba7ad941d7109169f78f1bcf68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_AGGREGATE_PRODUCT</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>add8d87d46f820957d92f731b3ce8ad9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_NODE</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>addf73b50cd83a2ab0f8e62d3005055e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ELEMENT</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a8a33020138b4222069c88ad89f88458d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ONLY_NODES</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>af38a41580566bf6f9cabb66245adc146</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ONLY_ELEMENTS</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a3ace37397f5bc1ad7e8f31ef187b67ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_DENSE_ROW</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a5d56012857c25f2dcd13d9b11ac0bd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_UPPER_SYMM_ROW</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>aec58443ae6958a701de33df72030d996</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_LOWER_SYMM_ROW</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a91c095fd177b68ceb97e163224cc9a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_DENSE_COL</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a8b73be4fed61a50100d1ab455652febb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_UPPER_SYMM_COL</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>ae15fc58cd94ebde536eac92be5372088</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_LOWER_SYMM_COL</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a9d98670584de3cb8ebd333b514b7008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_DIAGONAL</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>ac981102e75775fe9335590c9a22474ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_BLOCK_DIAGONAL_ROW</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>aa9091f6f6b86118f770f86ebe167bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_BLOCK_DIAGONAL_COL</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a5ec0baa5a0d3afc195d9650c56c1a00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_NODE_MAJOR</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a2a4fe6da108611e22e4ee50850ff91f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_FIELD_MAJOR</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a034826c287d922d2939d23c240755ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_LOCAL_TIMES</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>ae8120cef8b415761fb673f3bf049c3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_MAX_TIMES</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a7101afd6918fc32fafbfa2b03a16ad73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_MIN_TIMES</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a429ecd408b91f8c3e35913683e7eab57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_SUCCESS</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>ad07676c107f372821f0ef2f8745400bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_FATAL_ERROR</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>ad57cea0b2ed062329df112b323425332</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ID_NOT_FOUND</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a1a6e99eb8d2c03c38545783f6a51e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>GlobalID</name>
      <anchorfile>fei__defs_8h.html</anchorfile>
      <anchor>a2a3f81aba499311b764d5d4c9bc22841</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_DirichletBCManager.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__DirichletBCManager_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__DirichletBCManager_8hpp" name="fei_DirichletBCManager.hpp" local="no" imported="no">fei_DirichletBCManager.hpp</includes>
    <includes id="fei__DirichletBCRecord_8hpp" name="fei_DirichletBCRecord.hpp" local="no" imported="no">fei_DirichletBCRecord.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__DirichletBCManager_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; fei::DirichletBCRecord &gt;</type>
      <name>DBCvec</name>
      <anchorfile>fei__DirichletBCManager_8cpp.html</anchorfile>
      <anchor>aeb72550b9fd10787257bd4e888c887e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_DirichletBCManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__DirichletBCManager_8hpp</filename>
    <includes id="fei__DirichletBCRecord_8hpp" name="fei_DirichletBCRecord.hpp" local="no" imported="no">fei_DirichletBCRecord.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="no" imported="no">fei_Pool_alloc.hpp</includes>
    <class kind="class">fei::DirichletBCManager</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_DirichletBCRecord.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__DirichletBCRecord_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">fei::DirichletBCRecord</class>
    <class kind="class">fei::less_DirichletBCRecord</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Dof.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Dof_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::Dof</class>
    <class kind="struct">fei::less_rank_id_field</class>
    <class kind="struct">fei::less_field_rank_id</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_DofMapper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__DofMapper_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Dof_8hpp" name="fei_Dof.hpp" local="no" imported="no">fei_Dof.hpp</includes>
    <class kind="class">fei::DofMapper</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_EqnBuffer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnBuffer_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__EqnBuffer_8cpp.html</anchorfile>
      <anchor>a7f0a20c065ce34cf519c1bb5b2081448</anchor>
      <arglist>(FEI_OSTREAM &amp;os, EqnBuffer &amp;eq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_EqnBuffer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnBuffer_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <class kind="class">EqnBuffer</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__EqnBuffer_8hpp.html</anchorfile>
      <anchor>a8b73dd9aac91228df0ec67e1ecf952f5</anchor>
      <arglist>(std::ostream &amp;os, EqnBuffer &amp;eq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_EqnComm.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnComm_8cpp</filename>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="yes" imported="no">fei_EqnComm.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_EqnComm.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnComm_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <class kind="class">fei::EqnComm</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_EqnCommMgr.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnCommMgr_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="no" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="no" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__EqnCommMgr_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_EqnCommMgr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnCommMgr_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="yes" imported="no">fei_mpi.h</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="yes" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="yes" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="yes" imported="no">fei_EqnBuffer.hpp</includes>
    <class kind="class">EqnCommMgr</class>
  </compound>
  <compound kind="file">
    <name>fei_EqnRecord.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__EqnRecord_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <class kind="struct">fei::EqnRecord</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_ErrMacros.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ErrMacros_8hpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__ErrMacros_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHK_ERR</name>
      <anchorfile>fei__ErrMacros_8hpp.html</anchorfile>
      <anchor>af9c60653bb9f63fc5550f3f2a62356f3</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERReturn</name>
      <anchorfile>fei__ErrMacros_8hpp.html</anchorfile>
      <anchor>a75f8f396eb80201b0666a6790c49b482</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>voidERReturn</name>
      <anchorfile>fei__ErrMacros_8hpp.html</anchorfile>
      <anchor>a8d3592ca5d2cd30f11a1065829ca10ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Factory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Factory_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__LogFile_8hpp" name="fei_LogFile.hpp" local="no" imported="no">fei_LogFile.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="fei__FEI__Impl_8hpp" name="fei_FEI_Impl.hpp" local="no" imported="no">fei_FEI_Impl.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Factory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Factory_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="yes" imported="no">fei_mpi.h</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="yes" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="yes" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="yes" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="yes" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__LinearSystem_8hpp" name="fei_LinearSystem.hpp" local="yes" imported="no">fei_LinearSystem.hpp</includes>
    <includes id="fei__Solver_8hpp" name="fei_Solver.hpp" local="yes" imported="no">fei_Solver.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="yes" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="FEI_8hpp" name="FEI.hpp" local="yes" imported="no">FEI.hpp</includes>
    <class kind="class">fei::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Factory_Aztec.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Factory__Aztec_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__Factory__Aztec_8hpp" name="fei_Factory_Aztec.hpp" local="no" imported="no">fei_Factory_Aztec.hpp</includes>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Factory_Aztec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Factory__Aztec_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__Aztec__LSVector_8hpp" name="fei_Aztec_LSVector.hpp" local="no" imported="no">fei_Aztec_LSVector.hpp</includes>
    <includes id="fei__AztecDMSR__Matrix_8hpp" name="fei_AztecDMSR_Matrix.hpp" local="no" imported="no">fei_AztecDMSR_Matrix.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">Factory_Aztec</class>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Factory__Aztec_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Factory_Trilinos.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Factory__Trilinos_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__Matrix__Local_8hpp" name="fei_Matrix_Local.hpp" local="no" imported="no">fei_Matrix_Local.hpp</includes>
    <includes id="fei__Vector__Local_8hpp" name="fei_Vector_Local.hpp" local="no" imported="no">fei_Vector_Local.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Factory_Trilinos.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Factory__Trilinos_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__Include__Trilinos_8hpp" name="fei_Include_Trilinos.hpp" local="no" imported="no">fei_Include_Trilinos.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">Factory_Trilinos</class>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Factory__Trilinos_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_FEDataFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FEDataFilter_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="fei__Lookup_8hpp" name="fei_Lookup.hpp" local="no" imported="no">fei_Lookup.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="no" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__NodeCommMgr_8hpp" name="fei_NodeCommMgr.hpp" local="no" imported="no">fei_NodeCommMgr.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="no" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="no" imported="no">fei_BlockDescriptor.hpp</includes>
    <includes id="fei__ConnectivityTable_8hpp" name="fei_ConnectivityTable.hpp" local="no" imported="no">fei_ConnectivityTable.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__FEDataFilter_8hpp" name="fei_FEDataFilter.hpp" local="no" imported="no">fei_FEDataFilter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSEMBLE_PUT</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>aa6d0c7fd74a9fc70d3ef1a0b3df8997e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSEMBLE_SUM</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>ae8ea4d6315843dfc2058a532738ff049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::Constraint&lt; GlobalID &gt;</type>
      <name>ConstraintType</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>aa92d197672152ed03a7d8b7f46573874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_eqns_to_nodenumbers_and_dof_ids</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>a70ca9e4c20186b385794241112597f56</anchor>
      <arglist>(fei::FieldDofMap&lt; int &gt; &amp;fdmap, const NodeDatabase &amp;nodeDB, int numEqns, const int *eqns, std::vector&lt; int &gt; &amp;nodeNumbers, std::vector&lt; int &gt; &amp;dof_ids)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_field_and_nodes_to_eqns</name>
      <anchorfile>fei__FEDataFilter_8cpp.html</anchorfile>
      <anchor>a49750ba5f7225060b5b44ceeaa8b7c27</anchor>
      <arglist>(const NodeDatabase &amp;nodeDB, int fieldID, int fieldSize, int numNodes, const GlobalID *nodeIDs, std::vector&lt; int &gt; &amp;eqns)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_FEDataFilter.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FEDataFilter_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__Filter_8hpp" name="fei_Filter.hpp" local="yes" imported="no">fei_Filter.hpp</includes>
    <class kind="class">FEDataFilter</class>
  </compound>
  <compound kind="file">
    <name>fei_FEI_Impl.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FEI__Impl_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__FEI__Impl_8hpp" name="fei_FEI_Impl.hpp" local="no" imported="no">fei_FEI_Impl.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__Data_8hpp" name="fei_Data.hpp" local="no" imported="no">fei_Data.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__FEI__Impl_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_FEI_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FEI__Impl_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="FEI_8hpp" name="FEI.hpp" local="no" imported="no">FEI.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <class kind="class">fei::FEI_Impl</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_FieldDofMap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FieldDofMap_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__constants_8hpp" name="fei_constants.hpp" local="no" imported="no">fei_constants.hpp</includes>
    <class kind="class">fei::FieldDofMap</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_FieldMask.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FieldMask_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="yes" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="yes" imported="no">fei_FieldMask.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_FieldMask.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FieldMask_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::FieldMask</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_FillableMat.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FillableMat_8cpp</filename>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>FillableMat::feipoolmat::iterator</type>
      <name>insert_row</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af661219bb6bbf860151030cbb42b39d6</anchor>
      <arglist>(FillableMat::feipoolmat &amp;matdata, FillableMat::feipoolmat::iterator iter, int row, fei_Pool_alloc&lt; CSVec &gt; &amp;vecpool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac00483ad6d37e3844769bdfb284182b5</anchor>
      <arglist>(std::ostream &amp;os, const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_nnz</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a08c3714f0c246baf7db5ddf6f156bc3e</anchor>
      <arglist>(const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_row_numbers</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aee8cfd5729e1757e28030ea63d2833c1</anchor>
      <arglist>(const FillableMat &amp;mat, std::vector&lt; int &gt; &amp;rows)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_FillableMat.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FillableMat_8hpp</filename>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="no" imported="no">fei_Pool_alloc.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <class kind="class">fei::FillableMat</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac00483ad6d37e3844769bdfb284182b5</anchor>
      <arglist>(std::ostream &amp;os, const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_nnz</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a08c3714f0c246baf7db5ddf6f156bc3e</anchor>
      <arglist>(const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_row_numbers</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aee8cfd5729e1757e28030ea63d2833c1</anchor>
      <arglist>(const FillableMat &amp;mat, std::vector&lt; int &gt; &amp;rows)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Filter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Filter_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="yes" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="yes" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="yes" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="yes" imported="no">fei_BlockDescriptor.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="yes" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="yes" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__Filter_8hpp" name="fei_Filter.hpp" local="yes" imported="no">fei_Filter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Filter_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Filter.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Filter_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <class kind="class">Filter</class>
  </compound>
  <compound kind="file">
    <name>fei_FiniteElementData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__FiniteElementData_8hpp</filename>
    <includes id="fei__Lookup_8hpp" name="fei_Lookup.hpp" local="no" imported="no">fei_Lookup.hpp</includes>
    <class kind="class">FiniteElementData</class>
  </compound>
  <compound kind="file">
    <name>fei_fstream.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__fstream_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>FEI_IFSTREAM</name>
      <anchorfile>fei__fstream_8hpp.html</anchorfile>
      <anchor>a6f1ed6284372f154922d5784a2eb0451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_OFSTREAM</name>
      <anchorfile>fei__fstream_8hpp.html</anchorfile>
      <anchor>a2ae5da3caa1acb3efe261efb357fc323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_fwd.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/</path>
    <filename>fei__fwd_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">fei::SharedIDs</class>
    <class kind="class">fei::ctg_set</class>
    <class kind="class">fei::Matrix_Impl</class>
    <class kind="class">fei::Vector_Impl</class>
    <class kind="class">snl_fei::Constraint</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FEI_OSTREAM</name>
      <anchorfile>fei__fwd_8hpp.html</anchorfile>
      <anchor>a721780920207855206fe145d065fd239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputLevel</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa571dcdb2eaff2333bf499833d4e871c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287faaea15d9bbfeaf5f04685f968beb94b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX_FILES</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa8741c205ffeac1a111d7e0b6f825bb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BRIEF_LOGS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fad73e87816056137770f18a77012864a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_LOGS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fafc262b7ee6c65705ae0bd5f51c1e12fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa8411efbe1239f31317336c51e58d1bef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Graph.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Graph_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="snl__fei__RaggedTable__specialize_8hpp" name="snl_fei_RaggedTable_specialize.hpp" local="no" imported="no">snl_fei_RaggedTable_specialize.hpp</includes>
    <class kind="class">fei::Graph</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Graph_Impl.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Graph__Impl_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Graph__Impl_8hpp" name="fei_Graph_Impl.hpp" local="no" imported="no">fei_Graph_Impl.hpp</includes>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="no" imported="no">fei_EqnComm.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Graph__Impl_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Graph_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Graph__Impl_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="no" imported="no">fei_EqnComm.hpp</includes>
    <class kind="class">fei::Graph_Impl</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_GraphReducer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__GraphReducer_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__GraphReducer_8hpp" name="fei_GraphReducer.hpp" local="no" imported="no">fei_GraphReducer.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__GraphReducer_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_GraphReducer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__GraphReducer_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="snl__fei__RaggedTable__specialize_8hpp" name="snl_fei_RaggedTable_specialize.hpp" local="no" imported="no">snl_fei_RaggedTable_specialize.hpp</includes>
    <class kind="class">fei::GraphReducer</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_impl_utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__impl__utils_8cpp</filename>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <namespace>fei</namespace>
    <namespace>fei::impl_utils</namespace>
    <member kind="function">
      <type>void</type>
      <name>find_offsets</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a415e877d1b75600aa9c33cf57256cd1a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;sources, const std::vector&lt; int &gt; &amp;targets, std::vector&lt; int &gt; &amp;offsets)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a0c981eb935a43921a4f09a8e1008e569</anchor>
      <arglist>(const fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ac5f4582091cf4acdb50f5176ff57ba58</anchor>
      <arglist>(const fei::FillableMat &amp;mat, char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>aab0290114cd406ebdcff311e33909f8d</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::FillableMat &amp;mat, bool clear_mat_on_entry, bool overwrite_entries)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unpack_CSRMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a62121dda1e616232d47391d77e5b3eaa</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a16a6257b5cb62b48d8211568021fa1e9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ae30641570ddd80a0012df85142144e12</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs, std::vector&lt; char &gt; &amp;buffer, bool resize_buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ad845d7df9fb4358ede8bee27efd7e98b</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;buffer, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate_BC_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a46bcf8f2ec00763867da9d24de54c065</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_col_to_row_map</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>acbe20c4d77eab1d8b0a6a5c0f33b5a08</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::multimap&lt; int, int &gt; &amp;crmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_couplings</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a99f1589d73ceb673db168995a12c84e2</anchor>
      <arglist>(fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a20b9ff07427b3ea8384ba013031719ba</anchor>
      <arglist>(MPI_Comm comm, const fei::FillableMat &amp;localMatrix, fei::FillableMat &amp;globalUnionMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a3e6cc6dd6ea256f43c8fd43cf7e7af84</anchor>
      <arglist>(MPI_Comm comm, const fei::CSVec &amp;localVec, fei::CSVec &amp;globalUnionVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a25f39ad03f7cc0326dfe7528de350880</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>adb3d33f599dea2668cf4cf6459b4fcfc</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSVec &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_graph</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>af9c1e67f80a805b235e251083e89246e</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, fei::Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_matrix</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a4eb12f05d39516db52be8bacb6adb594</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, bool sum_into, fei::Matrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_impl_utils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__impl__utils_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <namespace>fei</namespace>
    <namespace>fei::impl_utils</namespace>
    <member kind="function">
      <type>void</type>
      <name>find_offsets</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a415e877d1b75600aa9c33cf57256cd1a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;sources, const std::vector&lt; int &gt; &amp;targets, std::vector&lt; int &gt; &amp;offsets)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a0c981eb935a43921a4f09a8e1008e569</anchor>
      <arglist>(const fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ac5f4582091cf4acdb50f5176ff57ba58</anchor>
      <arglist>(const fei::FillableMat &amp;mat, char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>aab0290114cd406ebdcff311e33909f8d</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::FillableMat &amp;mat, bool clear_mat_on_entry, bool overwrite_entries)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unpack_CSRMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a62121dda1e616232d47391d77e5b3eaa</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a16a6257b5cb62b48d8211568021fa1e9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ae30641570ddd80a0012df85142144e12</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs, std::vector&lt; char &gt; &amp;buffer, bool resize_buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ad845d7df9fb4358ede8bee27efd7e98b</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;buffer, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate_BC_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a46bcf8f2ec00763867da9d24de54c065</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_col_to_row_map</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>acbe20c4d77eab1d8b0a6a5c0f33b5a08</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::multimap&lt; int, int &gt; &amp;crmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_couplings</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a99f1589d73ceb673db168995a12c84e2</anchor>
      <arglist>(fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a20b9ff07427b3ea8384ba013031719ba</anchor>
      <arglist>(MPI_Comm comm, const fei::FillableMat &amp;localMatrix, fei::FillableMat &amp;globalUnionMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a3e6cc6dd6ea256f43c8fd43cf7e7af84</anchor>
      <arglist>(MPI_Comm comm, const fei::CSVec &amp;localVec, fei::CSVec &amp;globalUnionVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a25f39ad03f7cc0326dfe7528de350880</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>adb3d33f599dea2668cf4cf6459b4fcfc</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSVec &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_graph</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>af9c1e67f80a805b235e251083e89246e</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, fei::Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_matrix</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a4eb12f05d39516db52be8bacb6adb594</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, bool sum_into, fei::Matrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEI_Implementation.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>FEI__Implementation_8cpp</filename>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__Data_8hpp" name="fei_Data.hpp" local="no" imported="no">fei_Data.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__Filter_8hpp" name="fei_Filter.hpp" local="no" imported="no">fei_Filter.hpp</includes>
    <includes id="fei__LinSysCoreFilter_8hpp" name="fei_LinSysCoreFilter.hpp" local="no" imported="no">fei_LinSysCoreFilter.hpp</includes>
    <includes id="fei__FEDataFilter_8hpp" name="fei_FEDataFilter.hpp" local="no" imported="no">fei_FEDataFilter.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="no" imported="no">fei_BlockDescriptor.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__ConnectivityTable_8hpp" name="fei_ConnectivityTable.hpp" local="no" imported="no">fei_ConnectivityTable.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>FEI__Implementation_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEI_Implementation.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>FEI__Implementation_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="FEI_8hpp" name="FEI.hpp" local="no" imported="no">FEI.hpp</includes>
    <class kind="class">FEI_Implementation</class>
  </compound>
  <compound kind="file">
    <name>fei_Include_Trilinos.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Include__Trilinos_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_IndexTable.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__IndexTable_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::IndexTable</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_iosfwd.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__iosfwd_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FEI_OSTREAM</name>
      <anchorfile>fei__iosfwd_8hpp.html</anchorfile>
      <anchor>a721780920207855206fe145d065fd239</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_iostream.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__iostream_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__console__ostream_8hpp" name="fei_console_ostream.hpp" local="no" imported="no">fei_console_ostream.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FEI_OSTREAM</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a721780920207855206fe145d065fd239</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ISTREAM</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a380313520f283262d3994ebc5de06d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_COUT</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a4995a9bdd2237aff32a8f017642eff1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ENDL</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a1f822b87b806e59d9e65e68ec9166e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_FMTFLAGS</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a15cb110489dc04474ede8f3057f187ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_SCIENTIFIC</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>abebcaf5ef4f8e6d68e944aa8171c067b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_FLOATFIELD</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a94298e9b0aff2de7b5062d90dd79fbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_FIXED</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a54c8690786d6e88b98f8a20a35cb4fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_APP</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>a053f90dffdf418be4c0f059c424b96cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IOS_OUT</name>
      <anchorfile>fei__iostream_8hpp.html</anchorfile>
      <anchor>acd1be8c43ce41ff3a7194218d092dff7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_LibraryWrapper.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LibraryWrapper_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="yes" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="yes" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="yes" imported="no">fei_FiniteElementData.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_LibraryWrapper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LibraryWrapper_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <class kind="class">LibraryWrapper</class>
  </compound>
  <compound kind="file">
    <name>fei_LinearDecomposition.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinearDecomposition_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <class kind="class">fei::LinearDecomposition</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_LinearProblemManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinearProblemManager_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <class kind="class">fei::LinearProblemManager</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_LinearSystem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinearSystem_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__LinearSystem_8hpp" name="fei_LinearSystem.hpp" local="no" imported="no">fei_LinearSystem.hpp</includes>
    <includes id="snl__fei__LinearSystem__General_8hpp" name="snl_fei_LinearSystem_General.hpp" local="no" imported="no">snl_fei_LinearSystem_General.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_LinearSystem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinearSystem_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__DirichletBCManager_8hpp" name="fei_DirichletBCManager.hpp" local="no" imported="no">fei_DirichletBCManager.hpp</includes>
    <class kind="class">fei::LinearSystem</class>
    <class kind="class">fei::LinearSystem::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_LinearSystemCore.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinearSystemCore_8hpp</filename>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">LinearSystemCore</class>
  </compound>
  <compound kind="file">
    <name>fei_LinProbMgr_EpetraBasic.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__LinProbMgr__EpetraBasic_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_LinProbMgr_EpetraBasic.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__LinProbMgr__EpetraBasic_8hpp</filename>
    <includes id="fei__LinearProblemManager_8hpp" name="fei_LinearProblemManager.hpp" local="no" imported="no">fei_LinearProblemManager.hpp</includes>
    <includes id="fei__Include__Trilinos_8hpp" name="fei_Include_Trilinos.hpp" local="no" imported="no">fei_Include_Trilinos.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">LinProbMgr_EpetraBasic</class>
  </compound>
  <compound kind="file">
    <name>fei_LinSysCore_flexible.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinSysCore__flexible_8hpp</filename>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="yes" imported="no">fei_LinearSystemCore.hpp</includes>
    <class kind="class">LinSysCore_flexible</class>
  </compound>
  <compound kind="file">
    <name>fei_LinSysCoreFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinSysCoreFilter_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="yes" imported="no">fei_utils.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__ostream__ops_8hpp" name="fei_ostream_ops.hpp" local="no" imported="no">fei_ostream_ops.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="yes" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="yes" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__DirichletBCManager_8hpp" name="fei_DirichletBCManager.hpp" local="yes" imported="no">fei_DirichletBCManager.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="yes" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="yes" imported="no">fei_CSVec.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="yes" imported="no">FEI_Implementation.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="yes" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="fei__ConnectivityTable_8hpp" name="fei_ConnectivityTable.hpp" local="yes" imported="no">fei_ConnectivityTable.hpp</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="yes" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="yes" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="yes" imported="no">fei_BlockDescriptor.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="yes" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="yes" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__Data_8hpp" name="fei_Data.hpp" local="yes" imported="no">fei_Data.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="yes" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__LinSysCore__flexible_8hpp" name="fei_LinSysCore_flexible.hpp" local="yes" imported="no">fei_LinSysCore_flexible.hpp</includes>
    <includes id="fei__LinSysCoreFilter_8hpp" name="fei_LinSysCoreFilter.hpp" local="yes" imported="no">fei_LinSysCoreFilter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__LinSysCoreFilter_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSEMBLE_PUT</name>
      <anchorfile>fei__LinSysCoreFilter_8cpp.html</anchorfile>
      <anchor>aa6d0c7fd74a9fc70d3ef1a0b3df8997e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSEMBLE_SUM</name>
      <anchorfile>fei__LinSysCoreFilter_8cpp.html</anchorfile>
      <anchor>ae8ea4d6315843dfc2058a532738ff049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::Constraint&lt; GlobalID &gt;</type>
      <name>ConstraintType</name>
      <anchorfile>fei__LinSysCoreFilter_8cpp.html</anchorfile>
      <anchor>aa92d197672152ed03a7d8b7f46573874</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_LinSysCoreFilter.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LinSysCoreFilter_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__Filter_8hpp" name="fei_Filter.hpp" local="yes" imported="no">fei_Filter.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <class kind="class">LinSysCoreFilter</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_LogFile.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LogFile_8cpp</filename>
    <includes id="fei__LogFile_8hpp" name="fei_LogFile.hpp" local="yes" imported="no">fei_LogFile.hpp</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_LogFile.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LogFile_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="yes" imported="no">fei_iosfwd.hpp</includes>
    <class kind="class">fei::LogFile</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Logger.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Logger_8cpp</filename>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__LogFile_8hpp" name="fei_LogFile.hpp" local="no" imported="no">fei_LogFile.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Logger.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Logger_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <class kind="class">fei::Logger</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_LogManager.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LogManager_8cpp</filename>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__LogFile_8hpp" name="fei_LogFile.hpp" local="no" imported="no">fei_LogFile.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_LogManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__LogManager_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">fei::LogManager</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Lookup.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Lookup_8hpp</filename>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <class kind="class">Lookup</class>
  </compound>
  <compound kind="file">
    <name>fei_Lookup_Impl.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Lookup__Impl_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Lookup__Impl_8hpp" name="fei_Lookup_Impl.hpp" local="no" imported="no">fei_Lookup_Impl.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="snl__fei__SubdMsgHandler_8hpp" name="snl_fei_SubdMsgHandler.hpp" local="no" imported="no">snl_fei_SubdMsgHandler.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Lookup__Impl_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Lookup_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Lookup__Impl_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__ConnectivityBlock_8hpp" name="fei_ConnectivityBlock.hpp" local="no" imported="no">fei_ConnectivityBlock.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="no" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__Lookup_8hpp" name="fei_Lookup.hpp" local="no" imported="no">fei_Lookup.hpp</includes>
    <class kind="class">fei::Lookup_Impl</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_macros.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__macros_8hpp</filename>
    <includes id="fei__version_8h" name="fei_version.h" local="yes" imported="no">fei_version.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_TIME_H</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>ab95a77f09b1d0251bb0a8cd2c9d63e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_IOSFWD</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a9c4ecf2af4a6cfe5f496878ffec974ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_IOMANIP</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>ab53a521579b4b01f1a601b543742d835</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_IOSTREAM</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a25dc65670fd17f17c73eee3f6b27d1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_FSTREAM</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a38cadb75b65b48b9d2d19a0f339d71e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_SSTREAM</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a608e65d78bbdd037150bc10eadc4b048</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_HAVE_STD_IOS_FMTFLAGS</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a19e1403b2fbcc5239d313f47f40fd314</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_SER</name>
      <anchorfile>fei__macros_8hpp.html</anchorfile>
      <anchor>a30f0a714b59875ce698553acf69a276d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_MapType.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MapType_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="typedef">
      <type>std::map&lt; int, int &gt;</type>
      <name>MapIntInt</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acdecf6bf2ea8e61dbae63fd2126c367a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="yes" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="yes" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="yes" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__ostream__ops_8hpp" name="fei_ostream_ops.hpp" local="no" imported="no">fei_ostream_ops.hpp</includes>
    <class kind="class">fei::Matrix</class>
    <class kind="class">fei::Matrix::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Matrix_core.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix__core_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="no" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__MatrixTraits_8hpp" name="fei_MatrixTraits.hpp" local="no" imported="no">fei_MatrixTraits.hpp</includes>
    <includes id="fei__MatrixTraits__FillableMat_8hpp" name="fei_MatrixTraits_FillableMat.hpp" local="no" imported="no">fei_MatrixTraits_FillableMat.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Matrix__core_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Matrix_core.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix__core_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="no" imported="no">fei_EqnComm.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <class kind="class">fei::Matrix_core</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Matrix_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix__Impl_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="fei__MatrixTraits_8hpp" name="fei_MatrixTraits.hpp" local="no" imported="no">fei_MatrixTraits.hpp</includes>
    <includes id="fei__MatrixTraits__LinProbMgr_8hpp" name="fei_MatrixTraits_LinProbMgr.hpp" local="no" imported="no">fei_MatrixTraits_LinProbMgr.hpp</includes>
    <includes id="fei__MatrixTraits__LinSysCore_8hpp" name="fei_MatrixTraits_LinSysCore.hpp" local="no" imported="no">fei_MatrixTraits_LinSysCore.hpp</includes>
    <includes id="fei__MatrixTraits__FEData_8hpp" name="fei_MatrixTraits_FEData.hpp" local="no" imported="no">fei_MatrixTraits_FEData.hpp</includes>
    <includes id="fei__MatrixTraits__FillableMat_8hpp" name="fei_MatrixTraits_FillableMat.hpp" local="no" imported="no">fei_MatrixTraits_FillableMat.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="snl__fei__FEMatrixTraits_8hpp" name="snl_fei_FEMatrixTraits.hpp" local="no" imported="no">snl_fei_FEMatrixTraits.hpp</includes>
    <includes id="snl__fei__FEMatrixTraits__FED_8hpp" name="snl_fei_FEMatrixTraits_FED.hpp" local="no" imported="no">snl_fei_FEMatrixTraits_FED.hpp</includes>
    <includes id="snl__fei__BlockMatrixTraits_8hpp" name="snl_fei_BlockMatrixTraits.hpp" local="no" imported="no">snl_fei_BlockMatrixTraits.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="no" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__chk__mpi_8hpp" name="fei_chk_mpi.hpp" local="no" imported="no">fei_chk_mpi.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__ConnectivityBlock_8hpp" name="fei_ConnectivityBlock.hpp" local="no" imported="no">fei_ConnectivityBlock.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <class kind="class">fei::Matrix_Impl</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Matrix__Impl_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Matrix_Local.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix__Local_8cpp</filename>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__Matrix__Local_8hpp" name="fei_Matrix_Local.hpp" local="yes" imported="no">fei_Matrix_Local.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="yes" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Matrix_Local.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Matrix__Local_8hpp</filename>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <class kind="class">fei::Matrix_Local</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixGraph.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixGraph_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <class kind="class">fei::MatrixGraph</class>
    <class kind="class">fei::MatrixGraph::Factory</class>
    <namespace>fei</namespace>
    <member kind="typedef">
      <type>snl_fei::Constraint&lt; fei::Record&lt; int &gt; * &gt;</type>
      <name>ConstraintType</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aef0d5bdbf26ccdc8ba1e0fb8214084e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_MatrixGraph_Impl2.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixGraph__Impl2_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="no" imported="no">fei_FieldMask.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__ostream__ops_8hpp" name="fei_ostream_ops.hpp" local="no" imported="no">fei_ostream_ops.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__GraphReducer_8hpp" name="fei_GraphReducer.hpp" local="no" imported="no">fei_GraphReducer.hpp</includes>
    <includes id="fei__ConnectivityBlock_8hpp" name="fei_ConnectivityBlock.hpp" local="no" imported="no">fei_ConnectivityBlock.hpp</includes>
    <includes id="snl__fei__BlkSizeMsgHandler_8hpp" name="snl_fei_BlkSizeMsgHandler.hpp" local="no" imported="no">snl_fei_BlkSizeMsgHandler.hpp</includes>
    <includes id="fei__Graph__Impl_8hpp" name="fei_Graph_Impl.hpp" local="no" imported="no">fei_Graph_Impl.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="no" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__MatrixGraph__Impl2_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>getFieldSize</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>afb7d5b937ee0d57a38df4ad841d9d349</anchor>
      <arglist>(int fieldID, fei::VectorSpace *space1, fei::VectorSpace *space2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_MatrixGraph_Impl2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixGraph__Impl2_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <class kind="class">fei::MatrixGraph_Impl2</class>
    <class kind="class">fei::MatrixGraph_Impl2::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixReducer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixReducer_8cpp</filename>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="yes" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="yes" imported="no">fei_EqnComm.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="yes" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixReducer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixReducer_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="no" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::MatrixReducer</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__MatrixReducer_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">fei::MatrixTraits</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_Aztec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__MatrixTraits__Aztec_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_Epetra.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__MatrixTraits__Epetra_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_FEData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixTraits__FEData_8hpp</filename>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <class kind="struct">fei::MatrixTraits&lt; FiniteElementData &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_FillableMat.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixTraits__FillableMat_8hpp</filename>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <class kind="struct">fei::MatrixTraits&lt; FillableMat &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_LinProbMgr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixTraits__LinProbMgr_8hpp</filename>
    <includes id="fei__LinearProblemManager_8hpp" name="fei_LinearProblemManager.hpp" local="no" imported="no">fei_LinearProblemManager.hpp</includes>
    <class kind="struct">fei::MatrixTraits&lt; fei::LinearProblemManager &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_MatrixTraits_LinSysCore.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__MatrixTraits__LinSysCore_8hpp</filename>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <class kind="struct">fei::MatrixTraits&lt; LinearSystemCore &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_mpi.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__mpi_8h</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>MPI_Comm</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>ae0a6553e8d5ccdb943ae1b816e4ac5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_Request</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>adf5a20922eac767429867a3e5430afc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_COMM_WORLD</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>a2df6a15627583d5e6f5a48550644cbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_Abort</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>ae4c440fd532746b2dc48f0aaf685b626</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_Wtime</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>acccb30d7e74c0146e07769b443fc56b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_Barrier</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>a4007deaa8a38a56818cfb6dd5cb02770</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_SUCCESS</name>
      <anchorfile>fei__mpi_8h.html</anchorfile>
      <anchor>a004dd3ebf764c8c42e600ae5513e4dbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_mpiTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__mpiTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
  </compound>
  <compound kind="file">
    <name>fei_NodeCommMgr.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeCommMgr_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__mpiTraits_8hpp" name="fei_mpiTraits.hpp" local="no" imported="no">fei_mpiTraits.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="no" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__NodeCommMgr_8hpp" name="fei_NodeCommMgr.hpp" local="no" imported="no">fei_NodeCommMgr.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__NodeCommMgr_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_feiFunc_</name>
      <anchorfile>fei__NodeCommMgr_8cpp.html</anchorfile>
      <anchor>ab271130adeee93908dfe2389e15bf97e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_NodeCommMgr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeCommMgr_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <class kind="class">NodeCommMgr</class>
  </compound>
  <compound kind="file">
    <name>fei_NodeDatabase.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeDatabase_8cpp</filename>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="no" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__NodeCommMgr_8hpp" name="fei_NodeCommMgr.hpp" local="no" imported="no">fei_NodeCommMgr.hpp</includes>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__NodeDatabase_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_NodeDatabase.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeDatabase_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="yes" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="yes" imported="no">fei_Pool_alloc.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="yes" imported="no">fei_mpi.h</includes>
    <class kind="class">NodeDatabase</class>
  </compound>
  <compound kind="file">
    <name>fei_NodeDescriptor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeDescriptor_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="no" imported="no">fei_NodeDescriptor.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_NodeDescriptor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__NodeDescriptor_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <class kind="class">NodeDescriptor</class>
  </compound>
  <compound kind="file">
    <name>fei_ostream_ops.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ostream__ops_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ostream__ops_8hpp" name="fei_ostream_ops.hpp" local="no" imported="no">fei_ostream_ops.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8cpp.html</anchorfile>
      <anchor>ad56bb9d76812346453cb476d3a9d910e</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8cpp.html</anchorfile>
      <anchor>a04849aba8ba04ae9b33f344c44b962c0</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8cpp.html</anchorfile>
      <anchor>ada6ea3da1e414ecb53782940b846c955</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8cpp.html</anchorfile>
      <anchor>a18227006a445a41d2b7a236590213044</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::CSVec &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8cpp.html</anchorfile>
      <anchor>a9cc9f9e3f40c5ec96f7b01f223529561</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::CSRMat &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_ostream_ops.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ostream__ops_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="yes" imported="no">fei_iosfwd.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8hpp.html</anchorfile>
      <anchor>ad56bb9d76812346453cb476d3a9d910e</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8hpp.html</anchorfile>
      <anchor>a04849aba8ba04ae9b33f344c44b962c0</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8hpp.html</anchorfile>
      <anchor>ada6ea3da1e414ecb53782940b846c955</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8hpp.html</anchorfile>
      <anchor>a9cc9f9e3f40c5ec96f7b01f223529561</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>fei__ostream__ops_8hpp.html</anchorfile>
      <anchor>a18227006a445a41d2b7a236590213044</anchor>
      <arglist>(FEI_OSTREAM &amp;os, fei::CSVec &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Param.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Param_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Param_8hpp" name="fei_Param.hpp" local="no" imported="no">fei_Param.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Param.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Param_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::Param</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_ParameterSet.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ParameterSet_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_ParameterSet.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ParameterSet_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Param_8hpp" name="fei_Param.hpp" local="yes" imported="no">fei_Param.hpp</includes>
    <class kind="class">fei::ParameterSet</class>
    <class kind="class">fei::ParameterSet::const_iterator</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Pattern.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pattern_8cpp</filename>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="yes" imported="no">fei_Pattern.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Pattern.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pattern_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::Pattern</class>
    <namespace>snl_fei</namespace>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Pool.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pool_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Pool_8hpp" name="fei_Pool.hpp" local="yes" imported="no">fei_Pool.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Pool.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pool_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei_Pool</class>
    <class kind="struct">fei_Pool::Link</class>
    <class kind="struct">fei_Pool::Chunk</class>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ALLOC_CHUNK_SIZE_K</name>
      <anchorfile>fei__Pool_8hpp.html</anchorfile>
      <anchor>a5245b70cd29c3576a9914de6bc01ecca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Pool_alloc.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pool__alloc_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="yes" imported="no">fei_Pool_alloc.hpp</includes>
    <includes id="fei__Pool_8hpp" name="fei_Pool.hpp" local="yes" imported="no">fei_Pool.hpp</includes>
    <class kind="struct">fei_map_holder</class>
    <member kind="function">
      <type>fei_Pool *</type>
      <name>get_fei_mem_pool</name>
      <anchorfile>fei__Pool__alloc_8cpp.html</anchorfile>
      <anchor>ac56d67bcf306892df8b8f23ed7ebcdc4</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static fei_map_holder</type>
      <name>fmh</name>
      <anchorfile>fei__Pool__alloc_8cpp.html</anchorfile>
      <anchor>a69bcedd6d08392d892db4ac75ea6d504</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Pool_alloc.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Pool__alloc_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Pool_8hpp" name="fei_Pool.hpp" local="yes" imported="no">fei_Pool.hpp</includes>
    <class kind="class">fei_Pool_alloc</class>
    <class kind="struct">fei_Pool_alloc::rebind</class>
    <member kind="function">
      <type>fei_Pool *</type>
      <name>get_fei_mem_pool</name>
      <anchorfile>fei__Pool__alloc_8hpp.html</anchorfile>
      <anchor>ac56d67bcf306892df8b8f23ed7ebcdc4</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>fei__Pool__alloc_8hpp.html</anchorfile>
      <anchor>a5fefd943701b02bebb137458127abc1c</anchor>
      <arglist>(const fei_Pool_alloc&lt; T &gt; &amp;, const fei_Pool_alloc&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>fei__Pool__alloc_8hpp.html</anchorfile>
      <anchor>a7d158351728deed946320444c2784c3c</anchor>
      <arglist>(const fei_Pool_alloc&lt; T &gt; &amp;, const fei_Pool_alloc&lt; T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_ProcEqns.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ProcEqns_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="no" imported="no">fei_ProcEqns.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_ProcEqns.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ProcEqns_8hpp</filename>
    <class kind="class">ProcEqns</class>
  </compound>
  <compound kind="file">
    <name>fei_Record.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Record_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::Record</class>
    <class kind="class">fei::Record_Operator</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Reducer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Reducer_8cpp</filename>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Matrix__core_8hpp" name="fei_Matrix_core.hpp" local="no" imported="no">fei_Matrix_core.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Graph__Impl_8hpp" name="fei_Graph_Impl.hpp" local="no" imported="no">fei_Graph_Impl.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Reducer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Reducer_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <class kind="class">fei::Reducer</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_ReverseMapper.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ReverseMapper_8cpp</filename>
    <includes id="fei__ReverseMapper_8hpp" name="fei_ReverseMapper.hpp" local="no" imported="no">fei_ReverseMapper.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_ReverseMapper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__ReverseMapper_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__EqnRecord_8hpp" name="fei_EqnRecord.hpp" local="no" imported="no">fei_EqnRecord.hpp</includes>
    <class kind="class">fei::ReverseMapper</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_set_dof_mappings.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__set__dof__mappings_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__DofMapper_8hpp" name="fei_DofMapper.hpp" local="no" imported="no">fei_DofMapper.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>set_dof_mappings</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a5692f393152cb9e2d3cf83bb6e3f87ff</anchor>
      <arglist>(GlobalOrdinal first_index, fei::DofMapper&lt; LocalOrdinal, GlobalOrdinal, DofOrder &gt; &amp;dof_mapper)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_set_shared_ids.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__set__shared__ids_8cpp</filename>
    <includes id="fei__set__shared__ids_8hpp" name="fei_set_shared_ids.hpp" local="no" imported="no">fei_set_shared_ids.hpp</includes>
    <includes id="fei__CommMap_8hpp" name="fei_CommMap.hpp" local="no" imported="no">fei_CommMap.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="no" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="fei__LinearDecomposition_8hpp" name="fei_LinearDecomposition.hpp" local="no" imported="no">fei_LinearDecomposition.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>copy_into_shared_ids</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4a85d52c1ef03874091b1a62f5e3f33d</anchor>
      <arglist>(const fei::CommMap&lt; int &gt;::Type &amp;procs_to_ids_and_sharing_procs, const snl_fei::RecordCollection &amp;records, fei::SharedIDs&lt; int &gt; &amp;sharedIDs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_remotelyowned_ids_into_CommMap</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>accc19e356491c873c719126bd6216c60</anchor>
      <arglist>(int myProc, const fei::LinearDecomposition&lt; int &gt; &amp;lindecomp, const snl_fei::RecordCollection &amp;records, fei::CommMap&lt; int &gt;::Type &amp;procs_to_shared_ids)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_shared_ids</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acfd9d7b740be49b74758060400bbc2d6</anchor>
      <arglist>(MPI_Comm comm, const snl_fei::RecordCollection &amp;records, fei::SharedIDs&lt; int &gt; &amp;sharedIDs, int lowest_global_id, int highest_global_id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_set_shared_ids.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__set__shared__ids_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>set_shared_ids</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acfd9d7b740be49b74758060400bbc2d6</anchor>
      <arglist>(MPI_Comm comm, const snl_fei::RecordCollection &amp;records, fei::SharedIDs&lt; int &gt; &amp;sharedIDs, int lowest_global_id, int highest_global_id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_SharedIDs.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__SharedIDs_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::SharedIDs</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_SharedPtr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__SharedPtr_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::SharedPtr</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab28313070bead7c78e48ff62588ce894</anchor>
      <arglist>(const SharedPtr&lt; T &gt; &amp;a, const SharedPtr&lt; U &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abb300085ed1f292befee5d78db48e93a</anchor>
      <arglist>(const SharedPtr&lt; T &gt; &amp;a, const SharedPtr&lt; U &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_SlaveVariable.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__SlaveVariable_8hpp</filename>
    <class kind="class">SlaveVariable</class>
  </compound>
  <compound kind="file">
    <name>fei_Solver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Solver_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Solver_8hpp" name="fei_Solver.hpp" local="no" imported="no">fei_Solver.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="snl__fei__LinearSystem__FEData_8hpp" name="snl_fei_LinearSystem_FEData.hpp" local="no" imported="no">snl_fei_LinearSystem_FEData.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Solver_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fei_Solver_solve</name>
      <anchorfile>fei__Solver_8cpp.html</anchorfile>
      <anchor>a04b349e69e4b2407b49c3c9c3e5a8234</anchor>
      <arglist>(fei::LinearSystem *linearSystem, fei::Matrix *preconditioningMatrix, int numParams, const char *const *solverParams, int &amp;iterationsTaken, int &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Solver.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Solver_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">fei::Solver</class>
    <class kind="class">fei::Solver::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Solver_Amesos.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__Amesos_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Solver_Amesos.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__Amesos_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Solver_AztecOO.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__AztecOO_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Solver_AztecOO.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__AztecOO_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Solver_Belos.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__Belos_8cpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_Solver_Belos.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Solver__Belos_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="no" imported="no">fei_trilinos_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_SparseRowGraph.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__SparseRowGraph_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">fei::SparseRowGraph</class>
    <namespace>fei</namespace>
    <member kind="function">
      <type>int</type>
      <name>find_row_start</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a107a404246ef50d354a45a963ef3ff1e</anchor>
      <arglist>(int row, const SparseRowGraph &amp;srg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_sstream.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__sstream_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FEI_ISTRINGSTREAM</name>
      <anchorfile>fei__sstream_8hpp.html</anchorfile>
      <anchor>aff381d061bd97cc68382af71e28fb3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_OSTRINGSTREAM</name>
      <anchorfile>fei__sstream_8hpp.html</anchorfile>
      <anchor>ac9731001f4b0f81bba61f8b4c7044747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_TemplateUtils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__TemplateUtils_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>void</type>
      <name>copySetToArray</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a2db91d5c836c18200eae1ccef4da9418</anchor>
      <arglist>(const SET_TYPE &amp;set_obj, int lenList, int *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySetToVector</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a19002647ede8ef2bdfb6b87a34976315</anchor>
      <arglist>(const std::set&lt; T &gt; &amp;set_obj, std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyKeysToArray</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a945393d80f22fea79eee3f5ae398c411</anchor>
      <arglist>(const MAP_TYPE &amp;map_obj, unsigned lenList, int *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyKeysToVector</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a5c2a3aecb10f35366836022195b1bb58</anchor>
      <arglist>(const MAP_TYPE &amp;map_obj, std::vector&lt; int &gt; &amp;keyvector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyMapOfSetsToVectorOfVectors</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a05aa9aae813dce2a9f6a0d91d6c0279d</anchor>
      <arglist>(const std::map&lt; T, std::set&lt; U &gt; &gt; &amp;mapset, std::vector&lt; T &gt; &amp;keys, std::vector&lt; std::vector&lt; U &gt; &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToArrays</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4dedffe9e70d7a84174914f2a4c6eea3</anchor>
      <arglist>(MAP_TYPE &amp;map_obj, int lenList, int *keylist, int *vallist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyValues</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1af46d3341fe4568aa0e4d4fb6b5f1d7</anchor>
      <arglist>(MAP_TYPE &amp;map_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aef0b2ab2927c884f26042856ac4d2efb</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, FEI_OSTREAM &amp;os, const char *lineprefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packRaggedTable</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4145cf7588399d3e1efb33290504054a</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, std::vector&lt; int &gt; &amp;intdata)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a73c9175e24ed6599b247a49a366e7cd2</anchor>
      <arglist>(const std::vector&lt; snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; * &gt; &amp;tables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af2aa95997091815bc7885f6af8fe703b</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, fei::SparseRowGraph &amp;srg)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aacda491eedb68a90749b90e556879b57</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNonzeros</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a357a61ba7a10e3d6915632e10a09b3e7</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_test.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test/</path>
    <filename>fei__test_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">base/fei_iostream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">base/fei_utils.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="test__Set_8hpp" name="test_Set.hpp" local="no" imported="no">test_utils/test_Set.hpp</includes>
    <includes id="test__Database_8hpp" name="test_Database.hpp" local="no" imported="no">test_utils/test_Database.hpp</includes>
    <includes id="test__EqnBuffer_8hpp" name="test_EqnBuffer.hpp" local="no" imported="no">test_utils/test_EqnBuffer.hpp</includes>
    <includes id="test__EqnCommMgr_8hpp" name="test_EqnCommMgr.hpp" local="no" imported="no">test_utils/test_EqnCommMgr.hpp</includes>
    <includes id="test__Algebraic_8hpp" name="test_Algebraic.hpp" local="no" imported="no">test_utils/test_Algebraic.hpp</includes>
    <includes id="test__AztecWrappers_8hpp" name="test_AztecWrappers.hpp" local="no" imported="no">test_utils/test_AztecWrappers.hpp</includes>
    <includes id="test__misc_8hpp" name="test_misc.hpp" local="no" imported="no">test_utils/test_misc.hpp</includes>
    <includes id="test__Factory_8hpp" name="test_Factory.hpp" local="no" imported="no">test_utils/test_Factory.hpp</includes>
    <includes id="test__SNL__FEI__Structure_8hpp" name="test_SNL_FEI_Structure.hpp" local="no" imported="no">test_utils/test_SNL_FEI_Structure.hpp</includes>
    <includes id="test__FEI__Implementation_8hpp" name="test_FEI_Implementation.hpp" local="no" imported="no">test_utils/test_FEI_Implementation.hpp</includes>
    <includes id="test__FEI__Impl_8hpp" name="test_FEI_Impl.hpp" local="no" imported="no">test_utils/test_FEI_Impl.hpp</includes>
    <includes id="test__Tables_8hpp" name="test_Tables.hpp" local="no" imported="no">test_utils/test_Tables.hpp</includes>
    <includes id="test__PointBlockMap_8hpp" name="test_PointBlockMap.hpp" local="no" imported="no">test_utils/test_PointBlockMap.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="test__Vector_8hpp" name="test_Vector.hpp" local="no" imported="no">test_utils/test_Vector.hpp</includes>
    <includes id="test__Utils_8hpp" name="test_Utils.hpp" local="no" imported="no">test_utils/test_Utils.hpp</includes>
    <includes id="test__Matrix_8hpp" name="test_Matrix.hpp" local="no" imported="no">test_utils/test_Matrix.hpp</includes>
    <includes id="test__LinearSystem_8hpp" name="test_LinearSystem.hpp" local="no" imported="no">test_utils/test_LinearSystem.hpp</includes>
    <includes id="test__benchmarks_8hpp" name="test_benchmarks.hpp" local="no" imported="no">test_utils/test_benchmarks.hpp</includes>
    <includes id="test__FEI_8hpp" name="test_FEI.hpp" local="no" imported="no">test_utils/test_FEI.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="poisson__beam__mains_8hpp" name="poisson_beam_mains.hpp" local="yes" imported="no">test_utils/poisson_beam_mains.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_benchmarks</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a273ca22b324acf041be7a49f91bbf6bb</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_library_plugins</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a8156573f566229cbfb128bbff152b596</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>execute_named_test</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a69f9bbdc868968575726d451b16b16b2</anchor>
      <arglist>(const std::string &amp;testname, int argc, char **argv, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_input_and_execute_fullsystem_tests</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a6da69cffe9bd68e2898cd59d2c4beeb7</anchor>
      <arglist>(const std::string &amp;filename, int argc, char **argv, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_unit_tests</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>ac9d45e32fbd9d521308d7d74d1c02322</anchor>
      <arglist>(const std::string &amp;path, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_fullsystem_tests</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>acc3ef530112012780c0750c90cdfb4e9</anchor>
      <arglist>(MPI_Comm comm, const std::string &amp;path, fei::ParameterSet &amp;name_numproc_pairs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>split_four_procs_into_two_groups</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>abbaf0deca46a6c05a254a86efbf0a32d</anchor>
      <arglist>(MPI_Comm comm, MPI_Comm &amp;newcomm1, MPI_Group &amp;newgroup1, MPI_Comm &amp;newcomm2, MPI_Group &amp;newgroup2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fei__test_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_test_plugins.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test/</path>
    <filename>fei__test__plugins_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="test__Factory_8hpp" name="test_Factory.hpp" local="no" imported="no">test_utils/test_Factory.hpp</includes>
    <includes id="test__Vector_8hpp" name="test_Vector.hpp" local="no" imported="no">test_utils/test_Vector.hpp</includes>
    <includes id="test__Matrix_8hpp" name="test_Matrix.hpp" local="no" imported="no">test_utils/test_Matrix.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__test__plugins_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fei__test__plugins_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_test_utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>fei__test__utils_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">fei_test_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei_test_utils</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__test__utils_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>construct_filename</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a60bf3aa8af2ca7ac02783a76fe096f87</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initialize_mpi</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a51faa95dd543b6b4d7de8d4f8be696b5</anchor>
      <arglist>(int argc, char **argv, int &amp;localProc, int &amp;numProcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bool_arg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa2e0be9300ec4b2043debb850425e742</anchor>
      <arglist>(const char *flag, int argc, char **argv, bool default_result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_arg_value</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>afa5e98fe19c58cc985c9ad9dc5967aa1</anchor>
      <arglist>(const char *flag, int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast_string</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac09056191b19f63f8a5dfbe1ed499736</anchor>
      <arglist>(MPI_Comm comm, int root, std::string &amp;strg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_file_lines_into_strings</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ae4ff60d62fd35369aea16ede19ddf5ed</anchor>
      <arglist>(const char *filename, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_filename_and_read_input</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a603040461e8ede9ebb995f20367d2580</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int localProc, std::vector&lt; std::string &gt; &amp;stdstrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_input_file</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac919a3b67e6f777b095c54ae6ea5a5c0</anchor>
      <arglist>(const char *filename, MPI_Comm comm, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac8257ddf2c09eab1bbd2d26331cf3765</anchor>
      <arglist>(const char *filename, const char *testname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>within_percentage_margin</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aade5423196a53cfa5474c5c73ca374b1</anchor>
      <arglist>(double value1, double value2, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>whichArg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a33e6d60554e72fd2051efe87da0c7526</anchor>
      <arglist>(int argc, const char *const *argv, const char *findarg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_and_cout_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a72bc58728decd11bd5283a7f7bdaf634</anchor>
      <arglist>(std::string testname, double value, double file_value, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>check_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa5102548a1363fcf4b081fb27a59ec40</anchor>
      <arglist>(double value, double goldvalue, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare_with_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa44613e6541abb9076a5083fc39e0a8b</anchor>
      <arglist>(const char *name, double benchmark, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dirname</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a656f9b7c5511b912b6cdc0a756cf09c1</anchor>
      <arglist>(const char *name, char *&amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_args</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a325b0253ba48fedb765f2fb7d4b64b1f</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMatrices</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa608d9647e4f07bcabce22ea8943cc36</anchor>
      <arglist>(fei::FillableMat &amp;mat1, fei::FillableMat &amp;mat2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aaca2723d76507fc54839726839e2a92f</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa87eede44f196f10740849f30e1d103c</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a6baa66bf9dd0582c065ae1d752846961</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_feiMatrix_to_FillableMat</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ade864ba02d3723524d684cbb3e608c74</anchor>
      <arglist>(fei::Matrix &amp;feimat, fei::FillableMat &amp;fmat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_test_utils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>fei__test__utils_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <namespace>fei_test_utils</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>construct_filename</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a60bf3aa8af2ca7ac02783a76fe096f87</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initialize_mpi</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a51faa95dd543b6b4d7de8d4f8be696b5</anchor>
      <arglist>(int argc, char **argv, int &amp;localProc, int &amp;numProcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bool_arg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa2e0be9300ec4b2043debb850425e742</anchor>
      <arglist>(const char *flag, int argc, char **argv, bool default_result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_arg_value</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>afa5e98fe19c58cc985c9ad9dc5967aa1</anchor>
      <arglist>(const char *flag, int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast_string</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac09056191b19f63f8a5dfbe1ed499736</anchor>
      <arglist>(MPI_Comm comm, int root, std::string &amp;strg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_filename_and_read_input</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a603040461e8ede9ebb995f20367d2580</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int localProc, std::vector&lt; std::string &gt; &amp;stdstrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_file_lines_into_strings</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ae4ff60d62fd35369aea16ede19ddf5ed</anchor>
      <arglist>(const char *filename, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_input_file</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac919a3b67e6f777b095c54ae6ea5a5c0</anchor>
      <arglist>(const char *filename, MPI_Comm comm, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac8257ddf2c09eab1bbd2d26331cf3765</anchor>
      <arglist>(const char *filename, const char *testname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>within_percentage_margin</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aade5423196a53cfa5474c5c73ca374b1</anchor>
      <arglist>(double value1, double value2, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_and_cout_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a72bc58728decd11bd5283a7f7bdaf634</anchor>
      <arglist>(std::string testname, double value, double file_value, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>check_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa5102548a1363fcf4b081fb27a59ec40</anchor>
      <arglist>(double value, double goldvalue, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare_with_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa44613e6541abb9076a5083fc39e0a8b</anchor>
      <arglist>(const char *name, double benchmark, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>whichArg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a33e6d60554e72fd2051efe87da0c7526</anchor>
      <arglist>(int argc, const char *const *argv, const char *findarg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dirname</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a656f9b7c5511b912b6cdc0a756cf09c1</anchor>
      <arglist>(const char *name, char *&amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_args</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a325b0253ba48fedb765f2fb7d4b64b1f</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMatrices</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa608d9647e4f07bcabce22ea8943cc36</anchor>
      <arglist>(fei::FillableMat &amp;mat1, fei::FillableMat &amp;mat2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aaca2723d76507fc54839726839e2a92f</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa87eede44f196f10740849f30e1d103c</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a6baa66bf9dd0582c065ae1d752846961</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_feiMatrix_to_FillableMat</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ade864ba02d3723524d684cbb3e608c74</anchor>
      <arglist>(fei::Matrix &amp;feimat, fei::FillableMat &amp;fmat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEI_tester.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>FEI__tester_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="FEI__tester_8hpp" name="FEI_tester.hpp" local="no" imported="no">test_utils/FEI_tester.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__FEI__Impl_8hpp" name="fei_FEI_Impl.hpp" local="no" imported="no">fei_FEI_Impl.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>FEI__tester_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FEI_tester.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>FEI__tester_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="feitester_8hpp" name="feitester.hpp" local="no" imported="no">test_utils/feitester.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <class kind="class">FEI_tester</class>
  </compound>
  <compound kind="file">
    <name>fei_Trilinos_Helpers.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Trilinos__Helpers_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Include__Trilinos_8hpp" name="fei_Include_Trilinos.hpp" local="no" imported="no">fei_Include_Trilinos.hpp</includes>
    <includes id="fei__Trilinos__Helpers_8hpp" name="fei_Trilinos_Helpers.hpp" local="no" imported="no">fei_Trilinos_Helpers.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <namespace>Trilinos_Helpers</namespace>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterset</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>a892e398c7d778be4655905428ddc0817</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset, Teuchos::ParameterList &amp;paramlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterlist</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>ab6fbc134d8796be002aa2dfbaa063d43</anchor>
      <arglist>(const Teuchos::ParameterList &amp;paramlist, fei::ParameterSet &amp;paramset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Trilinos_Helpers.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__Trilinos__Helpers_8hpp</filename>
    <includes id="fei__trilinos__macros_8hpp" name="fei_trilinos_macros.hpp" local="yes" imported="no">fei_trilinos_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__Include__Trilinos_8hpp" name="fei_Include_Trilinos.hpp" local="no" imported="no">fei_Include_Trilinos.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__LinearProblemManager_8hpp" name="fei_LinearProblemManager.hpp" local="no" imported="no">fei_LinearProblemManager.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <namespace>Trilinos_Helpers</namespace>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterset</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>a892e398c7d778be4655905428ddc0817</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset, Teuchos::ParameterList &amp;paramlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterlist</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>ab6fbc134d8796be002aa2dfbaa063d43</anchor>
      <arglist>(const Teuchos::ParameterList &amp;paramlist, fei::ParameterSet &amp;paramset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_trilinos_macros.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__trilinos__macros_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fei_utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__utils_8cpp</filename>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="yes" imported="no">fei_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="yes" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="yes" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="yes" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="yes" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="yes" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__version_8h" name="fei_version.h" local="yes" imported="no">fei_version.h</includes>
  </compound>
  <compound kind="file">
    <name>fei_utils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__utils_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__version_8h" name="fei_version.h" local="no" imported="no">fei_version.h</includes>
    <namespace>fei_VERSION</namespace>
    <namespace>fei</namespace>
    <namespace>fei::utils</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespacefei__VERSION.html</anchorfile>
      <anchor>af03563026b62bbefc1c6b1de55bc3963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ace8702f5572dc849bb7c4b301cf2c367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpu_time</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ad42d9849bbc0ac7a38ea31e562005eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::OutputLevel</type>
      <name>string_to_output_level</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>acfb2c2f71b1c3beb6bdf85c932c83aa7</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore *</type>
      <name>get_LinearSystemCore</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a759d7563f164956bba6ea17d38ef6647</anchor>
      <arglist>(fei::Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConnectivityArrays</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a3a9c942efcfacdbab37cd1e37b3bc030</anchor>
      <arglist>(fei::MatrixGraph &amp;matrixGraph, std::vector&lt; int &gt; &amp;nodes, std::vector&lt; int &gt; &amp;elem_offsets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>char_ptrs_to_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a67b94945ba99c04edba4a0dfb3ba4eb8</anchor>
      <arglist>(int numStrings, const char *const *charstrings, std::vector&lt; std::string &gt; &amp;stdstrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strings_to_char_ptrs</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ad89751e19c5c7ce7fc8ce465def6af26</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;stdstrings, int &amp;numStrings, const char **&amp;charPtrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a0659cd5e66f4dd3e3eb533971e0d8af4</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;stdstrings, const char *separator_string, fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_ParameterSet_to_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a12904d2a23a2cf952736441d5d8a786f</anchor>
      <arglist>(const fei::ParameterSet *paramset, std::vector&lt; std::string &gt; &amp;paramStrings)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Vector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__ostream__ops_8hpp" name="fei_ostream_ops.hpp" local="no" imported="no">fei_ostream_ops.hpp</includes>
    <class kind="class">fei::Vector</class>
    <class kind="class">fei::Vector::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Vector_core.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector__core_8cpp</filename>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__Vector__core_8hpp" name="fei_Vector_core.hpp" local="yes" imported="no">fei_Vector_core.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="yes" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="yes" imported="no">fei_CSVec.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="yes" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="yes" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Vector__core_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Vector_core.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector__core_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__EqnComm_8hpp" name="fei_EqnComm.hpp" local="no" imported="no">fei_EqnComm.hpp</includes>
    <class kind="class">fei::Vector_core</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_Vector_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector__Impl_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__VectorTraits_8hpp" name="fei_VectorTraits.hpp" local="no" imported="no">fei_VectorTraits.hpp</includes>
    <includes id="fei__VectorTraits__CSVec_8hpp" name="fei_VectorTraits_CSVec.hpp" local="no" imported="no">fei_VectorTraits_CSVec.hpp</includes>
    <includes id="fei__VectorTraits__LinSysCore_8hpp" name="fei_VectorTraits_LinSysCore.hpp" local="no" imported="no">fei_VectorTraits_LinSysCore.hpp</includes>
    <includes id="fei__VectorTraits__LinProbMgr_8hpp" name="fei_VectorTraits_LinProbMgr.hpp" local="no" imported="no">fei_VectorTraits_LinProbMgr.hpp</includes>
    <includes id="fei__VectorTraits__FEData_8hpp" name="fei_VectorTraits_FEData.hpp" local="no" imported="no">fei_VectorTraits_FEData.hpp</includes>
    <includes id="snl__fei__FEVectorTraits_8hpp" name="snl_fei_FEVectorTraits.hpp" local="no" imported="no">snl_fei_FEVectorTraits.hpp</includes>
    <includes id="snl__fei__FEVectorTraits__FED_8hpp" name="snl_fei_FEVectorTraits_FED.hpp" local="no" imported="no">snl_fei_FEVectorTraits_FED.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="no" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Vector__core_8hpp" name="fei_Vector_core.hpp" local="no" imported="no">fei_Vector_core.hpp</includes>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::Vector_Impl</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Vector__Impl_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Vector__Impl_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Vector_Local.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector__Local_8cpp</filename>
    <includes id="fei__Vector__Local_8hpp" name="fei_Vector_Local.hpp" local="yes" imported="no">fei_Vector_Local.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__Vector__Local_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_Vector_Local.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__Vector__Local_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <class kind="class">fei::Vector_Local</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorReducer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorReducer_8cpp</filename>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Vector__core_8hpp" name="fei_Vector_core.hpp" local="no" imported="no">fei_Vector_core.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__VectorReducer_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_VectorReducer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorReducer_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::VectorReducer</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__VectorReducer_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_VectorSpace.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorSpace_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="yes" imported="no">fei_utils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__chk__mpi_8hpp" name="fei_chk_mpi.hpp" local="yes" imported="no">fei_chk_mpi.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__set__shared__ids_8hpp" name="fei_set_shared_ids.hpp" local="no" imported="no">fei_set_shared_ids.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="yes" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="yes" imported="no">fei_Record.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="yes" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="yes" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="snl__fei__RecordMsgHandler_8hpp" name="snl_fei_RecordMsgHandler.hpp" local="yes" imported="no">snl_fei_RecordMsgHandler.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="yes" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="yes" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="yes" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="yes" imported="no">fei_FieldMask.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="yes" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="yes" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::RecordAttributeCounter</class>
    <class kind="class">fei::BlkIndexAccessor</class>
    <namespace>fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>fei__VectorSpace_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fei_VectorSpace.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorSpace_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__constants_8hpp" name="fei_constants.hpp" local="no" imported="no">fei_constants.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__FieldDofMap_8hpp" name="fei_FieldDofMap.hpp" local="no" imported="no">fei_FieldDofMap.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <class kind="class">fei::Record</class>
    <class kind="class">fei::Record_Operator</class>
    <class kind="class">fei::SharedIDs</class>
    <class kind="class">fei::VectorSpace</class>
    <class kind="class">fei::VectorSpace::Factory</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">fei::VectorTraits</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_Aztec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__VectorTraits__Aztec_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_CSVec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorTraits__CSVec_8hpp</filename>
    <includes id="fei__VectorTraits_8hpp" name="fei_VectorTraits.hpp" local="no" imported="no">fei_VectorTraits.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <class kind="struct">fei::VectorTraits&lt; CSVec &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_Epetra.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/support-Trilinos/</path>
    <filename>fei__VectorTraits__Epetra_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_FEData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorTraits__FEData_8hpp</filename>
    <includes id="fei__VectorTraits_8hpp" name="fei_VectorTraits.hpp" local="no" imported="no">fei_VectorTraits.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <class kind="struct">fei::VectorTraits&lt; FiniteElementData &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_LinProbMgr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorTraits__LinProbMgr_8hpp</filename>
    <includes id="fei__VectorTraits_8hpp" name="fei_VectorTraits.hpp" local="no" imported="no">fei_VectorTraits.hpp</includes>
    <includes id="fei__LinearProblemManager_8hpp" name="fei_LinearProblemManager.hpp" local="no" imported="no">fei_LinearProblemManager.hpp</includes>
    <class kind="struct">fei::VectorTraits&lt; fei::LinearProblemManager &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_VectorTraits_LinSysCore.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__VectorTraits__LinSysCore_8hpp</filename>
    <includes id="fei__VectorTraits_8hpp" name="fei_VectorTraits.hpp" local="no" imported="no">fei_VectorTraits.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <class kind="struct">fei::VectorTraits&lt; LinearSystemCore &gt;</class>
    <namespace>fei</namespace>
  </compound>
  <compound kind="file">
    <name>fei_version.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>fei__version_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>fei_VERSION</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a408906e2c9bf73bf4c603c6885613b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_MAJOR_VERSION</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a5f9e1c1cf1cabfe8a2c3bf35a61341d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_MINOR_VERSION</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>ae916b771d35bfff76161491d07119447</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_PATCH_VERSION</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a540a6bd965afd4288d67cd2dab030159</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_Implementation</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a94c56bc2da06f5247d3a83f9203d1023</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FEI_create</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a7be571fdc8228806f5da7655537b22c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>fei_version_number</name>
      <anchorfile>fei__version_8h.html</anchorfile>
      <anchor>a9a1e07b0b3e776180e06eb17a3f07855</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>feiDriver_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>feiDriver__main_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
    <includes id="PoissonData_8hpp" name="PoissonData.hpp" local="no" imported="no">test_utils/PoissonData.hpp</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
    <includes id="BCNodeSet_8hpp" name="BCNodeSet.hpp" local="no" imported="no">test_utils/BCNodeSet.hpp</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="driverData_8hpp" name="driverData.hpp" local="no" imported="no">test_utils/driverData.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>feiDriver__main_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>feiDriver_main</name>
      <anchorfile>feiDriver__main_8cpp.html</anchorfile>
      <anchor>a641f617b7cf053656a0b3751d402cfbc</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>feitester.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>feitester_8hpp</filename>
    <class kind="class">feitester</class>
  </compound>
  <compound kind="file">
    <name>HexBeam.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>HexBeam_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="no" imported="no">test_utils/HexBeam.hpp</includes>
    <namespace>HexBeam_Functions</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>HexBeam_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print_cube_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae8fa06aa0c3d885cb34fcd385ad8265e</anchor>
      <arglist>(HexBeam &amp;hexcube, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a1c69f14e5e1c7533f1842ad354a6630f</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af32c66110b13e0cd69630233516566a7</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a7f02e04ff74b06a12139371be63c07f6</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86fba5eed8e0e18f1868107304c4201c</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a3b9570e9e880859faf7c2fe59b164b42</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ac1e98418141eb8b2ca2e4c4b784e86f8</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae3172575b7a2f831e4e5d96f79b932a6</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a180bc7f044ec7d2d27a3f4d835779bbc</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a610a0a25fbb5dcb5940227d61044559f</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube, int localProc, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_slave_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ad9a75cc25c7d525ef1426125f5f3c7f5</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>add5ca0fdb5eaae74718002a8fd7b0967</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, fei::Matrix *mat, fei::Vector *rhs, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af95f63269bdf1ca971bf91631a96d001</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86de078d84f387bb6a4d163d74b95508</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HexBeam.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>HexBeam_8hpp</filename>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <class kind="class">HexBeam</class>
    <namespace>HexBeam_Functions</namespace>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a1c69f14e5e1c7533f1842ad354a6630f</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af32c66110b13e0cd69630233516566a7</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a7f02e04ff74b06a12139371be63c07f6</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a3b9570e9e880859faf7c2fe59b164b42</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86fba5eed8e0e18f1868107304c4201c</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ac1e98418141eb8b2ca2e4c4b784e86f8</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>print_cube_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae8fa06aa0c3d885cb34fcd385ad8265e</anchor>
      <arglist>(HexBeam &amp;hexcube, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae3172575b7a2f831e4e5d96f79b932a6</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a180bc7f044ec7d2d27a3f4d835779bbc</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a610a0a25fbb5dcb5940227d61044559f</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube, int localProc, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_slave_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ad9a75cc25c7d525ef1426125f5f3c7f5</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>add5ca0fdb5eaae74718002a8fd7b0967</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, fei::Matrix *mat, fei::Vector *rhs, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af95f63269bdf1ca971bf91631a96d001</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86de078d84f387bb6a4d163d74b95508</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HexBeamCR.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>HexBeamCR_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="HexBeamCR_8hpp" name="HexBeamCR.hpp" local="no" imported="no">test_utils/HexBeamCR.hpp</includes>
  </compound>
  <compound kind="file">
    <name>HexBeamCR.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>HexBeamCR_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="yes" imported="no">fei_macros.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="yes" imported="no">test_utils/HexBeam.hpp</includes>
    <class kind="class">HexBeamCR</class>
  </compound>
  <compound kind="file">
    <name>index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/browser/doc/</path>
    <filename>index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>InputData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>InputData_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">ElemContribution</class>
    <class kind="class">InputData</class>
  </compound>
  <compound kind="file">
    <name>LibraryFactory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>LibraryFactory_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
  </compound>
  <compound kind="file">
    <name>LibraryFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>LibraryFactory_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <namespace>fei</namespace>
    <member kind="function">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>create_LibraryWrapper</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>adac3dc13d80c7bb052495bb5bc93c45d</anchor>
      <arglist>(MPI_Comm comm, const char *libraryName)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>create_fei_Factory</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a90066727fac24dcfeef4085e0174caa7</anchor>
      <arglist>(MPI_Comm comm, const char *libraryName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cr_lagrange_20quad_old/parameters.Aztec</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test/cr_lagrange_20quad_old/</path>
    <filename>cr__lagrange__20quad__old_2parameters_8Aztec</filename>
  </compound>
  <compound kind="file">
    <name>elemDOF_Aztec/parameters.Aztec</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test/elemDOF_Aztec/</path>
    <filename>elemDOF__Aztec_2parameters_8Aztec</filename>
  </compound>
  <compound kind="file">
    <name>poisson.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/example/poisson/</path>
    <filename>poisson_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="yes" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="yes" imported="no">fei_base.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
    <includes id="PoissonData_8hpp" name="PoissonData.hpp" local="no" imported="no">test_utils/PoissonData.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>poisson_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson3_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>poisson3__main_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
    <includes id="PoissonData_8hpp" name="PoissonData.hpp" local="no" imported="no">test_utils/PoissonData.hpp</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>poisson3_main</name>
      <anchorfile>poisson3__main_8cpp.html</anchorfile>
      <anchor>a0881565d4201b3350ae28ebf4194f0af</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson_beam_mains.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>poisson__beam__mains_8hpp</filename>
    <member kind="function">
      <type>int</type>
      <name>poisson_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a020d51122df6395e87bdde441c3acfe6</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>poisson3_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a0881565d4201b3350ae28ebf4194f0af</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beam_oldfei_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a4fb85cac82fa28ed02a0a7decf2b6373</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beam_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a4d0d099433e76eb4d9026997341706f5</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>feiDriver_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a641f617b7cf053656a0b3751d402cfbc</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cFeiTester_main</name>
      <anchorfile>poisson__beam__mains_8hpp.html</anchorfile>
      <anchor>a381a693b3c131a25d2bd5d34beaa81b7</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Poisson_Elem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>Poisson__Elem_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Poisson_Elem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>Poisson__Elem_8hpp</filename>
    <class kind="class">Poisson_Elem</class>
  </compound>
  <compound kind="file">
    <name>poisson_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>poisson__main_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
    <includes id="PoissonData_8hpp" name="PoissonData.hpp" local="no" imported="no">test_utils/PoissonData.hpp</includes>
    <includes id="ElemBlock_8hpp" name="ElemBlock.hpp" local="no" imported="no">test_utils/ElemBlock.hpp</includes>
    <includes id="CRSet_8hpp" name="CRSet.hpp" local="no" imported="no">test_utils/CRSet.hpp</includes>
    <includes id="CommNodeSet_8hpp" name="CommNodeSet.hpp" local="no" imported="no">test_utils/CommNodeSet.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>poisson__main_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>poisson_main</name>
      <anchorfile>poisson__main_8cpp.html</anchorfile>
      <anchor>a020d51122df6395e87bdde441c3acfe6</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoissonData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>PoissonData_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="Poisson__Elem_8hpp" name="Poisson_Elem.hpp" local="no" imported="no">test_utils/Poisson_Elem.hpp</includes>
    <includes id="PoissonData_8hpp" name="PoissonData.hpp" local="no" imported="no">test_utils/PoissonData.hpp</includes>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>int_sqrt</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>af7c425210498608e883c51e2b4493875</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a240dcbd1b54475cf91f1e29ad6d5fd5a</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_shared_nodes</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a4f6dcdc1770738d0a977c59b6f39870a</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a37c6f856b8efa6ccfdc2e0bf8c87a5ab</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data_putrhs</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>af18e29d0812e967eb8beda7c6839006e</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a80a2f63b69e5f6cc5f198c36cb9a67a8</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>ad50969c67e2ac933e2dc7e93a694e6bf</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_shared_nodes</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a8beb0775a72443761248269d72024587</anchor>
      <arglist>(fei::VectorSpace *nodeSpace, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a76a2c3c3c9546943b4f7daf047e5e3b4</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, fei::Matrix *mat, fei::Vector *rhs, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>PoissonData_8cpp.html</anchorfile>
      <anchor>a503a8388147d59eea57a1d40e64dcf4c</anchor>
      <arglist>(fei::LinearSystem *linSys, PoissonData &amp;poissonData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoissonData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>PoissonData_8hpp</filename>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <class kind="class">PoissonData</class>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a240dcbd1b54475cf91f1e29ad6d5fd5a</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>ad50969c67e2ac933e2dc7e93a694e6bf</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_shared_nodes</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a4f6dcdc1770738d0a977c59b6f39870a</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set_shared_nodes</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a8beb0775a72443761248269d72024587</anchor>
      <arglist>(fei::VectorSpace *nodeSpace, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a37c6f856b8efa6ccfdc2e0bf8c87a5ab</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data_putrhs</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>af18e29d0812e967eb8beda7c6839006e</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a76a2c3c3c9546943b4f7daf047e5e3b4</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, fei::Matrix *mat, fei::Vector *rhs, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a80a2f63b69e5f6cc5f198c36cb9a67a8</anchor>
      <arglist>(FEI *fei, PoissonData &amp;poissonData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>PoissonData_8hpp.html</anchorfile>
      <anchor>a503a8388147d59eea57a1d40e64dcf4c</anchor>
      <arglist>(fei::LinearSystem *linSys, PoissonData &amp;poissonData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_ArrayUtils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__ArrayUtils_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="yes" imported="no">fei_fwd.hpp</includes>
    <namespace>snl_fei</namespace>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ac8f5da518a78b5e581854c1302fe6008</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertion_sort_with_companions</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a03bdabd780995aafffb0301647cbc9f6</anchor>
      <arglist>(int len, int *array, T *companions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lowerBound</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a2867e8b2fa4d5f4e79cf88edb56e3526</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aeb3ed46ce9084dbaa9d31b3e3bf6516e</anchor>
      <arglist>(const T &amp;item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a3d63e9ae3fc516eaa0448848b7a1f506</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ac165b7a74bdfc2f4a70150944a87f241</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a96656ae6edd7fbb4b28d35640a1c4933</anchor>
      <arglist>(const T &amp;item, const T *list, int, int start, int end, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a27cbd41e6c3bc058dd30be4410c6b3ee</anchor>
      <arglist>(int numItems, const T *items, int *offsets, const T *list, int listLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>abdb6ce13effe875381e1e325b157c80c</anchor>
      <arglist>(const T &amp;item, std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>abfab2f19759dc233ff760ad75a794a89</anchor>
      <arglist>(const T &amp;item, T *&amp;list, int &amp;len, int &amp;allocLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>listInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa04187008feb964e5adf123557fa34c6</anchor>
      <arglist>(const T &amp;item, int offset, T *&amp;list, int &amp;usedLength, int &amp;allocatedLength, int allocChunkSize=200)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>searchList</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a07ba321cb3a6092d5111d5b818ce8d19</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_BlkSizeMsgHandler.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__BlkSizeMsgHandler_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__BlkSizeMsgHandler_8hpp" name="snl_fei_BlkSizeMsgHandler.hpp" local="no" imported="no">snl_fei_BlkSizeMsgHandler.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="no" imported="no">fei_FieldMask.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="no" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__BlkSizeMsgHandler_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_BlkSizeMsgHandler.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__BlkSizeMsgHandler_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Graph_8hpp" name="fei_Graph.hpp" local="no" imported="no">fei_Graph.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <class kind="class">snl_fei::BlkSizeMsgHandler</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_BlockMatrixTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__BlockMatrixTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">snl_fei::BlockMatrixTraits</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_Broker.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Broker_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">snl_fei::Broker</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_Broker_FEData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Broker__FEData_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__Broker__FEData_8hpp" name="snl_fei_Broker_FEData.hpp" local="no" imported="no">snl_fei_Broker_FEData.hpp</includes>
  </compound>
  <compound kind="file">
    <name>snl_fei_Broker_FEData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Broker__FEData_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="snl__fei__Broker_8hpp" name="snl_fei_Broker.hpp" local="no" imported="no">snl_fei_Broker.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__ConnectivityBlock_8hpp" name="fei_ConnectivityBlock.hpp" local="no" imported="no">fei_ConnectivityBlock.hpp</includes>
    <includes id="snl__fei__LinearSystem__FEData_8hpp" name="snl_fei_LinearSystem_FEData.hpp" local="no" imported="no">snl_fei_LinearSystem_FEData.hpp</includes>
    <includes id="fei__Lookup__Impl_8hpp" name="fei_Lookup_Impl.hpp" local="no" imported="no">fei_Lookup_Impl.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">snl_fei::Broker_FEData</class>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__Broker__FEData_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_Broker_LinSysCore.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Broker__LinSysCore_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__Broker__LinSysCore_8hpp" name="snl_fei_Broker_LinSysCore.hpp" local="no" imported="no">snl_fei_Broker_LinSysCore.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__Broker__LinSysCore_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_Broker_LinSysCore.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Broker__LinSysCore_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__Broker_8hpp" name="snl_fei_Broker.hpp" local="no" imported="no">snl_fei_Broker.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Lookup__Impl_8hpp" name="fei_Lookup_Impl.hpp" local="no" imported="no">fei_Lookup_Impl.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="snl__fei__LinearSystem__General_8hpp" name="snl_fei_LinearSystem_General.hpp" local="no" imported="no">snl_fei_LinearSystem_General.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">snl_fei::Broker_LinSysCore</class>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__Broker__LinSysCore_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_Constraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Constraint_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <class kind="class">snl_fei::Constraint</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_Factory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Factory_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>_snl_fei_Factory_cpp_</name>
      <anchorfile>snl__fei__Factory_8cpp.html</anchorfile>
      <anchor>aa3b3b2b0d95bab4b84b9d23cb4eb3156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_Factory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Factory_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="snl__fei__Broker__FEData_8hpp" name="snl_fei_Broker_FEData.hpp" local="no" imported="no">snl_fei_Broker_FEData.hpp</includes>
    <includes id="snl__fei__Broker__LinSysCore_8hpp" name="snl_fei_Broker_LinSysCore.hpp" local="no" imported="no">snl_fei_Broker_LinSysCore.hpp</includes>
    <includes id="fei__Solver_8hpp" name="fei_Solver.hpp" local="no" imported="no">fei_Solver.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__Reducer_8hpp" name="fei_Reducer.hpp" local="no" imported="no">fei_Reducer.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__VectorReducer_8hpp" name="fei_VectorReducer.hpp" local="no" imported="no">fei_VectorReducer.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">snl_fei::Factory</class>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__Factory_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_FEMatrixTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__FEMatrixTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">snl_fei::FEMatrixTraits</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_FEMatrixTraits_FED.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__FEMatrixTraits__FED_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="snl__fei__FEMatrixTraits_8hpp" name="snl_fei_FEMatrixTraits.hpp" local="no" imported="no">snl_fei_FEMatrixTraits.hpp</includes>
    <class kind="struct">snl_fei::FEMatrixTraits&lt; FiniteElementData &gt;</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_FEVectorTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__FEVectorTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">snl_fei::FEVectorTraits</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_FEVectorTraits_FED.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__FEVectorTraits__FED_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__FEVectorTraits_8hpp" name="snl_fei_FEVectorTraits.hpp" local="no" imported="no">snl_fei_FEVectorTraits.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <class kind="struct">snl_fei::FEVectorTraits&lt; FiniteElementData &gt;</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_LinearSystem_FEData.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__LinearSystem__FEData_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__FiniteElementData_8hpp" name="fei_FiniteElementData.hpp" local="no" imported="no">fei_FiniteElementData.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__LinearSystem__FEData_8hpp" name="snl_fei_LinearSystem_FEData.hpp" local="no" imported="no">snl_fei_LinearSystem_FEData.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__DirichletBCRecord_8hpp" name="fei_DirichletBCRecord.hpp" local="no" imported="no">fei_DirichletBCRecord.hpp</includes>
    <includes id="fei__DirichletBCManager_8hpp" name="fei_DirichletBCManager.hpp" local="no" imported="no">fei_DirichletBCManager.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__FEDataFilter_8hpp" name="fei_FEDataFilter.hpp" local="no" imported="no">fei_FEDataFilter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__LinearSystem__FEData_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_LinearSystem_FEData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__LinearSystem__FEData_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__LinearSystem_8hpp" name="fei_LinearSystem.hpp" local="no" imported="no">fei_LinearSystem.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">snl_fei::LinearSystem_FEData</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_LinearSystem_General.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__LinearSystem__General_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="snl__fei__LinearSystem__General_8hpp" name="snl_fei_LinearSystem_General.hpp" local="no" imported="no">snl_fei_LinearSystem_General.hpp</includes>
    <includes id="fei__MatrixReducer_8hpp" name="fei_MatrixReducer.hpp" local="no" imported="no">fei_MatrixReducer.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="no" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="fei__impl__utils_8hpp" name="fei_impl_utils.hpp" local="no" imported="no">fei_impl_utils.hpp</includes>
    <includes id="fei__LogManager_8hpp" name="fei_LogManager.hpp" local="no" imported="no">fei_LogManager.hpp</includes>
    <includes id="fei__DirichletBCRecord_8hpp" name="fei_DirichletBCRecord.hpp" local="no" imported="no">fei_DirichletBCRecord.hpp</includes>
    <includes id="fei__DirichletBCManager_8hpp" name="fei_DirichletBCManager.hpp" local="no" imported="no">fei_DirichletBCManager.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__LinSysCoreFilter_8hpp" name="fei_LinSysCoreFilter.hpp" local="no" imported="no">fei_LinSysCoreFilter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__LinearSystem__General_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>extractDirichletBCs</name>
      <anchorfile>snl__fei__LinearSystem__General_8cpp.html</anchorfile>
      <anchor>a27c3011c7c4da9614027d7487d5c5ea2</anchor>
      <arglist>(fei::DirichletBCManager *bcManager, fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, fei::CSVec *essBCvalues, bool resolveConflictRequested, bool bcs_trump_slaves)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_LinearSystem_General.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__LinearSystem__General_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__LinearSystem_8hpp" name="fei_LinearSystem.hpp" local="no" imported="no">fei_LinearSystem.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__Logger_8hpp" name="fei_Logger.hpp" local="no" imported="no">fei_Logger.hpp</includes>
    <class kind="class">snl_fei::LinearSystem_General</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_MapContig.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__MapContig_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">snl_fei::MapContig</class>
    <class kind="class">snl_fei::MapContig::iterator</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_MapTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__MapTraits_8hpp</filename>
    <class kind="struct">snl_fei::MapTraits</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_MapTraits_specialize.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__MapTraits__specialize_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__MapTraits_8hpp" name="snl_fei_MapTraits.hpp" local="no" imported="no">snl_fei_MapTraits.hpp</includes>
    <includes id="snl__fei__MapContig_8hpp" name="snl_fei_MapContig.hpp" local="no" imported="no">snl_fei_MapContig.hpp</includes>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_PointBlockMap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__PointBlockMap_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__PointBlockMap_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_PointBlockMap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__PointBlockMap_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">snl_fei::PointBlockMap</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_RaggedTable.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RaggedTable_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__SetTraits__specialize_8hpp" name="snl_fei_SetTraits_specialize.hpp" local="no" imported="no">snl_fei_SetTraits_specialize.hpp</includes>
    <includes id="snl__fei__MapTraits__specialize_8hpp" name="snl_fei_MapTraits_specialize.hpp" local="no" imported="no">snl_fei_MapTraits_specialize.hpp</includes>
    <includes id="fei__IndexTable_8hpp" name="fei_IndexTable.hpp" local="no" imported="no">fei_IndexTable.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="no" imported="no">fei_Pool_alloc.hpp</includes>
    <class kind="class">snl_fei::RaggedTable</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_RaggedTable_specialize.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RaggedTable__specialize_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__RaggedTable__specialize_8hpp" name="snl_fei_RaggedTable_specialize.hpp" local="no" imported="no">snl_fei_RaggedTable_specialize.hpp</includes>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_RaggedTable_specialize.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RaggedTable__specialize_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="snl__fei__MapContig_8hpp" name="snl_fei_MapContig.hpp" local="no" imported="no">snl_fei_MapContig.hpp</includes>
    <class kind="class">snl_fei::RaggedTable&lt; MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt;</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_RecordCollection.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RecordCollection_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="yes" imported="no">fei_FieldMask.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="yes" imported="no">fei_Record.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="yes" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="yes" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__RecordCollection_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_RecordCollection.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RecordCollection_8hpp</filename>
    <includes id="fei__iosfwd_8hpp" name="fei_iosfwd.hpp" local="no" imported="no">fei_iosfwd.hpp</includes>
    <includes id="fei__Pool__alloc_8hpp" name="fei_Pool_alloc.hpp" local="no" imported="no">fei_Pool_alloc.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="no" imported="no">fei_FieldMask.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="no" imported="no">fei_Record.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">fei::SharedIDs</class>
    <class kind="class">snl_fei::RecordCollection</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__RecordCollection_8hpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_RecordMsgHandler.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RecordMsgHandler_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="snl__fei__RecordMsgHandler_8hpp" name="snl_fei_RecordMsgHandler.hpp" local="yes" imported="no">snl_fei_RecordMsgHandler.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="yes" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="yes" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="yes" imported="no">fei_FieldMask.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__RecordMsgHandler_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_RecordMsgHandler.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__RecordMsgHandler_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">snl_fei::RecordMsgHandler</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_SetTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__SetTraits_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="struct">snl_fei::SetTraits</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_SetTraits_specialize.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__SetTraits__specialize_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="snl__fei__SetTraits_8hpp" name="snl_fei_SetTraits.hpp" local="no" imported="no">snl_fei_SetTraits.hpp</includes>
    <class kind="struct">snl_fei::SetTraits&lt; fei::ctg_set&lt; int &gt; &gt;</class>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>SNL_FEI_Structure.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>SNL__FEI__Structure_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="yes" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="yes" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="yes" imported="no">fei_defs.h</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__Constraint_8hpp" name="snl_fei_Constraint.hpp" local="yes" imported="no">snl_fei_Constraint.hpp</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="yes" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__NodeCommMgr_8hpp" name="fei_NodeCommMgr.hpp" local="yes" imported="no">fei_NodeCommMgr.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="yes" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__SlaveVariable_8hpp" name="fei_SlaveVariable.hpp" local="yes" imported="no">fei_SlaveVariable.hpp</includes>
    <includes id="fei__BlockDescriptor_8hpp" name="fei_BlockDescriptor.hpp" local="yes" imported="no">fei_BlockDescriptor.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="yes" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="yes" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="yes" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="no" imported="no">fei_FillableMat.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="yes" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="fei__Lookup_8hpp" name="fei_Lookup.hpp" local="yes" imported="no">fei_Lookup.hpp</includes>
    <includes id="fei__ConnectivityTable_8hpp" name="fei_ConnectivityTable.hpp" local="yes" imported="no">fei_ConnectivityTable.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="yes" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="yes" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="yes" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>SNL__FEI__Structure_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::Constraint&lt; GlobalID &gt;</type>
      <name>ConstraintType</name>
      <anchorfile>SNL__FEI__Structure_8cpp.html</anchorfile>
      <anchor>aa92d197672152ed03a7d8b7f46573874</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SNL_FEI_Structure.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>SNL__FEI__Structure_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__constants_8hpp" name="fei_constants.hpp" local="no" imported="no">fei_constants.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="yes" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__FieldDofMap_8hpp" name="fei_FieldDofMap.hpp" local="no" imported="no">fei_FieldDofMap.hpp</includes>
    <includes id="fei__CSRMat_8hpp" name="fei_CSRMat.hpp" local="no" imported="no">fei_CSRMat.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__NodeCommMgr_8hpp" name="fei_NodeCommMgr.hpp" local="no" imported="no">fei_NodeCommMgr.hpp</includes>
    <includes id="fei__NodeDatabase_8hpp" name="fei_NodeDatabase.hpp" local="no" imported="no">fei_NodeDatabase.hpp</includes>
    <includes id="fei__NodeDescriptor_8hpp" name="fei_NodeDescriptor.hpp" local="no" imported="no">fei_NodeDescriptor.hpp</includes>
    <includes id="fei__Lookup_8hpp" name="fei_Lookup.hpp" local="no" imported="no">fei_Lookup.hpp</includes>
    <class kind="class">SNL_FEI_Structure</class>
  </compound>
  <compound kind="file">
    <name>snl_fei_SubdMsgHandler.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__SubdMsgHandler_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__SubdMsgHandler_8hpp" name="snl_fei_SubdMsgHandler.hpp" local="no" imported="no">snl_fei_SubdMsgHandler.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__SharedIDs_8hpp" name="fei_SharedIDs.hpp" local="no" imported="no">fei_SharedIDs.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__SubdMsgHandler_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_SubdMsgHandler.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__SubdMsgHandler_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">fei::SharedIDs</class>
    <class kind="class">snl_fei::SubdMsgHandler</class>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
  </compound>
  <compound kind="file">
    <name>snl_fei_tester.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>snl__fei__tester_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__tester_8hpp" name="snl_fei_tester.hpp" local="no" imported="no">test_utils/snl_fei_tester.hpp</includes>
    <includes id="fei__LinearSystemCore_8hpp" name="fei_LinearSystemCore.hpp" local="no" imported="no">fei_LinearSystemCore.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__base_8hpp" name="fei_base.hpp" local="no" imported="no">fei_base.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__tester_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_tester.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>snl__fei__tester_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="feitester_8hpp" name="feitester.hpp" local="no" imported="no">test_utils/feitester.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">snl_fei_tester</class>
  </compound>
  <compound kind="file">
    <name>snl_fei_Utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Utils_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__Record_8hpp" name="fei_Record.hpp" local="yes" imported="no">fei_Record.hpp</includes>
    <includes id="fei__MatrixGraph_8hpp" name="fei_MatrixGraph.hpp" local="no" imported="no">fei_MatrixGraph.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__TemplateUtils_8hpp" name="fei_TemplateUtils.hpp" local="no" imported="no">fei_TemplateUtils.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__chk__mpi_8hpp" name="fei_chk_mpi.hpp" local="no" imported="no">fei_chk_mpi.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>snl__fei__Utils_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>snl_fei_Utils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/base/</path>
    <filename>snl__fei__Utils_8hpp</filename>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <namespace>fei</namespace>
    <namespace>snl_fei</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aba9f0471b2f6c2a9ea9f60b024341572</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ad9b365bd3c3659a8303a217cf2293032</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ad414139eac8f498e7bf352247e41e2c1</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;params, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a04ca2e990268bc1a944f3649bd2e8a8f</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, int &amp;foundOffset, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a636dab415f18b5fbe17433585514e9e3</anchor>
      <arglist>(const char *key, int numParams, const char *const *params, int &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDoubleParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa4c81ad8f1aacd32deb0e929b3fb2dcc</anchor>
      <arglist>(const char *key, int numParams, const char *const *params, double &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDoubleParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa9d7311e037db5789a30b540ac1181b2</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;params, double &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a5cdeb88bd202e9d4056e29e55f5d2776</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, int &amp;foundOffset)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a853e8abe8f10665bd0e748096dd69068</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;paramStrings, int &amp;foundOffset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>storeNamedAttribute</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a6a5f014421a51b6571fbc9eaf2aaf4e0</anchor>
      <arglist>(const char *name, void *attribute, std::vector&lt; char * &gt; &amp;attributeNames, std::vector&lt; void * &gt; &amp;attributes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>retrieveNamedAttribute</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>adc7825009f09d19b36608175f2f2c42c</anchor>
      <arglist>(const char *name, std::vector&lt; char * &gt; &amp;attributeNames, std::vector&lt; void * &gt; &amp;attributes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate_string</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a2295b426491e012637ebabb22b3d7db3</anchor>
      <arglist>(const char *input_string, const char *substring, const char *&amp;before_substring, int &amp;len_before_substring, const char *&amp;after_substring, int &amp;len_after_substring)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>leading_substring_length</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a9c8434d033013bde939d2ae265607f43</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>skipSeparator</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a734b36a5dbca3ccdc5733657089b7fd5</anchor>
      <arglist>(const char *paramString, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mergeStringLists</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a1da8891b3c348a7bf30be0edc6a167cc</anchor>
      <arglist>(char **&amp;strings, int &amp;numStrings, const char *const *stringsToMerge, int numStringsToMerge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolveConflictingCRs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a646097e7fcba3b85a3bcb86b2a227369</anchor>
      <arglist>(fei::MatrixGraph &amp;matrixGraph, fei::Matrix &amp;bcEqns, const std::vector&lt; int &gt; &amp;bcEqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherRemoteEssBCs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a5d7463c9083616d78e28748082cc29cf</anchor>
      <arglist>(fei::CSVec &amp;essBCs, fei::SparseRowGraph *remoteGraph, fei::Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>mergeSparseRowGraphs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a8c08378fbbf713eecab8dc762dd32db0</anchor>
      <arglist>(const fei::SparseRowGraph *srg1, const fei::SparseRowGraph *srg2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2DBlockDiagToColumnContig</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>acc968b013302a03b8d72da21876e0f3b</anchor>
      <arglist>(int numBlocks, const int *blockSizes, const double *const *values2d, int format, double *colcontigvalues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2DToColumnContig</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ae42a2c51436256fd0736a86bc295d8cd</anchor>
      <arglist>(int numrows, int numcols, const double *const *values2d, int format, double *colcontigvalues)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SolnCheck.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>SolnCheck_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="fei__fstream_8hpp" name="fei_fstream.hpp" local="no" imported="no">fei_fstream.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="SolnCheck_8hpp" name="SolnCheck.hpp" local="no" imported="no">test_utils/SolnCheck.hpp</includes>
  </compound>
  <compound kind="file">
    <name>SolnCheck.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>SolnCheck_8hpp</filename>
    <includes id="fei__FillableMat_8hpp" name="fei_FillableMat.hpp" local="yes" imported="no">fei_FillableMat.hpp</includes>
    <namespace>SolnCheck</namespace>
    <member kind="function">
      <type>int</type>
      <name>readSoln</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>a6aba51a1d37b749fed2f029ab5f72e6f</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareSoln</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ac179752fd49643f666427414c0adb50b</anchor>
      <arglist>(fei::FillableMat &amp;solution1, fei::FillableMat &amp;solution2, double tol=1.e-3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ad807151a990c3e879e175bcf96cc7fb0</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMatrices</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>a921d72e4925d665cd6b159bc1112952f</anchor>
      <arglist>(fei::FillableMat &amp;mat1, fei::FillableMat &amp;mat2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSolution</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ac73b70347deae47a8cec18fe26659cf3</anchor>
      <arglist>(int localProc, int numProcs, const char *solnFileName, const char *checkFileName, const char *extension, int solveCounter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Algebraic.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Algebraic_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__Algebraic_8hpp" name="test_Algebraic.hpp" local="no" imported="no">test_utils/test_Algebraic.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Algebraic_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Algebraic.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Algebraic_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_Algebraic</class>
  </compound>
  <compound kind="file">
    <name>test_AztecWrappers.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__AztecWrappers_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="test__AztecWrappers_8hpp" name="test_AztecWrappers.hpp" local="no" imported="no">test_utils/test_AztecWrappers.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__AztecWrappers_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_AztecWrappers.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__AztecWrappers_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_AztecWrappers</class>
  </compound>
  <compound kind="file">
    <name>test_benchmarks.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__benchmarks_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="test__benchmarks_8hpp" name="test_benchmarks.hpp" local="no" imported="no">test_utils/test_benchmarks.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <includes id="snl__fei__RaggedTable__specialize_8hpp" name="snl_fei_RaggedTable_specialize.hpp" local="no" imported="no">snl_fei_RaggedTable_specialize.hpp</includes>
    <includes id="HexBeam_8hpp" name="HexBeam.hpp" local="no" imported="no">test_utils/HexBeam.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>time_raggedtable_insert</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>ad2a6d6af2058265c592d5b920d885e72</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>benchmark_raggedtable</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>aa22480553d5c0da6d0b8a671d1c84c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_benchmark_banner</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a27761d986262b208e20a7ec31a2991e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_benchmark_line</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a6c4db8e1961283637167b973771e67b0</anchor>
      <arglist>(const char *name, double value, double goldvalue, const char *passfail)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>add_macro_values</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a7f8950a9753a73e9b2cb00387fb7307c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>time_set_insert</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a5f422c46eeb7698172ec16658c0cc6be</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>time_set_insert2</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>ae907dbc20d3d34ae260ade7cce674202</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>benchmark_set</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a0647856887517f326bf0d36c0401064d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>benchmark_set2</name>
      <anchorfile>test__benchmarks_8cpp.html</anchorfile>
      <anchor>a25a2ff3a7d6e3e65255d6522ca0625c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_benchmarks.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__benchmarks_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_benchmarks</class>
  </compound>
  <compound kind="file">
    <name>test_Database.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Database_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="test__Database_8hpp" name="test_Database.hpp" local="no" imported="no">test_utils/test_Database.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="snl__fei__MapContig_8hpp" name="snl_fei_MapContig.hpp" local="no" imported="no">snl_fei_MapContig.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Database_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_MapContig_1</name>
      <anchorfile>test__Database_8cpp.html</anchorfile>
      <anchor>ac59cfb7246350a8574501d8b2fe3bf8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Database.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Database_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_Database</class>
  </compound>
  <compound kind="file">
    <name>test_EqnBuffer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__EqnBuffer_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__EqnBuffer_8hpp" name="test_EqnBuffer.hpp" local="no" imported="no">test_utils/test_EqnBuffer.hpp</includes>
    <includes id="fei__CSVec_8hpp" name="fei_CSVec.hpp" local="no" imported="no">fei_CSVec.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__EqnBuffer_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_EqnBuffer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__EqnBuffer_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_EqnBuffer</class>
  </compound>
  <compound kind="file">
    <name>test_EqnCommMgr.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__EqnCommMgr_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__EqnCommMgr_8hpp" name="test_EqnCommMgr.hpp" local="no" imported="no">test_utils/test_EqnCommMgr.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="no" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__EqnBuffer_8hpp" name="fei_EqnBuffer.hpp" local="no" imported="no">fei_EqnBuffer.hpp</includes>
    <includes id="fei__EqnCommMgr_8hpp" name="fei_EqnCommMgr.hpp" local="no" imported="no">fei_EqnCommMgr.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__EqnCommMgr_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_EqnCommMgr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__EqnCommMgr_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <class kind="class">test_EqnCommMgr</class>
  </compound>
  <compound kind="file">
    <name>test_Factory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Factory_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="test__Factory_8hpp" name="test_Factory.hpp" local="no" imported="no">test_utils/test_Factory.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="test__Factory__helper_8hpp" name="test_Factory_helper.hpp" local="no" imported="no">test_utils/test_Factory_helper.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Factory_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Factory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Factory_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">test_Factory</class>
  </compound>
  <compound kind="file">
    <name>test_Factory_helper.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Factory__helper_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__Factory__helper_8hpp" name="test_Factory_helper.hpp" local="no" imported="no">test_utils/test_Factory_helper.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Factory__helper_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Factory_helper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Factory__helper_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <class kind="class">test_Factory_helper</class>
  </compound>
  <compound kind="file">
    <name>test_FEI.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI_8cpp</filename>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="test__FEI_8hpp" name="test_FEI.hpp" local="no" imported="no">test_utils/test_FEI.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="DataReader_8hpp" name="DataReader.hpp" local="no" imported="no">test_utils/DataReader.hpp</includes>
    <includes id="FEI__tester_8hpp" name="FEI_tester.hpp" local="no" imported="no">test_utils/FEI_tester.hpp</includes>
    <includes id="snl__fei__tester_8hpp" name="snl_fei_tester.hpp" local="no" imported="no">test_utils/snl_fei_tester.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__FEI_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_FEI.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <class kind="class">test_FEI</class>
  </compound>
  <compound kind="file">
    <name>test_FEI_Impl.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI__Impl_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="test__FEI__Impl_8hpp" name="test_FEI_Impl.hpp" local="no" imported="no">test_utils/test_FEI_Impl.hpp</includes>
    <includes id="fei__FEI__Impl_8hpp" name="fei_FEI_Impl.hpp" local="no" imported="no">fei_FEI_Impl.hpp</includes>
    <includes id="FEData_8hpp" name="FEData.hpp" local="no" imported="no">test_utils/FEData.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__FEI__Impl_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_FEI_Impl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI__Impl_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <class kind="class">test_FEI_Impl</class>
  </compound>
  <compound kind="file">
    <name>test_FEI_Implementation.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI__Implementation_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__sstream_8hpp" name="fei_sstream.hpp" local="no" imported="no">fei_sstream.hpp</includes>
    <includes id="test__FEI__Implementation_8hpp" name="test_FEI_Implementation.hpp" local="no" imported="no">test_utils/test_FEI_Implementation.hpp</includes>
    <includes id="FEI__Implementation_8hpp" name="FEI_Implementation.hpp" local="no" imported="no">FEI_Implementation.hpp</includes>
    <includes id="FEData_8hpp" name="FEData.hpp" local="no" imported="no">test_utils/FEData.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__Filter_8hpp" name="fei_Filter.hpp" local="no" imported="no">fei_Filter.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__FEI__Implementation_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_FEI_Implementation.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__FEI__Implementation_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <class kind="class">test_FEI_Implementation</class>
  </compound>
  <compound kind="file">
    <name>test_LinearSystem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__LinearSystem_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__LinearSystem_8hpp" name="test_LinearSystem.hpp" local="no" imported="no">test_utils/test_LinearSystem.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Matrix_8hpp" name="fei_Matrix.hpp" local="no" imported="no">fei_Matrix.hpp</includes>
    <includes id="snl__fei__LinearSystem__General_8hpp" name="snl_fei_LinearSystem_General.hpp" local="no" imported="no">snl_fei_LinearSystem_General.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__LinearSystem_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_LinearSystem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__LinearSystem_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">test_LinearSystem</class>
  </compound>
  <compound kind="file">
    <name>test_Matrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Matrix_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="test__Matrix_8hpp" name="test_Matrix.hpp" local="no" imported="no">test_utils/test_Matrix.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__Matrix__Impl_8hpp" name="fei_Matrix_Impl.hpp" local="no" imported="no">fei_Matrix_Impl.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Matrix_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_matrix_unit1</name>
      <anchorfile>test__Matrix_8cpp.html</anchorfile>
      <anchor>a557a3bf57a0fccad09011d587d45c058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_Matrix_unit2</name>
      <anchorfile>test__Matrix_8cpp.html</anchorfile>
      <anchor>afb1b92453f0beeb5762d5d806b6cb517</anchor>
      <arglist>(MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_Matrix_unit4</name>
      <anchorfile>test__Matrix_8cpp.html</anchorfile>
      <anchor>a574fd5a422117e47ca5b479fcb96de97</anchor>
      <arglist>(MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Matrix_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">test_Matrix</class>
  </compound>
  <compound kind="file">
    <name>test_MatrixGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__MatrixGraph_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Pattern_8hpp" name="fei_Pattern.hpp" local="no" imported="no">fei_Pattern.hpp</includes>
    <includes id="fei__MatrixGraph__Impl2_8hpp" name="fei_MatrixGraph_Impl2.hpp" local="no" imported="no">fei_MatrixGraph_Impl2.hpp</includes>
    <includes id="fei__SparseRowGraph_8hpp" name="fei_SparseRowGraph.hpp" local="no" imported="no">fei_SparseRowGraph.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__MatrixGraph_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_MatrixGraph_test6</name>
      <anchorfile>test__MatrixGraph_8cpp.html</anchorfile>
      <anchor>a9e632493f812f7fb7a6ca67157ceae34</anchor>
      <arglist>(MPI_Comm comm, int numProcs, int localProc, const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_MatrixGraph_test7</name>
      <anchorfile>test__MatrixGraph_8cpp.html</anchorfile>
      <anchor>a5bcbd24ed65b748dc0da16e92d68339b</anchor>
      <arglist>(MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_MatrixGraph_test8</name>
      <anchorfile>test__MatrixGraph_8cpp.html</anchorfile>
      <anchor>aa62a9b5388e9965ad775a3c1b3f286e2</anchor>
      <arglist>(MPI_Comm comm, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_nonsymmetric_block</name>
      <anchorfile>test__MatrixGraph_8cpp.html</anchorfile>
      <anchor>a9f3fe7783e6078a5be6ed4986bc49f32</anchor>
      <arglist>(testData *testdata, fei::MatrixGraph *matrixGraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_MatrixGraph.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__MatrixGraph_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">test_MatrixGraph</class>
  </compound>
  <compound kind="file">
    <name>test_misc.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__misc_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__test__utils_8hpp" name="fei_test_utils.hpp" local="no" imported="no">test_utils/fei_test_utils.hpp</includes>
    <includes id="test__misc_8hpp" name="test_misc.hpp" local="no" imported="no">test_utils/test_misc.hpp</includes>
    <includes id="test__Factory__helper_8hpp" name="test_Factory_helper.hpp" local="no" imported="no">test_utils/test_Factory_helper.hpp</includes>
    <includes id="fei__FieldMask_8hpp" name="fei_FieldMask.hpp" local="no" imported="no">fei_FieldMask.hpp</includes>
    <includes id="snl__fei__RecordCollection_8hpp" name="snl_fei_RecordCollection.hpp" local="no" imported="no">snl_fei_RecordCollection.hpp</includes>
    <includes id="fei__VectorSpace_8hpp" name="fei_VectorSpace.hpp" local="no" imported="no">fei_VectorSpace.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__misc_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_misc_FieldMask</name>
      <anchorfile>test__misc_8cpp.html</anchorfile>
      <anchor>abb1616bef7071091e793b0547868c640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_misc_RecordCollection</name>
      <anchorfile>test__misc_8cpp.html</anchorfile>
      <anchor>aa62b23b532cfb76595f2ef1baae70084</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_misc.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__misc_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_misc</class>
  </compound>
  <compound kind="file">
    <name>test_PointBlockMap.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__PointBlockMap_8cpp</filename>
    <includes id="fei__iostream_8hpp" name="fei_iostream.hpp" local="no" imported="no">fei_iostream.hpp</includes>
    <includes id="test__PointBlockMap_8hpp" name="test_PointBlockMap.hpp" local="no" imported="no">test_utils/test_PointBlockMap.hpp</includes>
    <includes id="snl__fei__PointBlockMap_8hpp" name="snl_fei_PointBlockMap.hpp" local="no" imported="no">snl_fei_PointBlockMap.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__PointBlockMap_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_PointBlockMap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__PointBlockMap_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_PointBlockMap</class>
  </compound>
  <compound kind="file">
    <name>test_Set.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Set_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="test__Set_8hpp" name="test_Set.hpp" local="no" imported="no">test_utils/test_Set.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Set_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_test1</name>
      <anchorfile>test__Set_8cpp.html</anchorfile>
      <anchor>a72d3a7d0b2518be91f739d224e1e7316</anchor>
      <arglist>(SET_TYPE &amp;set_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_test2</name>
      <anchorfile>test__Set_8cpp.html</anchorfile>
      <anchor>aa2fd92b1c6d0583911b717131afc38ed</anchor>
      <arglist>(SET_TYPE &amp;set_obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Set.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Set_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_Set</class>
  </compound>
  <compound kind="file">
    <name>test_SNL_FEI_Structure.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__SNL__FEI__Structure_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <includes id="test__SNL__FEI__Structure_8hpp" name="test_SNL_FEI_Structure.hpp" local="no" imported="no">test_utils/test_SNL_FEI_Structure.hpp</includes>
    <includes id="SNL__FEI__Structure_8hpp" name="SNL_FEI_Structure.hpp" local="no" imported="no">SNL_FEI_Structure.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__SNL__FEI__Structure_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_SNL_FEI_Structure.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__SNL__FEI__Structure_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <class kind="class">test_SNL_FEI_Structure</class>
  </compound>
  <compound kind="file">
    <name>test_Tables.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Tables_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__Tables_8hpp" name="test_Tables.hpp" local="no" imported="no">test_utils/test_Tables.hpp</includes>
    <includes id="snl__fei__RaggedTable_8hpp" name="snl_fei_RaggedTable.hpp" local="no" imported="no">snl_fei_RaggedTable.hpp</includes>
    <includes id="fei__ProcEqns_8hpp" name="fei_ProcEqns.hpp" local="no" imported="no">fei_ProcEqns.hpp</includes>
    <includes id="fei__ctg__set_8hpp" name="fei_ctg_set.hpp" local="no" imported="no">fei_ctg_set.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Tables_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Tables.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Tables_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_Tables</class>
  </compound>
  <compound kind="file">
    <name>test_Utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Utils_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__Utils_8hpp" name="test_Utils.hpp" local="no" imported="no">test_utils/test_Utils.hpp</includes>
    <includes id="fei__ArrayUtils_8hpp" name="fei_ArrayUtils.hpp" local="no" imported="no">fei_ArrayUtils.hpp</includes>
    <includes id="fei__utils_8hpp" name="fei_utils.hpp" local="no" imported="no">fei_utils.hpp</includes>
    <includes id="fei__CommUtils_8hpp" name="fei_CommUtils.hpp" local="no" imported="no">fei_CommUtils.hpp</includes>
    <includes id="snl__fei__Utils_8hpp" name="snl_fei_Utils.hpp" local="no" imported="no">snl_fei_Utils.hpp</includes>
    <includes id="fei__Param_8hpp" name="fei_Param.hpp" local="no" imported="no">fei_Param.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <class kind="class">test_Utils_dummy</class>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Utils_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_Utils_binarySearch</name>
      <anchorfile>test__Utils_8cpp.html</anchorfile>
      <anchor>a5398e5f56f717c41b2ac21502c6c3bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_Utils_function_that_throws</name>
      <anchorfile>test__Utils_8cpp.html</anchorfile>
      <anchor>aab335ed8a94685f1145c022e83cfdd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test_Utils_test_SharedPtr</name>
      <anchorfile>test__Utils_8cpp.html</anchorfile>
      <anchor>acdae39cdfd0d771d0a4c43c88ef11869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>test_Utils_dummy_destroyed</name>
      <anchorfile>test__Utils_8cpp.html</anchorfile>
      <anchor>a0d4cc397adacf49839add5dda36b7da4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Utils.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Utils_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <class kind="class">test_Utils</class>
  </compound>
  <compound kind="file">
    <name>test_Vector.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Vector_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__Vector_8hpp" name="test_Vector.hpp" local="no" imported="no">test_utils/test_Vector.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="test__MatrixGraph_8hpp" name="test_MatrixGraph.hpp" local="no" imported="no">test_utils/test_MatrixGraph.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__Vector__Impl_8hpp" name="fei_Vector_Impl.hpp" local="no" imported="no">fei_Vector_Impl.hpp</includes>
    <includes id="LibraryFactory_8hpp" name="LibraryFactory.hpp" local="no" imported="no">test_utils/LibraryFactory.hpp</includes>
    <includes id="fei__Factory__Trilinos_8hpp" name="fei_Factory_Trilinos.hpp" local="no" imported="no">fei_Factory_Trilinos.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__Vector_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_Vector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__Vector_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__Vector_8hpp" name="fei_Vector.hpp" local="no" imported="no">fei_Vector.hpp</includes>
    <includes id="fei__Factory_8hpp" name="fei_Factory.hpp" local="no" imported="no">fei_Factory.hpp</includes>
    <class kind="class">test_Vector</class>
  </compound>
  <compound kind="file">
    <name>test_VectorSpace.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__VectorSpace_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="test__VectorSpace_8hpp" name="test_VectorSpace.hpp" local="no" imported="no">test_utils/test_VectorSpace.hpp</includes>
    <includes id="snl__fei__Factory_8hpp" name="snl_fei_Factory.hpp" local="no" imported="no">snl_fei_Factory.hpp</includes>
    <includes id="fei__ParameterSet_8hpp" name="fei_ParameterSet.hpp" local="no" imported="no">fei_ParameterSet.hpp</includes>
    <includes id="fei__LibraryWrapper_8hpp" name="fei_LibraryWrapper.hpp" local="no" imported="no">fei_LibraryWrapper.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>test__VectorSpace_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_VectorSpace.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>test__VectorSpace_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__SharedPtr_8hpp" name="fei_SharedPtr.hpp" local="no" imported="no">fei_SharedPtr.hpp</includes>
    <includes id="fei__defs_8h" name="fei_defs.h" local="no" imported="no">fei_defs.h</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="testData_8hpp" name="testData.hpp" local="no" imported="no">test_utils/testData.hpp</includes>
    <includes id="fei__fwd_8hpp" name="fei_fwd.hpp" local="no" imported="no">fei_fwd.hpp</includes>
    <class kind="class">test_VectorSpace</class>
  </compound>
  <compound kind="file">
    <name>testData.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>testData_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <class kind="class">testData</class>
  </compound>
  <compound kind="file">
    <name>tester.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>tester_8cpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="tester_8hpp" name="tester.hpp" local="no" imported="no">test_utils/tester.hpp</includes>
    <includes id="fei__ErrMacros_8hpp" name="fei_ErrMacros.hpp" local="no" imported="no">fei_ErrMacros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>fei_file</name>
      <anchorfile>tester_8cpp.html</anchorfile>
      <anchor>a136ecc313cebf842162dcca9cfda5a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tester.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/fei/test_utils/</path>
    <filename>tester_8hpp</filename>
    <includes id="fei__macros_8hpp" name="fei_macros.hpp" local="no" imported="no">fei_macros.hpp</includes>
    <includes id="fei__mpi_8h" name="fei_mpi.h" local="no" imported="no">fei_mpi.h</includes>
    <class kind="class">tester</class>
  </compound>
  <compound kind="class">
    <name>AccessPattern</name>
    <filename>classAccessPattern.html</filename>
    <member kind="function">
      <type></type>
      <name>AccessPattern</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a277722fcb0f280d43cfcc43a0b69fe97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AccessPattern</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>aec93be8e3375d571df09c9cb7c1800ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>aba6a4b6382149c53962353472612deda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRowIDs_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a6682443fcd53ab6a9c7642a84b434268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>numFieldsPerRow_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>aa4a7766dba5e338a35cf96379c543d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>rowFieldIDs_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a2c262f02112c8cc71054e74b67b1dd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numColIDsPerRow_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a4f282bd1748911b1ba70d40b01337c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>numFieldsPerCol_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a31ca4a997debe41357f713ef32457d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>colFieldIDs_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>aaa3ee6d4ee51c476a44b841c674ec4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interleaveStrategy_</name>
      <anchorfile>classAccessPattern.html</anchorfile>
      <anchor>a872a012b032144601e946c2d90346a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_trilinos::Aztec_BlockMap</name>
    <filename>classfei__trilinos_1_1Aztec__BlockMap.html</filename>
    <base>fei_trilinos::Aztec_Map</base>
    <member kind="function">
      <type></type>
      <name>Aztec_BlockMap</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>abd1be1476d71484c85c467480ed9729c</anchor>
      <arglist>(int globalSize, int N_update, const int *update, int localOffset, MPI_Comm comm, int numGlobalBlocks, int numLocalBlocks, const int *blkUpdate, int localBlockOffset, int *blockSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aztec_BlockMap</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>ad822e3e912b8117ce0b4ec7c02d1d2c5</anchor>
      <arglist>(const Aztec_BlockMap &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Aztec_BlockMap</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a804ffb742ecbf32e00c1397976471692</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getNumGlobalBlocks</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a58d999f1633f8aa31d5967991158967e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getNumLocalBlocks</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a6d2543031e81d19a3506d24f403c0f46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getLocalBlockOffset</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a325fd2c72b3cd2c28c945fe04f9c521f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getBlockSizes</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>addc70a2bdbe70eba2bf672a4dc5cd30a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getBlockUpdate</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a4b1238ae7c86b769a410abd20ee1f3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInput</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a2e7532cb4aa40421e68855c744acf242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalBlocks_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a0785f059d821cc5a4dda3cdfb2a7b487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalBlocks_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a2e44f07572b9a9911ead56c7cb7fbaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localBlockOffset_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>af78cd952131b99d8a9ae6275df7a7f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>blockSizes_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>a1da1d608eddf10afb9d08154dbd7c334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>blockUpdate_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__BlockMap.html</anchorfile>
      <anchor>afb749cb6c2200929ec1c848d4e5e61f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_trilinos::Aztec_LinSysCore</name>
    <filename>classfei__trilinos_1_1Aztec__LinSysCore.html</filename>
    <base>LinearSystemCore</base>
    <member kind="function">
      <type></type>
      <name>Aztec_LinSysCore</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aed2f229dd56258aba9f27c4c156d206d</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Aztec_LinSysCore</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a199db5ecf2319117fc76fd6d99396179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore *</type>
      <name>clone</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7a4a3a0ba52985d14a3b12f623adb663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a277670177c4b67a8c740896eaa021a78</anchor>
      <arglist>(int numParams, const char *const *params)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setLookup</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a84ce6dc112667fe13b0803d1d5b6540f</anchor>
      <arglist>(Lookup &amp;lookup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setGlobalOffsets</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ae7a8893a5388ba76d2f27096970ba270</anchor>
      <arglist>(int len, int *nodeOffsets, int *eqnOffsets, int *blkEqnOffsets)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setConnectivities</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a3321f9ebd424f38cf3660456017a1e21</anchor>
      <arglist>(GlobalID elemBlock, int numElements, int numNodesPerElem, const GlobalID *elemIDs, const int *const *connNodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setStiffnessMatrices</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a6c7d5bc9683462796318edcf7d27f14a</anchor>
      <arglist>(GlobalID, int, const GlobalID *, const double *const *const *, int, const int *const *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setLoadVectors</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a49e1fd126a8e76826fdd7d24356fd2a9</anchor>
      <arglist>(GlobalID, int, const GlobalID *, const double *const *, int, const int *const *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMatrixStructure</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aeed1b5ca18e7494c2bd1c3243b5b8f83</anchor>
      <arglist>(int **ptColIndices, int *ptRowLengths, int **blkColIndices, int *blkRowLengths, int *ptRowsPerBlkRow)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMultCREqns</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ae1055e11170191710456f1ba714acebf</anchor>
      <arglist>(int, int, int, int **, int **, int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setPenCREqns</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a6b5f185df8cc694c553a0c8d97595cbc</anchor>
      <arglist>(int, int, int, int **, int **, int *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrixAndVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a8e1a807f52a889e18a6fd0e68000a42f</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a59e8a075087204b720de27fcf1035afa</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa51a83ba1bfa1dda03e6d8bef877214a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoSystemMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa7233954a6cec5baee3e011255ef6389</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, int numBlkRows, const int *blkRows, int numBlkCols, const int *blkCols, const double *const *values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoSystemMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a1686f6394ac95ab4493f68375d0a5f10</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoSystemMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ae66443fab70357760c8d3681eb2ee9a4</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixRowLength</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a00a992e6271bc19e3d653e3c05f06180</anchor>
      <arglist>(int row, int &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a12e8f38c10a5331cb04fc18743a95341</anchor>
      <arglist>(int row, double *coefs, int *indices, int len, int &amp;rowLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a75b23bde0f8b09cd39d9aaaa462cb071</anchor>
      <arglist>(int num, const double *values, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ae784c89c6973297ccbd70e6caad0efb5</anchor>
      <arglist>(int num, const double *values, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFromRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac484119a42713fe93043cc3719e70731</anchor>
      <arglist>(int num, double *values, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixLoadComplete</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a503012788e6945ec96b3a1030a3de8a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforceEssentialBC</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4bfb722bb050a8979903ba035c563c09</anchor>
      <arglist>(int *globalEqn, double *alpha, double *gamma, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforceBlkEssentialBC</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>afacc6f04ade413f0fb977514a93b071a</anchor>
      <arglist>(int *blkEqn, int *blkOffset, double *alpha, double *gamma, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforceRemoteEssBCs</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad7a581b99d249f6b114b7bd543a72ba6</anchor>
      <arglist>(int numEqns, int *globalEqns, int **colIndices, int *colIndLen, double **coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforceBlkRemoteEssBCs</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad2b1039804f9b3e66bf27dc97b10163d</anchor>
      <arglist>(int numEqns, int *blkEqns, int **blkColInds, int **blkColOffsets, int *blkColLens, double **remEssBCCoefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixPtr</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a15ba407bd14a49c37373fb2592948a62</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad7a5ec7df2865095e63fcef0aecca89f</anchor>
      <arglist>(double scalar, const Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a0dbb02a81d98fc256adcaa2559ef3daf</anchor>
      <arglist>(double scalar, Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a0ce1f68e75977565922386e2d9e5b974</anchor>
      <arglist>(double scalar, const Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRHSVectorPtr</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>abd052835095c1028fe9fc38c35a0348d</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>adc868428179c96d520c43e52dda0761a</anchor>
      <arglist>(double scalar, const Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>abaf5bb822d01d34f8e10dd0a885483c9</anchor>
      <arglist>(double scalar, Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInRHSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a75c4b2a554051ff2cf1777ca02f5cdbd</anchor>
      <arglist>(double scalar, const Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroyMatrixData</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a310397ef35fab54b0d580814ca7b9a14</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destroyVectorData</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a83fe2c696af7eb463e6ee9500bd7cee7</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNumRHSVectors</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>adfbbb4d1703f70a9ff62b3b60bfb4869</anchor>
      <arglist>(int numRHSs, const int *rhsIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRHSID</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7e0c96387a322c456e3b6086ae073cdd</anchor>
      <arglist>(int rhsID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putInitialGuess</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a0751a45edbb132542c0e0c9cc086bf86</anchor>
      <arglist>(const int *eqnNumbers, const double *values, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolution</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a32834b2fa8e52ea4afaa84a79c7f6c32</anchor>
      <arglist>(double *answers, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolnEntry</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>af51e36f13866570a3890cf7c810b94e5</anchor>
      <arglist>(int eqnNumber, double &amp;answer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>formResidual</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>adbf8cd899a437de5a9e875b03b0b964d</anchor>
      <arglist>(double *values, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>launchSolver</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a6906d79098e90e99ff7aa702794f2a35</anchor>
      <arglist>(int &amp;solveStatus, int &amp;iterations)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a2fddef99c4fa03c1486840dd465b65e6</anchor>
      <arglist>(int, int, int *, int, const double *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeSystem</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a83cb6852d728bf412a0a7f0acea1033d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getMatrixBeginPointer</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a0fcc0edc94884e6c584c0038f24d58cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixOffset</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7dc03c1e6bde0b9624108ac2cb45dc65</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createMiscStuff</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aeea547800e1ba28df47dfd6ed83a70f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>allocateMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a5f626d9d91bb43f8e2ab97b776c2c4a8</anchor>
      <arglist>(int **ptColIndices, int *ptRowLengths, int **blkColIndices, int *blkRowLengths, int *ptRowsPerBlkRow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>VBRmatPlusScaledMat</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a2566be2890d3df8ffec081eea03bb57b</anchor>
      <arglist>(AztecDVBR_Matrix *A, double scalar, AztecDVBR_Matrix *source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>MSRmatPlusScaledMat</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a90fa48b5c3d6ab4f1c8ef7b8449bad2b</anchor>
      <arglist>(AztecDMSR_Matrix *A, double scalar, AztecDMSR_Matrix *source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createBlockMatrix</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a5bdaf91075ec196a6136640a1712315d</anchor>
      <arglist>(int **blkColIndices, int *blkRowLengths, int *ptRowsPerBlkRow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoBlockRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad9afd06305644a9cf0c88d4276ce645c</anchor>
      <arglist>(int numBlkRows, const int *blkRows, int numBlkCols, const int *blkCols, const double *const *values, int numPtCols, bool overwriteInsteadOfAccumulate)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>copyBlockRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a14b234f2beabee6f4ed78c141b739f56</anchor>
      <arglist>(int i, const int *blkRows, int numBlkCols, const int *blkCols, const double *const *values, double *coefs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>modifyRHSforBCs</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a742b32b09a117ed67f44f97a84da0784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>explicitlySetDirichletBCs</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa5d83811d88ac9f5d71dd2468c406800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>blockRowToPointRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aedf5ded4eeb8f797a108877cac6298d4</anchor>
      <arglist>(int blkRow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getBlockRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a9fbf72947242758050b7da02146353e0</anchor>
      <arglist>(int blkRow, double *&amp;val, int &amp;valLen, int *&amp;blkColInds, int &amp;blkColIndLen, int &amp;numNzBlks, int &amp;numNNZ)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getBlkEqnsAndOffsets</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a07c92cc2b331e9deaf01cc79aad1e7db</anchor>
      <arglist>(int *ptEqns, int *blkEqns, int *blkOffsets, int numEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getBlockSize</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aadbaa0d21a81a267121cb26373eb17f3</anchor>
      <arglist>(int blkInd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoPointRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa7dc4025a5824921a4a39f29cb647e16</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptColIndices, const double *const *values, bool overwriteInsteadOfAccumulate)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumPointIntoBlockRow</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a838aa878058014456317c699288bc1f7</anchor>
      <arglist>(int blkRow, int rowOffset, int blkCol, int colOffset, double value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setMatrixType</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a60513da4f228b374b78fc8b6c15e40ef</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>selectSolver</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>afe440104b7895b5c760ab5dac19d64c3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>selectPreconditioner</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad23379f32c04250c334a281a443b3589</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setSubdomainSolve</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ace3c84490c7ce6a652bc24673122542f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setScalingOption</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a5ca08da82da97556af1d2858080120c4</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setConvTest</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7953ae1f72161698878a36910efd1af1</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setPreCalc</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a741515e29c8353596bdec83ae56d1258</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setTypeOverlap</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4927f425691072f1c43bfa3f1ce45458</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setOverlap</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a84f41a9eed1587ec37faee5f4d800c4f</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setOrthog</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a2d5b9a68953b3ffa4bbc94f67fd9be1a</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setAuxVec</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad2fe5256ca7bd4c9e41fa3ff82ae779f</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setAZ_output</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a72ed68add4c9e2b74bb734cffb647d9b</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recordUserParams</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a19966ffa4fa0821c9bdee7ba9c4c0cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkForParam</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4b8e4a9f36095f78530f95e81d5d2a3c</anchor>
      <arglist>(const char *paramName, int numParams_, char **paramStrings, double &amp;param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recordUserOptions</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad7c6ec099a0efe7c07b177527f123f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkForOption</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac9e706b49d5ce549bb52898aea8a70bf</anchor>
      <arglist>(const char *paramName, int numParams_, char **paramStrings, int &amp;param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>blkRowEssBCMod</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a36fed1b1e5e0c7376c0112667372b4a2</anchor>
      <arglist>(int blkEqn, int blkOffset, double *val, int *blkCols, int numCols, int numPtNNZ, double alpha, double gamma)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>blkColEssBCMod</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acf36c73adf137a1016d19826f5c58cd9</anchor>
      <arglist>(int blkRow, int blkEqn, int blkOffset, double *val, int *blkCols, int numCols, int numPtNNZ, double alpha, double gamma)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setDebugOutput</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aec886e08a2c65569bc911516e011dd1f</anchor>
      <arglist>(const char *path, const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>debugOutput</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a02e89fdaa2cf59593136b94bf5ff750a</anchor>
      <arglist>(const char *msg) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>writeA</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a638e3841894c51af2a5c14fc9c48d27d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>writeVec</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a1e9063b69036886d2725e5bcac167ce3</anchor>
      <arglist>(Aztec_LSVector *v, const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>messageAbort</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac70f11a21f44bf8114650420e47b0a22</anchor>
      <arglist>(const char *msg) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa3816fb734e186fcd6424a518ba84afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lookup *</type>
      <name>lookup_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a25f3abbfddc5bd887967e972966ce23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveLookup_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a54434f3397bad09f886aad465aaca062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a2496969f23c664e1dd66d98dcda06d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisProc_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acce97a571f5c1bc162ffb367b900a3ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterProc_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac90ec191d685c600e741764080453082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>update_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa997e5f00550992a3452f7673b581929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Aztec_Map &gt;</type>
      <name>map_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7cdd301427c83b22dd790a6bc3b0905f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AztecDMSR_Matrix *</type>
      <name>A_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ada2fa9f20af51adfc2be71f6cf745ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AztecDMSR_Matrix *</type>
      <name>A_ptr_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a41e7cf164ad94adce7a27df1fac7e0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Aztec_LSVector *</type>
      <name>x_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4abaebf8e3c88fda0cc437b399e4dddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Aztec_LSVector **</type>
      <name>b_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>af4f42a4bac2f45d4cfd14996ff26d289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Aztec_LSVector *</type>
      <name>bc_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a350bc434f7f3f1dbebfd28c3ff1e3310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>essBCindices_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa1bdba7400da9d0466351016099f4cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numEssBCs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac0bd8379041ac92f754fa48df7593b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>bcsLoaded_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acccc38761d20be53146265d58e1dcbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>explicitDirichletBCs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acf8c073109d32164605077016f67de62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>BCenforcement_no_column_mod_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>af635eae11de529d94fd31be8b46e78d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Aztec_LSVector *</type>
      <name>b_ptr_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a8cbcb00bcce6dd8481a3e7c8dd1fb6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matrixAllocated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4ffe31c94b4379350b76ad657f834c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>vectorsAllocated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a127503f76c38cc3dbab94199ad919ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blkMatrixAllocated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a12e52fab59548d52105b0e8b9d8a8ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matrixLoaded_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4e339ab8447d652db548a95e6f646f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rhsLoaded_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a9045f044b3a6f6fcd2f4f421842744ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>needNewPreconditioner_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a0cba672ac261eb4decc7dee1a1f1ba6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>tooLateToChooseBlock_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a9e413f916d66e8f7c840c76f74aa8507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockMatrix_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a932d9045349450eb434ee1cce15f1f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Aztec_BlockMap &gt;</type>
      <name>blkMap_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ab7bff88717709c2a07279efd352e14dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AztecDVBR_Matrix *</type>
      <name>blkA_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ab7135071ad81974f51d235a50211ca98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AztecDVBR_Matrix *</type>
      <name>blkA_ptr_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4e4d339cddbd46ff4aa07e42968fb290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>blkUpdate_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>add80d94262eefd263d1efd522931b5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AZ_MATRIX *</type>
      <name>azA_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a040e32b800c44ef7e7d17a3f1e9dd5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AZ_PRECOND *</type>
      <name>azP_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>abf4a83e8c3d37975458d2e8443b27b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>precondCreated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a8b82c7909f8793f4c1f006345ca4f2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AZ_SCALING *</type>
      <name>azS_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4da8f0c95f3b36cac75597ca0ef7cbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scalingCreated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a00236c2991ef74bf79be897fe4da2ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>aztec_options_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ac3f9921bf03b965627d16de040a7009c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>aztec_params_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a6647ea3bcd3a2a9d0936543c6b417702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>aztec_status_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a14e3e07143ea140d5c15c1b51bc3e283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>tmp_x_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a58377241ed12463a1ed69ebe17646513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>tmp_x_touched_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>abb649edd66af7a087e3d4c344fee2648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>tmp_b_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a7c1ab362b8fbdb2e79ec2eb6179fe1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>tmp_bc_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4be194103495512fffe55c425bee6432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>tmp_b_allocated_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a958a3de3368ff1c75bb0bea1ab98c7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ML_Vanek_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aa807516622195452c6a407fff3fecaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLevels_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>af82b59e400bb3abd7032ae83e08c9f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>rhsIDs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a92b46e6ee2541a6daa1d7832b4ce07e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRHSs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a6f55a8bf7ff8264f0c65348508a1f7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRHS_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ab9c32f02befa9d309cd03069cb4cb390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqns_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a5e507005da8c32c7234eb7f82a106917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localOffset_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>aeeb6452a6af32982a9041f998387d3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqns_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a55087ee99e46e7ed21ae27faf5be8396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqnBlks_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ad97f60074cee5cff250b0d3a5a86f4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localBlkOffset_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a675280fdfd3d09b7828408f40df52d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqnBlks_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a1fc4445697e27a140bd55e7020003b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>localBlockSizes_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a5ad44e8f5584cacfd7ceb540736bf30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numNonzeroBlocks_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a8bc9f21f7865424206fbed5ba776dacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a3776eefdbb5c5bcc2b1e6b5cb3a45e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numParams_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a3e7205f2b627ffc8c21fd610d8f77c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>paramStrings_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ab9dfd85ea8438306fc7167eee1e2c855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acf52f05288ee6d3e8b63862d6b8de813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debugOutput_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acc387ae01277f7e8443adc558e667717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debugFileCounter_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>abf306f63df3d39201c18c7c7841e9f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>debugPath_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>ae26ad45b73abfd34ed620ddcb3e9ada3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>debugFileName_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a4b6744d79300e17fb9759d7ea9d6e25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FILE *</type>
      <name>debugFile_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>acfdb9533c743f4ff1da76cf852e1de08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, unsigned &gt; &amp;</type>
      <name>named_solve_counter_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LinSysCore.html</anchorfile>
      <anchor>a3ef307aad40a8838d198d3baf17bc760</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_trilinos::Aztec_LSVector</name>
    <filename>classfei__trilinos_1_1Aztec__LSVector.html</filename>
    <member kind="function">
      <type></type>
      <name>Aztec_LSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>aac0d9e6b9ac4979836a8d48f4612df10</anchor>
      <arglist>(fei::SharedPtr&lt; Aztec_Map &gt; map, int *data_org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aztec_LSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>ae7f66802188e27be4ae13b32a4d28320</anchor>
      <arglist>(const Aztec_LSVector &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Aztec_LSVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a38f4c9d786c5607f797eececc8ca0f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Aztec_LSVector *</type>
      <name>newVector</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a00ceaaccf651c419aa56e52aeb85cf61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dotProd</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a5b9e7f7b1e2080a58ce50619b13b2bc8</anchor>
      <arglist>(const Aztec_LSVector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>ae4c2e2e9e48a72d6d8f0bacba74cb458</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVec</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a0b5fe029dcc8bd65cafd0ac9221dd68a</anchor>
      <arglist>(double s, const Aztec_LSVector &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>aea2ce8030f7d76c0749d5accbc994ff6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm1</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a4d0fe4c77935223fca0f47c4a36fd59e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Aztec_LSVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a706cc1b681084cc471fd424dc24beb15</anchor>
      <arglist>(const Aztec_LSVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>aec0458bc65bf51c502de60299a6f8560</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a04829effb56e1890c1116e7f5ac8f998</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a33b1df7f51befe1437b4514e0642be78</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>startPointer</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a94f69231d2a9ad04e2c9bc74742c83e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFromFile</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a4d4bd6911cb55027a1e6345e34c02061</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToFile</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>afd7893f60e43bf399e1bdc43f0dd8e0c</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a74729f98c94a7e70d3dc02a3e1c3cdfd</anchor>
      <arglist>(const Aztec_LSVector &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInput</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a04b3396df9b0aedfb29f61a6841259d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>inUpdate</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>aaf842303045e40583a965515cbc621e8</anchor>
      <arglist>(int globalIndex, int &amp;localIndex) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Aztec_Map &gt;</type>
      <name>amap_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a5d478c4027f0577c3b601d66040215ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>localCoeffs_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a5ca09ea32bc5ea20a4ee44fac23d3862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>length_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__LSVector.html</anchorfile>
      <anchor>a82ea6c043de55e60b6f0fe83765ea9e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_trilinos::Aztec_Map</name>
    <filename>classfei__trilinos_1_1Aztec__Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Aztec_Map</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a1a6c21bb8741abb2451abc4f395b129f</anchor>
      <arglist>(int globalSize, int N_update, const int *update, int localOffset, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aztec_Map</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a298a5680bea216b7cdf20c716f735c90</anchor>
      <arglist>(const Aztec_Map &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Aztec_Map</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a71db29bc7b25e728419076f322d87d80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int &amp;</type>
      <name>localSize</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a9a3f8e67a19ee10f6d0998c7d93c811a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int &amp;</type>
      <name>globalSize</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a2cdc22364089291ebf828a37719a4bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int &amp;</type>
      <name>localOffset</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>aeb536ca8404ca25c5b455d1f67bbfafa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getUpdate</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>adc5dbd71eea285875b918f3108695a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPI_Comm</type>
      <name>getCommunicator</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a93cc8da3bef2d30c017ec1aa0833629f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getProcConfig</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>ad3c29eb044f8dad3f562b61e50624631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTransformedEqn</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a35e0d4383173b2cfbd326d6c32ffdaf6</anchor>
      <arglist>(int eqn) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inUpdate</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>afcfc44b722f5004497b37558d454f9de</anchor>
      <arglist>(int globalIndex, int &amp;localIndex) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>proc_config</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a49904feb665e5d80c1f213d5da6d57e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>update</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>ab68820496ff34d2585d8a33e52cd3073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>external</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>adaff9741cded0a365d23742f470a6d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>update_index</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a4b97926016524af1e9a931be2d177ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>extern_index</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>ab421a2a64f97c3f8d9bfbb7d895558af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>data_org</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>af60dee6681ad5bd2d40c98ae2a773688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>orderingUpdate</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a88787fa1549fd96d6e754236a6b38ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>az_transformed</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>aed9db0ca7c2d4f2bbd50ba45affa6e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInput</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>ac4648533c3070f4f49be9bd4d7832b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>globalSize_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>accf75f8b816eecc279865a9b4c79254a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localSize_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>aed7b5c02f22de69d06abf880a8435ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localOffset_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>aefbf6a7e69b88c58120d0cf4dad52b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N_update_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a46168e6ce760dd1d65b8eba82b693190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei__trilinos_1_1Aztec__Map.html</anchorfile>
      <anchor>a43ff2c211da3143ce145001841123519</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_trilinos::AztecDVBR_Matrix</name>
    <filename>classfei__trilinos_1_1AztecDVBR__Matrix.html</filename>
    <member kind="function">
      <type></type>
      <name>AztecDVBR_Matrix</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a4e20f01ca82a7bfbeb5a8a1d773022aa</anchor>
      <arglist>(fei::SharedPtr&lt; Aztec_BlockMap &gt; map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AztecDVBR_Matrix</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ae418862be87ec01500960af02eadd4c4</anchor>
      <arglist>(const AztecDVBR_Matrix &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AztecDVBR_Matrix</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a389603b0559fb37efdf81932381587f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlocksPerRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a8ec674fa8effaf7fe250de22621158d2</anchor>
      <arglist>(int blkRow, int &amp;nnzBlksPerRow) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonzerosPerRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a428d9dc006fd83af28dd5c902701d489</anchor>
      <arglist>(int blkRow, int &amp;nnzPerRow) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlocksPerRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a6eadfc33e8dfc5b5a1db68c79b9a0b80</anchor>
      <arglist>(int *nnzBlksPerRow) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonzerosPerRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a5f6e08c9fda227fafa03f7af33e6448e</anchor>
      <arglist>(int *nnzPerRow) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockSize</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ab5b33f8605e19e612344b9f44171e171</anchor>
      <arglist>(int blkRow, int blkCol, int &amp;ptRows, int &amp;ptCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matvec</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a2b9f2f840ea6e4587b0cfcf0d3d88094</anchor>
      <arglist>(const Aztec_LSVector &amp;x, Aztec_LSVector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a120d5e4e4c5d1b3b702c3f231498d473</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a03b25d65da97b94ce9236cc291b3566c</anchor>
      <arglist>(int blk_row, double *vals, int *blk_col_inds, int num_nz_blocks) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a5215041eda1b0c4e0fd591c4dc2510b0</anchor>
      <arglist>(int blk_row, double *vals, int *blk_col_inds, int num_nz_blocks) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoBlockRow</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a18abc8924d21b39f50073f6b4425d78a</anchor>
      <arglist>(int blk_row, double *vals, int *blk_col_inds, int num_nz_blocks) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a18d7cf8306f66622b2c92f8168bef94d</anchor>
      <arglist>(int *num_nz_blocks, int *blk_col_inds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadComplete</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a296216b6ec3cee425a928817d1dbe073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>af0908b916b252ad6441b013e1e472b52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoaded</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a77c8828767a57a730e539cd9e35052a8</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllocated</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a370c8420213855fd6034dbbcac77afa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllocated</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a8b88dbb8537716c5afacb74cd4bb8856</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>AZ_MATRIX *</type>
      <name>getAZ_MATRIX_Ptr</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>aa3052acf51f2c87396427b9beb779347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFromFile</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a2a19d0d6f2195d9000bd657bc75cf7a0</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToFile</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a8dd492714d4b63edd7c3d9b54ebda493</anchor>
      <arglist>(const char *fileName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRemoteBlocks</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a7f469272db999637020fedf48555c897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getRemoteBlockIndices</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a5ed572626dd46d8cac3b7634f10c5fb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getRemoteBlockSizes</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>accc8a4ab3bffa21ebd6b2a6abd637097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getUpdate_index</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a4e0abd993183fbd126a877375206a191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getData_org</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>acf7455edd23a594d6ee1855ed7929348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>inUpdate</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a26b3d080dff916387927262e6d6f5ebb</anchor>
      <arglist>(int globalIndex, int &amp;localIndex) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readAllocateInfo</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ac94850fc1b4b7b0b98e08a384128478e</anchor>
      <arglist>(FILE *infile, int *&amp;num_nz_blocks, int *&amp;blk_col_inds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readMatrixData</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a3565164d823f5985a381086a233a5505</anchor>
      <arglist>(FILE *infile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calcRpntr</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a0439c048eb4f39e62d3d56238040d0f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calcBpntr</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a583b79e53ff1a56409a2c998d6224f5b</anchor>
      <arglist>(int *nzBlksPerRow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setBindx</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>aa6fda444c5b641c43c45cc28bacd33dc</anchor>
      <arglist>(int nnzBlks, int *blkColInds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calcIndx</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a331c7b38dbe459bc9886a53364ccf1c6</anchor>
      <arglist>(int nnzBlks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getBindxOffset</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a05c2e6113983f818bce82bcdf56d2b1d</anchor>
      <arglist>(int blkInd, int bpntrStart, int bpntrEnd) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calcRemoteInds</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>adca5691e11808b8b51251b7d8d744cab</anchor>
      <arglist>(int *&amp;remoteInds, int &amp;len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getRemoteBlkSizes</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a3bcb1291eb4519618b3393689d3d0e5e</anchor>
      <arglist>(int *remoteBlkSizes, int *remoteInds, int len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertList</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ae6ae451cc7d2629f487cb403cdd5d26e</anchor>
      <arglist>(int item, int *&amp;list, int &amp;len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValuesFromString</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a496ac5faf756b0a517a711724050c4dc</anchor>
      <arglist>(char *line, int len, double *values, int lenValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>messageAbort</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ac20c597d814ecf75c13341bbfbca1f45</anchor>
      <arglist>(const char *mesg) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Aztec_BlockMap &gt;</type>
      <name>amap_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ac1d30f0fc97cda110e3337568644f090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AZ_MATRIX *</type>
      <name>Amat_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a814b52457df3fa1c312d28ff1da87a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N_update_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a85abf54e39caa8d6c19e03dc09c419b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>external_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a5c3acc81625e2a7aac356f731ae7f448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>extern_index_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ad8370f7cb332d52ff9a06a61224c4436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>update_index_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a8f51677ee41444825489fabfec68f537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>data_org_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ae407db905909e6bc36a20dcf4965a9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>orderingUpdate_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a2faacead5997c18703e7af8b17971d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isLoaded_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>aa2a5a53218122099f4f103cbdc64a437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isAllocated_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a7e1deab5d99bdc85a43d0dac2bef4539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localNNZ_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a7e1c693fb754d3ae260b9807082cc324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>nnzPerRow_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>afcdf7247024225d90cae9c11feef5cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRemoteBlocks_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a05a9ebb6e93af4b74268914cb2b11ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>remoteInds_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>a052be978928f0055a4e5507b7abde17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>remoteBlockSizes_</name>
      <anchorfile>classfei__trilinos_1_1AztecDVBR__Matrix.html</anchorfile>
      <anchor>ad3093d6d0dda303a55d80ce1512f0ac2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BCNodeSet</name>
    <filename>classBCNodeSet.html</filename>
    <member kind="function">
      <type></type>
      <name>BCNodeSet</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>a421a6eff3cd11658e008439cb3cb325c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BCNodeSet</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>a02ec0bd047300195ae8fa62fd94fe83e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes_</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>aa766c7b9c8100713cc0a92bba60b76b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs_</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>ac5951f010fb0344c95ec88c37bb7b74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldID_</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>ae1baa4c92d7368cce8820caedb76d60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>offsetsIntoField_</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>ab6ab14694cb7e4cd29c04c479872586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>prescribed_values_</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>aefb17897a57c101f83ae62084f2babef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classBCNodeSet.html</anchorfile>
      <anchor>a71e84a562525adc7c76ef0f74e120a3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::BlkIndexAccessor</name>
    <filename>classfei_1_1BlkIndexAccessor.html</filename>
    <base>Record_Operator&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlkIndexAccessor</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>a69cbd5d13519ead6db483c293cca4341</anchor>
      <arglist>(int localProc, int lenBlkIndices, int *globalBlkIndices, int *blkSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlkIndexAccessor</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>ac2ee446c27f7206033cc445b62f1f27f</anchor>
      <arglist>(int lenBlkIndices, int *globalBlkIndices, int *blkSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>a2afe7706919e82ec482bb01455acd72c</anchor>
      <arglist>(fei::Record&lt; int &gt; &amp;record)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBlkIndices_</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>aeeee04ec1f8fe1f2e8878db89c8c350f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>proc_</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>ad752478eae980df2ac5f7dbda0a4ecb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lenBlkIndices_</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>a33148448a916c8291dc544e96c8f761d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>globalBlkIndices_</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>a29687f2024e0894f020f597dc4003415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>blkSizes_</name>
      <anchorfile>classfei_1_1BlkIndexAccessor.html</anchorfile>
      <anchor>a804c3b810b0fd7c4f85f375d7832d8fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::BlkSizeMsgHandler</name>
    <filename>classsnl__fei_1_1BlkSizeMsgHandler.html</filename>
    <base>MessageHandler&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlkSizeMsgHandler</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a7a82cb9bee133f44e67011a0e7200b87</anchor>
      <arglist>(fei::VectorSpace *vspace, fei::Graph *graph, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlkSizeMsgHandler</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a52aeb95376390135ef9a3264e20295bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>do_the_exchange</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>ab5962265c7efd4734f7d2d87f93abd1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a768fd00aaa272dc12b462bfc7f67dfad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a39d9bd79888b22ca252deb4d0819dc94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a9acf748967dfe47339f377decd636a13</anchor>
      <arglist>(int destProc, int &amp;messageLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessage</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>aab91266d8aee87934320fc33e17066a9</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processRecvMessage</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a463c80c099cab12f0941414c4d0c6e7e</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>remote_colIndices_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>ab9054ff08d4af980e8bf961f423c71aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>local_colIndices_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a13035279a8ba3fca736c02262583f72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::VectorSpace *</type>
      <name>vecSpace_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>ac30757b5328890e14bf90d2a468aae18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::PointBlockMap *</type>
      <name>ptBlkMap_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a9cc72529050b42c54c41bdb9c6a10876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Graph *</type>
      <name>graph_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a902c6a014db308769cc388702abd1c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>af6972e8ce8c7cd015ae2c9e3bdbd7aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sendProcs_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a7aba8f9659da61400940a8d2a9930e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recvProcs_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a9fb4c320c3af0a0be8762919a7c11ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstExchange_</name>
      <anchorfile>classsnl__fei_1_1BlkSizeMsgHandler.html</anchorfile>
      <anchor>a7afa6333667649942d23184bafa8a308</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlockDescriptor</name>
    <filename>classBlockDescriptor.html</filename>
    <member kind="function">
      <type></type>
      <name>BlockDescriptor</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a2a934870d0c7979977e03a13634fedf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockDescriptor</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>aa827ed0b3e4fa72fb693972bc1e70709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID</type>
      <name>getGlobalBlockID</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a8af7eef269725669731b2c98b7017c5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalBlockID</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a95131399fd98a58269bef358e8145985</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNumNodesPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>aab6d7a4ee820e8ab62370a51ea51e590</anchor>
      <arglist>(int numNodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodesPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a08d0796def373093c6e060dfa55da0bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>fieldsPerNodePtr</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a705bf18a1b4dd5b24618407d80e57ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocateFieldIDsTable</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ac6099459ab6e300d29c7b271a44c840f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>fieldIDsTablePtr</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ab7d3787b3df60c5be92eadff908b36e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsField</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a5f2831a1c250e68284608c67e266a4e9</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDistinctFields</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a09babb638916b1667ec6cd541d76441a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumDistinctFields</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a18490564b411faa0c18882fd5d57f09e</anchor>
      <arglist>(int nFields)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInterleaveStrategy</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a508adf95a7240d6fa6b00a4822f9fe7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterleaveStrategy</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a0d49e63fb6b5d5726717e324e4ee22bf</anchor>
      <arglist>(int strat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLumpingStrategy</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>af1dfccb480a2703ed38d2c0dca85e8b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLumpingStrategy</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>aacb1f72753e1e559aa201ae39d222960</anchor>
      <arglist>(int strat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElements</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ae84fb1a76fd2d307d136bf1bc34730c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumElements</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ada22321d522c4fada226958b2d4f3d98</anchor>
      <arglist>(int numElems)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumElemDofFieldsPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>af3e709ad4cc943d498d0e402128d1e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setElemDofFieldIDs</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a1ec5522305d57d7604a15a800362f2f3</anchor>
      <arglist>(int numFields, const int *fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getElemDofFieldIDs</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ae5a2411922a1706666420a760aad0dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumElemDOFPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ad6466c0a7c0671730b55aab4d99b0c31</anchor>
      <arglist>(int ndof)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElemDOFPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a73b71d18141a56070954e96d52fb53c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>elemDOFEqnNumbers</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a981f7ae914b8f651928565b37ea01270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEqnsPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>afc4e218e54e9c7f27ae7e8d99a7d16c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumEqnsPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a968c7591c9f143447799f5ecfcb647f3</anchor>
      <arglist>(int numEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlkEqnsPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a9425720608445ee25db67c09e07c8395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumBlkEqnsPerElement</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ab01db4e65e1122c633c9593f7dbdbc13</anchor>
      <arglist>(int numBlkEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumActiveNodes</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a495493ce3897857873096b4921e58822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumActiveNodes</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a9300ff81f81e5fa768fab919ae7521e6</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumEqns</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a5b97219d46b6d0019ed778d74a35a65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNumEqns</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a46b3dd33e1039b33fd210a1540e25cab</anchor>
      <arglist>(int numEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BlockDescriptor</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a257b2ee3a3c0a277175255af24668ac6</anchor>
      <arglist>(const BlockDescriptor &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BlockDescriptor &amp;</type>
      <name>operator=</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ab2da95c8c5b05477b0ca2c24e8d019c5</anchor>
      <arglist>(const BlockDescriptor &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyFieldArrays</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a8b9eac7ffb3e89e58c625a1d23811df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID</type>
      <name>blockID_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a5bcc3d4efc0b3036908321ec42a5f14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numNodesPerElement_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>af0196b9cf304a1b54dded33953e41c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>numFieldsPerNode_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ad70f8e57cba5a9485af83826ae0f6ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>nodalFieldIDs_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ac4098b63b5b5ae7fd2db48b14f5259dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>fieldIDsAllocated_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a27dc1389fabc444548f03ff73dfdfe64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numDistinctFields_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a97fbcc78e050a55ed9aa0ac59cdead11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>elemDofFieldIDs_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a7fa90e390be757fa906bad81c413373a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>interleaveStrategy_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ac0796fbab610669bb2797451b10cfd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lumpingStrategy_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a402da12cabcd36abd8731ad879caf6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numElements_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>aebd770a484cbfeeef5654eb556514f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numElemDOFPerElement_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a4c048f7db356cce640334d05749052f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>elemDOFEqnNumbers_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>ab3858ea8566260f8ae80658bde3d5cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numEqnsPerElement_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a94f3b0c344c509388f7c25521a616d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numBlkEqnsPerElement_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a5bc2c867a4b82c05ce44a5382e3e0078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numActiveNodes_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>af8058e9fcd758f4b78c6784b07973554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalNumEqns_</name>
      <anchorfile>classBlockDescriptor.html</anchorfile>
      <anchor>a5d6130ebe0bd39d93dcb37e99a823a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::BlockLinearProblemManager</name>
    <filename>classfei_1_1BlockLinearProblemManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockLinearProblemManager</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a0aebdab932d3cb3b43a68dca3a054404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRowDistribution</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ac531e44952a2ae90362d06f0c4462302</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;ownedIDs, const std::vector&lt; int &gt; &amp;dofPerOwnedID, const std::vector&lt; int &gt; &amp;ghostIDs, const std::vector&lt; int &gt; &amp;dofPerGhostID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ac936a181429aa6e54125f50f4a91d84a</anchor>
      <arglist>(fei::SharedPtr&lt; fei::SparseRowGraph &gt; matrixGraph)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a4a1714456118ea66ca70bbda5addd6c4</anchor>
      <arglist>(double scalar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumOwnedIDs</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a77d7e184d2f2a6f8fda0a747b6ab0cbc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRowPointLength</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a98e2b8566f5a543d04df1acfe4b94edf</anchor>
      <arglist>(int ownedID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRowBlockLength</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ae033460304807e28efc1a9d1ed7acd22</anchor>
      <arglist>(int ownedID)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>copyOutMatrixRow</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ad9cd5b884f52ff017d69a1776e8d0ccb</anchor>
      <arglist>(int ownedID, int dofOffset, int numColIDs, int numCoefs, int *colIDs, int *dofPerColID, double *coefs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>insertMatrixValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a145512deb703764e66ceeab7d0b75749</anchor>
      <arglist>(int rowID, int numRowDof, int colID, int numColDof, const double *const *values, bool sum_into)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>insertMatrixValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>a2e4664446eb8413100eb470f4bd104a4</anchor>
      <arglist>(int rowID, int rowDofOffset, int colID, int colDofOffset, double value, bool sum_into)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ac41970849a3d208ce5ee18e190939a9f</anchor>
      <arglist>(double scalar, bool soln_vector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>insertVectorValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>addaa3c931d0314c54a9b3b96df4085a0</anchor>
      <arglist>(int ID, int numDof, const double *values, bool sum_into, bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutVectorValues</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ab618b3bb4e8509e03f78b8dc4f754af1</anchor>
      <arglist>(int ID, int numDof, double *values, bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double *</type>
      <name>getLocalVectorValuesPtr</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>abebdb9f270eac59c1b08485f06c0ca6a</anchor>
      <arglist>(bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>aafcf283a853252a49eddf0fe9b80f123</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classfei_1_1BlockLinearProblemManager.html</anchorfile>
      <anchor>ab208d7b5be601646270ccfc4eb8c4879</anchor>
      <arglist>(const fei::ParameterSet &amp;parameters)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::BlockMatrixTraits</name>
    <filename>structsnl__fei_1_1BlockMatrixTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>adac853bfc70983dfbccd0a6c7b685da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putScalar</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>aa11df878cdb518acad42d8e589f8045f</anchor>
      <arglist>(T *, double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>ab1979b3cd8e23a4b54e29c255519ef7f</anchor>
      <arglist>(T *, int, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getPointRowLength</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a8b6137c68513e319c478e87914e402a6</anchor>
      <arglist>(T *, int, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a5fa7352cc09a9818ba2bc76bdb06f84b</anchor>
      <arglist>(T *, int, int, int, int *, int *, double *, int, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutPointRow</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a3833f7f85be34373fb4db7ef8812c8eb</anchor>
      <arglist>(T *, int, int, int, double *, int *, int &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumIn</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a15d01b45ca1468a282021623e7b42e09</anchor>
      <arglist>(T *, int, int, int, const int *, const int *, int, const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyIn</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>af7fa8d12499ef2ba4d1642b86a925a23</anchor>
      <arglist>(T *, int, int, int, const int *, const int *, int, const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumIn</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a603492fe1db606070d1a9dee3cd7388f</anchor>
      <arglist>(T *, int, int, int, const int *, const int *, const int *, const double *const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyIn</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a32bf52858d1b2060b91104075d0f458b</anchor>
      <arglist>(T *, int, int, int, const int *, const int *, const int *, const double *const *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structsnl__fei_1_1BlockMatrixTraits.html</anchorfile>
      <anchor>a8741219fdc89b7a0496c845809d2c0fd</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::Broker</name>
    <filename>classsnl__fei_1_1Broker.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Broker</name>
      <anchorfile>classsnl__fei_1_1Broker.html</anchorfile>
      <anchor>adf0ea1b5b7c92d66e858143d4df8d13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Broker.html</anchorfile>
      <anchor>a3a3bffeca5be56d4be0da1a12f32be77</anchor>
      <arglist>(bool isSolutionVector=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classsnl__fei_1_1Broker.html</anchorfile>
      <anchor>a6b1363f8a9f69fde45bb47d2b428b7c8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>createLinearSystem</name>
      <anchorfile>classsnl__fei_1_1Broker.html</anchorfile>
      <anchor>a158bd6969b0cc45439dafd50cdc97175</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classsnl__fei_1_1Broker.html</anchorfile>
      <anchor>acc97d850633f3d7c2c1335c810e2b1f3</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::Broker_FEData</name>
    <filename>classsnl__fei_1_1Broker__FEData.html</filename>
    <base>snl_fei::Broker</base>
    <member kind="function">
      <type></type>
      <name>Broker_FEData</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a8a7a22b39fe9e1f532fe527e3fcc671c</anchor>
      <arglist>(fei::SharedPtr&lt; FiniteElementData &gt; feData, fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int nodeIDType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Broker_FEData</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>af851fa47eab4be8a3767d9ed816b2308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a78b5c83ce2feb5f09ff96c5ee49bbc80</anchor>
      <arglist>(bool isSolutionVector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a5336d20a1fa1022847aa870cb5f9cefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>createLinearSystem</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a3b65729bc15e94094a34cfbf75b81eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a0193f879ecc112c8b0c90448add667a2</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setStructure</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a5cb89d6511c674a68679f4025d9a2e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>feData_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a0bafb44578d0cd3c7e60996f8ed78340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>aab377f1c4abeb9c27d4429a56f721f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeIDType_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>add1f3892caf7f721925846ba470064db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setStructure_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>aaec40613546da6527f265dab31f182c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setMatrixMatrixGraph_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a122695a01cc4adfdb8fd75afd8370188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Lookup_Impl *</type>
      <name>lookup_</name>
      <anchorfile>classsnl__fei_1_1Broker__FEData.html</anchorfile>
      <anchor>a54acadcbbf88ccce1e6e355a2d4c612e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::Broker_LinSysCore</name>
    <filename>classsnl__fei_1_1Broker__LinSysCore.html</filename>
    <base>snl_fei::Broker</base>
    <member kind="function">
      <type></type>
      <name>Broker_LinSysCore</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>ae9a3f7b779a238448ac4923e8c42f457</anchor>
      <arglist>(fei::SharedPtr&lt; LinearSystemCore &gt; lsc, fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, fei::SharedPtr&lt; fei::Reducer &gt; reducer, bool blockMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Broker_LinSysCore</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>ab474543d89f1e8bd947fa2466a3de91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>af5ecf4235514a31851ec918f8907ffdc</anchor>
      <arglist>(bool isSolutionVector=false)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a0034b7109b97b6d48e153bda1c622587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>createLinearSystem</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>ae0cd1a8d6b1a8d4d762ee870820bff3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>ad2bc84c999d921b62cdf1837433b530b</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setGlobalOffsets</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>aa064054c91435b079eb53ac49edfd313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setMatrixStructure</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a2230822e073a38b38a97cd104b969b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LinearSystemCore &gt;</type>
      <name>linsyscore_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a73f1709b8bc2915009bfeed2c7063d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a9f594ce803aa1a38f767ad52ea504c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a5b707f12912a4cca6e66a263cc72d3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lookup *</type>
      <name>lookup_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a1f7d1c6ab1c08559a3607226482469cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setGlobalOffsets_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a3d3d7874a868b6ffe440e2ef8e953e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqns_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a925d1b1759d3bc7d77c0d47888f979fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setMatrixStructure_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>ac6cb7dfba4c4f782ea718bd436368625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockMatrix_</name>
      <anchorfile>classsnl__fei_1_1Broker__LinSysCore.html</anchorfile>
      <anchor>a815cdcb84f26c4e4f348ea00ad6801f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei_Pool::Chunk</name>
    <filename>structfei__Pool_1_1Chunk.html</filename>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>structfei__Pool_1_1Chunk.html</anchorfile>
      <anchor>a9162d0cea6a14a88c7c3d73ab0a7122da319e9cc5f10077a38f9697c4d8bc3389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>structfei__Pool_1_1Chunk.html</anchorfile>
      <anchor>a9162d0cea6a14a88c7c3d73ab0a7122da319e9cc5f10077a38f9697c4d8bc3389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>mem</name>
      <anchorfile>structfei__Pool_1_1Chunk.html</anchorfile>
      <anchor>a4320e356ff2322fbb069fda6f70f6e98</anchor>
      <arglist>[size]</arglist>
    </member>
    <member kind="variable">
      <type>Chunk *</type>
      <name>next</name>
      <anchorfile>structfei__Pool_1_1Chunk.html</anchorfile>
      <anchor>a4adbb938705b4f3df2bda5a3f9f95abe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoefAccess</name>
    <filename>classCoefAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>CoefAccess</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>ac0ee69355a8bc51a8a3305c787bf40ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoefAccess</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a1438bfb988f285b53f872b9ea7f0a94b</anchor>
      <arglist>(const CoefAccess &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>CoefAccess &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>abc4ecc06cc2a584292b7305635899df3</anchor>
      <arglist>(const CoefAccess &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoefAccess</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>aca155c0410f96fc98b642940d1b89103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>patternID_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>adcd06352c56d8f8bb11c5604e7bda8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRowIDs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a6b2a66e0f8844e667edc9f36919c9427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>rowIDs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a21ed0e68d61d92938d13863e08195ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numColIDsPerRow_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a070296929d0603a2a97d5f1c396fb61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>colIDs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>abba72f1060cfffc91f13b99ed395c9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRowCoefs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a839416f543a2800d5db7e3d144c9c62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numColCoefs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>aea44af0bec0d14b32f629fa0b539887a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>coefs_</name>
      <anchorfile>classCoefAccess.html</anchorfile>
      <anchor>a9dc197447e5035b0472a0513223bbf11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::CommMap</name>
    <filename>structfei_1_1CommMap.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::map&lt; int, std::vector&lt; T &gt; &gt;</type>
      <name>Type</name>
      <anchorfile>structfei_1_1CommMap.html</anchorfile>
      <anchor>a60d06f0983593fd872160ff1ea4e2593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommNodeSet</name>
    <filename>classCommNodeSet.html</filename>
    <member kind="function">
      <type></type>
      <name>CommNodeSet</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a47e42131ec28960fc183edd88698f74f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CommNodeSet</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a22bcc1d8d4112a0e64fadfbc7952880f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes_</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a98cffbe46a3009f503a5f5f4d75965b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs_</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a86d958cb7c0482a09d3013169879a7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>procs_</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a4991375f5e242ea3efb843731d801f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>procsPerNode_</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a926b731a6cbf9850fe01d11da375f5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classCommNodeSet.html</anchorfile>
      <anchor>a04da5f4321d3a3b7695eba2b813b0585</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ConnectivityBlock</name>
    <filename>classfei_1_1ConnectivityBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ConnectivityBlock</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a783173c9e034ab2b5d7ee1fe48b82e7f</anchor>
      <arglist>(int blockID, fei::Pattern *pattern, int numConnectivities)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectivityBlock</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>ae7bb5597bbdf0d10d7b0cba5b08f9a88</anchor>
      <arglist>(int blockID, fei::Pattern *rowpattern, fei::Pattern *colpattern, int numConnectivities)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectivityBlock</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a53b18ff619793183ab4c65a51b10dd7a</anchor>
      <arglist>(int numRowIDs, const int *rowIDs, const int *rowOffsets, bool offsets_are_lengths=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectivityBlock</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>ab54bf1f0e69ea61f8ad2d0e65a29e694</anchor>
      <arglist>(int fieldID, int numRowIDs, const int *rowIDs, const int *rowOffsets, bool offsets_are_lengths=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectivityBlock</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>aad3780f63ae64f526aa1ab69e3280047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockID</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a95a343bd2c27e2a98d3c8096486cb9b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fei::Pattern *</type>
      <name>getRowPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a03b95b2600a58754af202fe2db038810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fei::Pattern *</type>
      <name>getRowPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a70436e7757f140f134d3c4088e8d4e17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a335a679caff4c211600d6180b75d2795</anchor>
      <arglist>(fei::Pattern *pattern)</arglist>
    </member>
    <member kind="function">
      <type>const fei::Pattern *</type>
      <name>getColPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a5a8caffa34f8a665a9b4fc7b05d3dbc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fei::Pattern *</type>
      <name>getColPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a26d5a7b29bf759b646ce97a3d97bd43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColPattern</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a767038f0f97f89c0e585d2480a6d9769</anchor>
      <arglist>(fei::Pattern *pattern)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; int, int &gt; &amp;</type>
      <name>getConnectivityIDs</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a3fdc7a06d3dfc0a0cd679dbf969bf59f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, int &gt; &amp;</type>
      <name>getConnectivityIDs</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a8f955be4ed1ef41f2d8eff7153d8afdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getConnectivityOffsets</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a93c74c56eea30226cc913df09bd4e5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getRowConnectivities</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>abe3485feb706bbebbf8910e6c4a54246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getColConnectivities</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>ad254dbd8a39978a678c3821407b79118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getRowConnectivity</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a179f5decb799015509e4752b1ac0be54</anchor>
      <arglist>(int ID) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getColConnectivity</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>abf0747cef6749ec290d1c8f5af678604</anchor>
      <arglist>(int ID) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getRowConnectivity</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a0b66da0403e8c1f4b9ed7563cb23472f</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getColConnectivity</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a3ab0d4f4a9f108746d5e3e1951726447</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a8cd0eb46a3ac5befbc89bfa4c45973ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsDiagonal</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a3a4be3153fb803ef7310dc33af01414a</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a3b486c1a261b53e71841e823e7dc88d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveFieldID</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a079ffc1f7c9bbd31c5714aef0c7cc5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fieldID</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a76faad363eee0abeeb258bf3c26c9af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>blockID_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a95cda75bdea0a787336f13b12e143973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Pattern *</type>
      <name>pattern_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>adf6a6f4b421f5325705d15a210d90609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Pattern *</type>
      <name>colPattern_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a31cdf6b369b0e6c0f2cbbc5dbd77a03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isSymmetric_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a74488a967f0c191ea0b520533ea87753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDiagonal_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>aa7a8a1cbf4c2c241f218d48da1c2cc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>connIDsOffsetMap_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a5168ec4e3f7605609e07956d393696f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>connectivityOffsets_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>aaafc3604bfb8ff8ec5e4114201794bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRecordsPerConnectivity_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>afa4fef178d7e74cdcdfb0d6b7fdd4064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>connectivities_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a2037eee8a9697cb3183a295d9bb4f0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRecordsPerColConnectivity_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a46bb5498b3e9e61a7ee8751e6472e289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>colConnectivities_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a66a59044d585dcf51e66522019344b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fieldID_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>ab44c8752c2f9f14eae8d1e8ac32286ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveFieldID_</name>
      <anchorfile>classfei_1_1ConnectivityBlock.html</anchorfile>
      <anchor>a6cbecce4d85931b885bbf7f275a2d0d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectivityTable</name>
    <filename>classConnectivityTable.html</filename>
    <member kind="function">
      <type></type>
      <name>ConnectivityTable</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a7a3b0876b2a35bbbee6bae127269155e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectivityTable</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a6959bff82a768f8667a96e8379c9d0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRows</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a5f2f00df1c9a175d5c284332ca7ec258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; GlobalID, int &gt;</type>
      <name>elemIDs</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>ab3a4e54f02ca5155c059882a31e48d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>elemNumbers</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>ac20654f0b14eca8940ef06e6398c761f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GlobalID &gt; *</type>
      <name>elem_conn_ids</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a16c5f1aff8e731002503b1c910bafb96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; NodeDescriptor * &gt; *</type>
      <name>elem_conn_ptrs</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a2f7790598436dc6d33a225fd155af119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GlobalID &gt; **</type>
      <name>connectivities</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a0d259c871c805cb3e893a7001b098315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodesPerElem</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a2a5360672afe43153ea2697f1264b4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConnectivityTable</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>aecf6f60d2042ec0b6b312e3597987cc9</anchor>
      <arglist>(const ConnectivityTable &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConnectivityTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classConnectivityTable.html</anchorfile>
      <anchor>a227a354659e427ee69a32ad0e8288a9e</anchor>
      <arglist>(const ConnectivityTable &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ParameterSet::const_iterator</name>
    <filename>classfei_1_1ParameterSet_1_1const__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>a281a44ca8a7a3424ced84afecb61246b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>aafbf8967ffcbbeb3ea23a80ea4ecdbaf</anchor>
      <arglist>(int offset, std::vector&lt; const Param * &gt; *params)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~const_iterator</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>ad39728c1b73c1563c55165b410d51644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Param &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>ab40e89da77fbf9838fa191e93968ad78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>af8cf3f82a94e2f8803a5ed0d5b514a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>add87e84234dbee72275907c8637519bd</anchor>
      <arglist>(const const_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>a2d095709c7ef3f9a10cb30343e58a1b7</anchor>
      <arglist>(const const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>ac7961bae2324a16e7efcd69bdbb36d94</anchor>
      <arglist>(const const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const fei::Param * &gt; *</type>
      <name>paramarray_</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>a7f0ca9e319280f435a26aad728712e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const fei::Param</type>
      <name>dummyParam_</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>a16bde41eb606df8d61502edea67d6aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>offset_</name>
      <anchorfile>classfei_1_1ParameterSet_1_1const__iterator.html</anchorfile>
      <anchor>a16556871d5253ac8c5cde5bcefe93ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ctg_set::const_iterator</name>
    <filename>classfei_1_1ctg__set_1_1const__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a9f08d995d44c10da75bdbf075047628a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a804dca4bb04c0d44449742ee5e448036</anchor>
      <arglist>(const ctg_set&lt; T &gt; *_set, const T &amp;val, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a58554585fae8596fec7d59af5385cf80</anchor>
      <arglist>(const const_iterator &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~const_iterator</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a08f024feeb16302c7065c9dff6ae9544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a19e73d25ac66127e250d67dd6b05aeb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>ad2f047c5285bda293f838154bf7be612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>abbe9c65f0fe261398875b3492ee110b5</anchor>
      <arglist>(const const_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a611a18eb132cc071f73c2c442b510169</anchor>
      <arglist>(const const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a87375ef1592f0e743fb761a7fe484ec1</anchor>
      <arglist>(const const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ctg_set&lt; T &gt; *</type>
      <name>set_</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a8d18e66dae9e5103190401715df0bd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a90f97bb54c8a036c6da196c3b1501dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>limit_</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a36a2e0ebac5d207c46e732ae80b5e2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>i_</name>
      <anchorfile>classfei_1_1ctg__set_1_1const__iterator.html</anchorfile>
      <anchor>a032a3ec6bb5c5c577e46380591dfbada</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::Constraint</name>
    <filename>classsnl__fei_1_1Constraint.html</filename>
    <templarg>RecordType</templarg>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a7df17aa5b2566eee4d239512a5116474</anchor>
      <arglist>(int id=0, bool isPenaltyConstr=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>ac4ba49952d227c48e7611911ebe81f26</anchor>
      <arglist>(int id, int constraintIDType, bool isSlave, bool isPenaltyConstr, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs, int offsetOfSlave, int offsetIntoSlaveField, const double *weights, double rhsValue, fei::VectorSpace *vspace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a3681fc6db62f2082e1e5c45a9fc45ddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConstraintID</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a39bb8a1fec531c754dd5b9926240dafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintID</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a462846793ab457798e296d380a272704</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIDType</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a44d333de1fb83ed233372eb8d3918aa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>snl_fei::RecordCollection *</type>
      <name>getRecordCollection</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a22eee5444bd32341bb3c293d02f4b13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIDType</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a328b79952b88acbf76430eed18481a2f</anchor>
      <arglist>(int idType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPenalty</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a5c57e445912bbf725281cf9361ad007d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsPenalty</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a9232eee85e15e0e862a160c152f5b54a</anchor>
      <arglist>(bool isPenaltyConstr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumber</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>ae2710b4c280815763bbb30864d5d43e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqnNumber</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a04be55c972fe3684a9423d6f135c15cf</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnNumber</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>adf8b520642a1afaf401b22a31f80c206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlkEqnNumber</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a658c6f75ccc0c6fd83e1cf4251e24897</anchor>
      <arglist>(int blkEqn)</arglist>
    </member>
    <member kind="function">
      <type>RecordType</type>
      <name>getSlave</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a8614700c981eda559786e88420033f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlave</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a78a6a1dc829464523dd4bd19778c563d</anchor>
      <arglist>(int slv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSlaveFieldID</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a1203744d97749ebe790200003b549e21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlaveFieldID</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a97bb29627cf1c1970efad28016e3fd98</anchor>
      <arglist>(int f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffsetIntoSlaveField</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a5032e0d68e84f9b33f0e347d141a1818</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffsetIntoSlaveField</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a6a02e3b444301d0c54981247960bcbc9</anchor>
      <arglist>(int offset)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getMasters</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a143adf73f2f883f5d95b248e16eae441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getMasterIDTypes</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>ac3fdaff7a97852276cd9b232adb6578a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; snl_fei::RecordCollection * &gt; &amp;</type>
      <name>getMasterRecordCollections</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a921d58b76f82fb08fd327fd4eb856283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getMasterFieldIDs</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>aa9fb4f0c78020244a8cd1143d5d60175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getMasterWeights</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>ac2a155355e0acc20761ab8c79a1a0a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRHSValue</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a84a7e9aa78ec1f1d51d3efed98879182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRHSValue</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a8db8c7e254d672dcb6520878baa05575</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a51e8706c07111dde2668f8d405190cea</anchor>
      <arglist>(const Constraint&lt; RecordType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>structurallySame</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a34b5a7fbbbd1e8f60216b2b9c2acf2c9</anchor>
      <arglist>(const Constraint&lt; RecordType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a87bd6b7000d0dde82ac90a5e8015b6f5</anchor>
      <arglist>(int id, int constraintIDType, bool isSlave, bool isPenaltyConstr, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs, int offsetOfSlave, int offsetIntoSlaveField, const double *weights, double rhsValue, fei::VectorSpace *vspace)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a974e0fa8422e8f28e91b6cb1f4259a38</anchor>
      <arglist>(const Constraint&lt; RecordType &gt; &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Constraint&lt; RecordType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>aeb386ed5653d068107d14e03bd148acc</anchor>
      <arglist>(const Constraint&lt; RecordType &gt; &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>constraintID_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a92b6eacaedb2497a78523329ba97a8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>idType_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a6e150003f88db629c48866e6a3fb9f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::RecordCollection *</type>
      <name>recordCollection_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a7ef426d155f28cc399af9f31b7ed00b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isPenalty_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a8ad88fd011081672b28b70ee1eaf53b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>eqnNumber_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a04752446ae6a2188ab2c49cab74fb00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>blkEqnNumber_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a24c3aee7a348d4412f23b9c67233c9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>slave_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a01f7e8408f6cb361317c8a0c09702d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>slaveField_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a759ccbb3d73570ed760e3dfdaeb926dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>offsetIntoSlaveField_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>ad77132a444d71a6d64d2b08f6ec6329e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>masters_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a999063d6ea917e28ac928f5bcecad16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>masterIDTypes_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a911c03a9315e2452ba1bda7aaff8ebfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; snl_fei::RecordCollection * &gt;</type>
      <name>masterRecordCollections_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a38bca64b2ba5714038126cd65731fed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>masterFields_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a1854c50735fddb2b91c3a410408ea8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>masterWeights_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>a7f777fd906f1042076cb452e839b4773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rhsValue_</name>
      <anchorfile>classsnl__fei_1_1Constraint.html</anchorfile>
      <anchor>aa06e1136c1761a61e786dfe94af64965</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CRSet</name>
    <filename>classCRSet.html</filename>
    <member kind="function">
      <type></type>
      <name>CRSet</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a5e8658c2e0739d9ae59678c3f414c802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CRSet</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a2976dd55c67d6f3d80d176964f87273b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>crID_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a8101eb6d21cef70b4bc5c22b4eab58d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>af74d8a9d3126f95e2030e0b5d550cdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>slaveNodeID_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>ab9bc374f932a9ce5c575f43ec033004f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slaveFieldID_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a95211ac551bb41e5f21e8b61d4a79a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slaveOffset_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a6b096ddb6a9ef204a849f967e92c3496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID **</type>
      <name>nodeIDs_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>ad515e1e7f13e590bc4919aa3c83e36f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldIDs_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a226cbba4d86f8f8b09e98499a3ca4910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>weights_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a92de677863ab1247f044366551c6df70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>values_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>ae7d7df6551214dd7c2cdbc605e7f711f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>penValues_</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>aec5b98ada378e5cf7dbf95026e66f352</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classCRSet.html</anchorfile>
      <anchor>a9f89eec8ed57785805cbddba027caacf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::CSRMat</name>
    <filename>classfei_1_1CSRMat.html</filename>
    <member kind="function">
      <type></type>
      <name>CSRMat</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>adb16a9c6da7bea50ef3cf4d8ef6029d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSRMat</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a8d6496a45b63b0f5f9a25cb3f4f8459f</anchor>
      <arglist>(const FillableMat &amp;fmat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CSRMat</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a0b438811f92ffd8964fc25925e3c807a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SparseRowGraph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a04dc05b1db5129cf7efcaa3459c085a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseRowGraph &amp;</type>
      <name>getGraph</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a82d613d2003a333e8d637d19cede8007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getPackedCoefs</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>ab116310da0b72f57ca7c539be11f8a9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getPackedCoefs</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>aa7729abba2ac0c90a10fc73c75778f33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getNumRows</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a042069d80dcb760397f9c1495a3cbd03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CSRMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a955f371f3c899370deed5239db7cdd2b</anchor>
      <arglist>(const FillableMat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>CSRMat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>ae21e22f731ebf2cefb1ed262d9d91856</anchor>
      <arglist>(const CSRMat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>afd7e9c4bfa5ef5a61f56f023991caa7f</anchor>
      <arglist>(const CSRMat &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>aed8e82c4e351f0d8ef553acfba70b553</anchor>
      <arglist>(const CSRMat &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SparseRowGraph</type>
      <name>srg_</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a6596f0a4a047065cddb2cffaeba94648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>packedcoefs_</name>
      <anchorfile>classfei_1_1CSRMat.html</anchorfile>
      <anchor>a860da1b84cabd235ce0c56a3779e5b51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::CSVec</name>
    <filename>classfei_1_1CSVec.html</filename>
    <member kind="function">
      <type></type>
      <name>CSVec</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a9eec6b105731064c5f54a12194cd3f83</anchor>
      <arglist>(unsigned sz=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CSVec</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>afaf56ca9a8fa8136a5994b85480598c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CSVec &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>ac26f4b904998d0557b217ca8c3ad386c</anchor>
      <arglist>(const CSVec &amp;invec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>indices</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>adfe0ff02844ec82cdae3d2386a814de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>indices</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a8ea94f0fc8b6af8e7b91543b1d69159c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>coefs</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>ab8b42f0f7fc94c2b36a340203242be19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>coefs</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a39c5f0c5d4b3cdb8274ae0cfe7cea147</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>aa101b5fb9706fb35920aef8043c6412e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a7632f06c94eac0c0320300164cb79cb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a8c2f4a76a5cf474169b424f811c853a3</anchor>
      <arglist>(const CSVec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a2b0fa57ca971006f82077ac3de9d86c0</anchor>
      <arglist>(const CSVec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>ad3bd00774e1708c90d8c2fbd8b3ac89b</anchor>
      <arglist>(const CSVec &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>indices_</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a1dbfc98a25527f30262ee6581fa4f76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>coefs_</name>
      <anchorfile>classfei_1_1CSVec.html</anchorfile>
      <anchor>a6ec089a0300c75a442d414956ec52c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ctg_set</name>
    <filename>classfei_1_1ctg__set.html</filename>
    <templarg>T</templarg>
    <class kind="class">fei::ctg_set::const_iterator</class>
    <member kind="typedef">
      <type>T</type>
      <name>key_type</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a0d1538025441498593e62614c7854460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a5287f1f7c69891c2d447e00010356a33</anchor>
      <arglist>(int alloc_incr=32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a17ba432217d2d9c75f54202e53a3b777</anchor>
      <arglist>(const ctg_set&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a8dd00fa02cc268accd698f6f3acfa549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a3482c7ce9b5ef92e9372a7d40815e10c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ctg_set&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a94adec3110bcdad78450b25db79c86a5</anchor>
      <arglist>(const ctg_set&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a12c1a2d6a77abe7d53bd931a4c5f50a1</anchor>
      <arglist>(const ctg_set&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a3822c6f193b8d0565979fcb782efdf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const_iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a876587d03d182da14abe54c819012979</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert2</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>aca5afa2cbb20e1b3dc6bdd1ed74d4d2d</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert2_dense_group</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a1b370474d446accd612c3592250bd522</anchor>
      <arglist>(const T &amp;starting_index, int group_size)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a7f48627b0552a6e1c0765f8302028d7a</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_to_array</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a4788413435501841f9727688d623c500</anchor>
      <arglist>(int len, T *items) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_to_vector</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a5e87405f00bf06280904d35d57bce986</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;items) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a957f1db42adea9a8985e35055c048408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_iterator</type>
      <name>end</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a61bc3a895a2bbad451dfb286e8137de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>expand_dataptr</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a2d0d84dbbf9f993b809e6002f77c3cc4</anchor>
      <arglist>(int newlen)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>dataptr_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>ac22dfd221bebde631150a3c296991f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>aebc6e0629b423e09efb4bb871b0ca8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>highwatermark_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a8b07e3bd36307c6f66ee3e756d2b375d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>alloc_incr_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a507b0ff829933a80a25d624723c12c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>ac220ce1c155db1ac44146c12d178056f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ctg_set&lt; int &gt;</name>
    <filename>classfei_1_1ctg__set.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>key_type</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a0d1538025441498593e62614c7854460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a5287f1f7c69891c2d447e00010356a33</anchor>
      <arglist>(int alloc_incr=32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a17ba432217d2d9c75f54202e53a3b777</anchor>
      <arglist>(const ctg_set&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ctg_set</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a8dd00fa02cc268accd698f6f3acfa549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a3482c7ce9b5ef92e9372a7d40815e10c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctg_set&lt; int &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a94adec3110bcdad78450b25db79c86a5</anchor>
      <arglist>(const ctg_set&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a12c1a2d6a77abe7d53bd931a4c5f50a1</anchor>
      <arglist>(const ctg_set&lt; int &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clear</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a3822c6f193b8d0565979fcb782efdf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const_iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a876587d03d182da14abe54c819012979</anchor>
      <arglist>(const int &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert2</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>aca5afa2cbb20e1b3dc6bdd1ed74d4d2d</anchor>
      <arglist>(const int &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert2_dense_group</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a1b370474d446accd612c3592250bd522</anchor>
      <arglist>(const int &amp;starting_index, int group_size)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a7f48627b0552a6e1c0765f8302028d7a</anchor>
      <arglist>(const int &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_to_array</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a4788413435501841f9727688d623c500</anchor>
      <arglist>(int len, int *items) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_to_vector</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a5e87405f00bf06280904d35d57bce986</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;items) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a957f1db42adea9a8985e35055c048408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const_iterator</type>
      <name>end</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a61bc3a895a2bbad451dfb286e8137de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>expand_dataptr</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a2d0d84dbbf9f993b809e6002f77c3cc4</anchor>
      <arglist>(int newlen)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>dataptr_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>ac22dfd221bebde631150a3c296991f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>aebc6e0629b423e09efb4bb871b0ca8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>highwatermark_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a8b07e3bd36307c6f66ee3e756d2b375d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>alloc_incr_</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>a507b0ff829933a80a25d624723c12c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1ctg__set.html</anchorfile>
      <anchor>ac220ce1c155db1ac44146c12d178056f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Data</name>
    <filename>classData.html</filename>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>af11f741cb7f587e2e495452a8905a22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Data</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>a8c4dbe720325cd952ec9146114f22d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>a6007105a49b8a9c35e01f5c5fffcbcd1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTypeName</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>ae9faf9a743087db793dd67451562b60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataPtr</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>a045f799f00fc0ac4955dad39e45f8071</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getDataPtr</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>a729cfe6ed4ed219307153c9a7914115f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>typeName_</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>a16c6d4b6b99037dc5b61d25a51723e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>dataPtr_</name>
      <anchorfile>classData.html</anchorfile>
      <anchor>af93078b93b1a7e19c26a39442815ab14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataReader</name>
    <filename>classDataReader.html</filename>
    <member kind="function">
      <type></type>
      <name>DataReader</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>ab9c8558242d6739e2fec90c6e493e91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataReader</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a1fd456f99a9b364953f7973842ea5d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>ab2d2b3d21123bf58d55456ac61013646</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldSize</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a8be6f32d6e65787f399d96709a1ffc16</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a36984b9ec9ee970ed2e28490a1c4b48b</anchor>
      <arglist>(FEI_ISTREAM *instr, char *keyword)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getKeyword</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>aaa50ba8d925cb5256caac247ad8be1d6</anchor>
      <arglist>(FEI_ISTREAM *instr, char *&amp;keyword)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readData</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a7de34457dcbd5842be8c10526c57d6d9</anchor>
      <arglist>(FEI_ISTREAM *instr, int &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readData</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>adf3e6c4754b6fbb7f92977c3ed6074d8</anchor>
      <arglist>(FEI_ISTREAM *instr, double &amp;val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>is_reg_char</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a8399b91d8e0bd49ea8dff49192675c3e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>skipWhite</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a1cfe8653e13b4b8e35708a5ef9787320</anchor>
      <arglist>(FEI_ISTREAM *instr)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>solveType_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a1e6938a86895aba7c8b8fad64a966d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>solverLibraryName_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>aa16851a71ea6b9b737d292925f0945b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>solnFileName_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a419844aad4591b098ee7d6fbba6d5d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>checkFileName_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>adbdad611069b5ebc2223cb7b97f6bf98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numFields_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>abdea721c9d0e7de48e247bedc8c967e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldIDs_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a2125837cb44792e66060940cd99a411e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldSizes_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a72f701ebb237f802d368054f733bd4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numParams_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>aca873c516184fe31dcea83a7fb0dc06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>paramStrings_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a082e6f5132161f0d6efec5f6fa53c81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numElemBlocks_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a7db1e223ed1ea1f081707678177bfe2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ElemBlock *</type>
      <name>elemBlocks_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a51c7ae65e9acbfe4831779b3d86d5690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numCoefAccessPatterns_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a4f7ed63cea8dbf9d9572eff8cdceb497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AccessPattern *</type>
      <name>accessPatterns_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a981ade96fd7051816efbb8e5ea123b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numCoefAccesses_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>ab2e3ee63d5e539427af0acebbb34737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CoefAccess *</type>
      <name>coefAccesses_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a211362841a87f4b1df97b8293deff114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numCRMultSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a9f9b94332d31cbb1407698cd604205bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CRSet *</type>
      <name>crMultSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a1ba3f02e26fdcecd9c0b1cac4ba45bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSlaveVars_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>adc3dfafbdad3d3f19bab52fc2bce5bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CRSet *</type>
      <name>slaveVars_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a1c9a644927d22fade86dd4d005938ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numCRPenSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a597d8ba4f9f67007b74ac5a7a50bb5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CRSet *</type>
      <name>crPenSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>af32c4af7ece28d2db0064d25f35c304c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBCNodeSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>ac6175d4f50fef4cedec1d8e403f83d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BCNodeSet *</type>
      <name>bcNodeSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a18f0d7094613ee52bbba4bf3074a9191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSharedNodeSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a745f3d8900d6206d5c22d609673e31ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CommNodeSet *</type>
      <name>sharedNodeSets_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a57a450dffbda926b0c7fbebc670c0e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a0b1d58430fed11bda8ada68311a99556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>numFieldsRead_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a36ceb1ab25e8042799ccef996ae64933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>numElemBlocksRead_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a52cc0d61ff4e1e98462799dee57be719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentElemBlockIndex_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a8f4ff0d3cf089b718791effa5c0be888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentElemIndex_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a90ef8f61072b009a6ef997912efb03df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentShIndex_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a53b2661bce5fbba350643ec44ce391b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentExtIndex_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>aeb9636cb006918944fb812e43ba64771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentBCIndex_</name>
      <anchorfile>classDataReader.html</anchorfile>
      <anchor>a10cf780e7a2dc36b678d6aafeb76ded7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::DirichletBCManager</name>
    <filename>classfei_1_1DirichletBCManager.html</filename>
    <member kind="function">
      <type></type>
      <name>DirichletBCManager</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a37f6c0f252365687d0f36d17995c1bfe</anchor>
      <arglist>(SNL_FEI_Structure *structure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirichletBCManager</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a3bc4454409cb4f4e748aac997985b2c1</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecspace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirichletBCManager</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>aa35bf15102dd978046eea6c1e33f3a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBCRecords</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a6f094320689acb5fcca110a217b3506b</anchor>
      <arglist>(int numBCs, int IDType, int fieldID, int offsetIntoField, const int *IDs, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBCRecords</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a147dee499a43ef965d0d1e389b58fe5e</anchor>
      <arglist>(int numBCs, int IDType, int fieldID, const int *IDs, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>finalizeBCEqns</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>af82e584c2c65e4b5fe90e50a8ae9fad9</anchor>
      <arglist>(fei::Matrix &amp;matrix, bool throw_if_bc_slave_conflict=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>finalizeBCEqns</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a4976ad56b33efd1a5a54e0f0c601d84e</anchor>
      <arglist>(EqnBuffer &amp;bcEqns)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBCRecords</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a320175a5d661c55f268647966331b91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllBCs</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>aff8bf20fe66608819f9b74e4d888c32a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; int, double, std::less&lt; int &gt;, fei_Pool_alloc&lt; std::pair&lt; const int, double &gt; &gt; &gt;</type>
      <name>bc_map</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>aef0a61b27643f96b43f46aa675e9ab82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnNumber</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>ac4ffb2b30a4ffabd86cc3896c24ddcec</anchor>
      <arglist>(int IDType, int ID, int fieldID, int offsetIntoField)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SNL_FEI_Structure *</type>
      <name>structure_</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a51729a6c129ae69c9e64051f1ad03280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace_</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a9d456b244f0f4ba2697c51ecabaa574d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bc_map</type>
      <name>bcs_</name>
      <anchorfile>classfei_1_1DirichletBCManager.html</anchorfile>
      <anchor>a885928da41ff500de78f3c5ce8e3636c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::DirichletBCRecord</name>
    <filename>structfei_1_1DirichletBCRecord.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>a9efb264e0bba170487599ab88e15f35a</anchor>
      <arglist>(const DirichletBCRecord &amp;rhs) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IDType</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>a674590913767b4c9dc65d975777b18cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>a0b3ba8b554790086b4d975144f3f7b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldID</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>af7e90ce73226e447567696146e9d86af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>whichComponent</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>ab4c4d8b17f929f945726e1c28164de9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prescribedValue</name>
      <anchorfile>structfei_1_1DirichletBCRecord.html</anchorfile>
      <anchor>a0a5910e19381261b7b9eb162101177c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Dof</name>
    <filename>classfei_1_1Dof.html</filename>
    <templarg>LocalOrdinal</templarg>
    <templarg>GlobalOrdinal</templarg>
    <member kind="function">
      <type></type>
      <name>Dof</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>ad60ac5db740264323cb26acc358dcd1a</anchor>
      <arglist>(LocalOrdinal rank, GlobalOrdinal id, LocalOrdinal field)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dof</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>a855d743fa8d7156e674d982d81615c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalOrdinal</type>
      <name>rank</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>a56f049c3bdddade4d56e3cd3e97ff723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalOrdinal</type>
      <name>id</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>abc92cbd0523afe53528beedf262b82c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocalOrdinal</type>
      <name>field</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>aa034342781413d793bcb4ecef122a7f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LocalOrdinal</type>
      <name>m_rank</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>a2c55ea6c8bbd3cc4d9985a925697445f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalOrdinal</type>
      <name>m_id</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>a3964ae9bd348c1369df3845118a0eec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LocalOrdinal</type>
      <name>m_field</name>
      <anchorfile>classfei_1_1Dof.html</anchorfile>
      <anchor>a5e4bf4183d7a479e80dbb1e93fd5cfd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::DofMapper</name>
    <filename>classfei_1_1DofMapper.html</filename>
    <templarg>LocalOrdinal</templarg>
    <templarg>GlobalOrdinal</templarg>
    <templarg>DofOrder</templarg>
    <member kind="typedef">
      <type>std::map&lt; Dof&lt; LocalOrdinal, GlobalOrdinal &gt;, GlobalOrdinal, DofOrder &gt;</type>
      <name>DofMap</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a65b7d935b89c2de399666d5753910dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; GlobalOrdinal, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; * &gt;</type>
      <name>IdxMap</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a97dfc12d29126291c95ae56e8e2fc4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; LocalOrdinal, LocalOrdinal &gt;</type>
      <name>FieldSizeMap</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>aea2662fb8869f11ef77bbd43c7dc3c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofMapper</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a44f66df4df371d656ae4e97605b9915c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DofMapper</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a3123066d76dc19d526605272280eb994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDOF</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>ad19304b0a41611a446fbbd3d6e57b4e8</anchor>
      <arglist>(LocalOrdinal rank, GlobalOrdinal id, LocalOrdinal field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldSize</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a5736e05590aa24c05264451306af97ca</anchor>
      <arglist>(LocalOrdinal field, LocalOrdinal field_size)</arglist>
    </member>
    <member kind="function">
      <type>LocalOrdinal</type>
      <name>getFieldSize</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a6fcc48aa94e7550869b677a62ae462cd</anchor>
      <arglist>(LocalOrdinal field) const </arglist>
    </member>
    <member kind="function">
      <type>GlobalOrdinal</type>
      <name>getGlobalIndex</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a81e52c56692d7c69051edfddc085fd15</anchor>
      <arglist>(LocalOrdinal rank, GlobalOrdinal id, LocalOrdinal field) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; *, LocalOrdinal &gt;</type>
      <name>getDof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a03e69629825ec56c6ad0f4c8b88cac91</anchor>
      <arglist>(GlobalOrdinal global_index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maps_are_valid</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>acb926c72aed6cbbbf1d69d70312614e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maps_are_valid</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a2bc92aacb4e850f14f8e9f4f6589c46e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>DofMap::const_iterator</type>
      <name>begin_dof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>afc02543cbd61d7a8076f3140db8bb528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DofMap::const_iterator</type>
      <name>end_dof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a4d8318ab0e62c47421c0906325431d29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DofMap::iterator</type>
      <name>begin_dof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>ac33a7cdcb9866cb7f56c650fefb10877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DofMap::iterator</type>
      <name>end_dof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>ac44a5518bc2be855ae6cbdef4168743d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdxMap::const_iterator</type>
      <name>begin_idx</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a06f4f5f8b89ab7bebc465bb2c172bf40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IdxMap::const_iterator</type>
      <name>end_idx</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a190c1fe21a786b7573793a2a830ec61e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IdxMap::iterator</type>
      <name>begin_idx</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a833a57d2b9e5bd41cd75c555a10d9bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdxMap::iterator</type>
      <name>end_idx</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>ad7c331906fe8f2e21dc1bc3c15ea79b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DofMap &amp;</type>
      <name>get_dof_idx_map</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a118c67c6d2716d7204db240cd6abf7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DofMap &amp;</type>
      <name>get_dof_idx_map</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>ac714355d5b84f32738e343126624fefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IdxMap &amp;</type>
      <name>get_idx_dof_map</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a22a5bfbf4414e21484d92ca3da1330dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IdxMap &amp;</type>
      <name>get_idx_dof_map</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a7a8eb80ef4179275ad59d2e74b01704d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FieldSizeMap &amp;</type>
      <name>getFieldSizeMap</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>abd1535654ac9031b7a22c832214393b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DofMapper</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>acfdd94e676055945350a7310dcee6bcb</anchor>
      <arglist>(const DofMapper&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DofMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>aba5c5a4704b9073dd9abeca1355bb5a0</anchor>
      <arglist>(const DofMapper&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; Dof&lt; LocalOrdinal, GlobalOrdinal &gt;, GlobalOrdinal, DofOrder &gt;</type>
      <name>m_dof_idx</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>aa976f2f9a7823839ed7f66ec45aa514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GlobalOrdinal, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; * &gt;</type>
      <name>m_idx_dof</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a2610328253335c3d1157ff0a35b205ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_maps_are_valid</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>a9571d23f9c0b32fd15b2373c213a84bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LocalOrdinal, LocalOrdinal &gt;</type>
      <name>m_field_sizes</name>
      <anchorfile>classfei_1_1DofMapper.html</anchorfile>
      <anchor>abab934cde43824eb05efab0d186cc046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>driverData</name>
    <filename>classdriverData.html</filename>
    <member kind="function">
      <type></type>
      <name>driverData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a9b1c827d79f217fecacee1f784fa0a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~driverData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>aeff063a05e5b86201b41927b6452532a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a3342291c673549d344c37dd3347bf0ec</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>call_fei_method</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a50a835f3c9dae36c293a44e0bae1f6f5</anchor>
      <arglist>(const char *method, FEI *fei)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const char * &gt; &amp;</type>
      <name>get_methodNames</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>af27562f86a2c39d78d4b2908d1c6cf39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a016bcea0ce89d32aadd6cfbc9929086b</anchor>
      <arglist>(FEI_ISTREAM *instr, char *keyword)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getKeyword</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ae6d9a9be50baa8e816e49d6a313e7dff</anchor>
      <arglist>(FEI_ISTREAM *instr, char *&amp;keyword)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>is_reg_char</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ab51b975256c9e227586282298fb95176</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>skipWhite</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a2c01ba63e4fc9590de00e9046c3bb6ee</anchor>
      <arglist>(FEI_ISTREAM *instr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a491f6ba714782dc91077229f98b9a9b6</anchor>
      <arglist>(FEI_ISTREAM *instr, int &amp;n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a98b7c58def1de11a0b412b1af8efff3b</anchor>
      <arglist>(FEI_ISTREAM *instr, double &amp;val)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>appendName</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a24b4c9ad508d658709e48bac134ba13e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const char * &gt;</type>
      <name>methodNames</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a8ea3c30817fa242666419ff656a17ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>temp_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ab64435f39a84d6ebc582153b9510e121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tempLen_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a990469454dcdc4ce899dda29276cadb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveType_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ab50779ddec694be9e6a78437a68a4196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>initFields_numFields_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>adf3ee80829468ab0916d1a6f27ebb714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>initFields_fieldSizes_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a5d97c39c2f41991bd32840e88db4c4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>initFields_fieldIDs_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a501fd229b4f38ce8dca67277a88e8a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>initElemBlock_numInts_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a0fdd37eb952b2a96f2f97a1f35243b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>initElemBlock_ints_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a13d192cdd033823a4d5cceabb4c7ed5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>initElemBlock_fieldsPerNode_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a69ab97edd1e9ba5a1e9b36d3f1244fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>initElemBlock_fieldIDs_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a89c66fef0715b754b02c8f0e10a07564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>initElemBlock_elemDofFieldIDs_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>af75eaaf66016ce814c9244d641462048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; initElem * &gt;</type>
      <name>initElems_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ad9191422a44127581e767c9655a3086f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>initElemCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ae86c5dc546f6d3799a0537769f7bfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; sumInElem * &gt;</type>
      <name>sumInElems_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a336e3f8740222567dc9ac603a348cd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sumInElemCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a360cf69b76cb26a2b2d58a06b637ff9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; sumInElem * &gt;</type>
      <name>sumInElemMatrix_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>af4f2c3d15238ea961db664ad94accf9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sumInElemMatrixCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>af4234e615ed8138d33f6852cdf099ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; sumInElem * &gt;</type>
      <name>sumInElemRHS_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a5796147496ac7f9b491dafc273eb2944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sumInElemRHSCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>afe5bd97bce4554da6719d600185f6490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>resetSystem_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a74cc8edb4f69712108391b0640d03906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>resetMatrix_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a4cb9fce20d6a5292168fc5a830f341b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>resetRHSVector_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a1f37766e0fff8065e9dbae1e9e562004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>resetInitialGuess_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>ae256b6ab7301781b0bb4f96f308609f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; nodeBC * &gt;</type>
      <name>loadNodeBCs_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a5895f218ea8e60ad36736edad643dcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>loadNodeBCsCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>adce3924e2b6728e2a4037cad9fefb675</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; initCR * &gt;</type>
      <name>initCRMult_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>af954b4d81067047ce23aa43477e07ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>initCRMultCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a8760bf8edbdc776218385326754a0abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; loadCR * &gt;</type>
      <name>loadCRMult_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a39b6be2354d141149c502caf2d278047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>loadCRMultCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a793134596f3e8f315bdbb676d9198ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; sharedNodes * &gt;</type>
      <name>initSharedNodes_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>aad36eedcd465afd522071d0a150d01bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>initSharedNodesCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a66b0032fd6cf1fdefff0aed8b513f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; parameters * &gt;</type>
      <name>parameters_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a51e96264a447ff3a110c133df37a4a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>parametersCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a59217cd0f3a9620305cde56328051150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; setIDLists * &gt;</type>
      <name>setIDLists_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a9d68e1b22695727c4fbd71f123ab8050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>setIDListsCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>adc3a00d32c48fc8f22e052b04544cd5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>setCurrentMatrix_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a885da0f5b1617a337f64481ba93bff93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>setCurrentMatrixCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>aa258e18e8cb2248812259db3a1878a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>setCurrentRHS_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>afdb8f6d5ea89c555e8f258ad75e3232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>setCurrentRHSCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a37c7ef9deffd92d2c16eebe8381db9cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; putBlockFieldNodeSolution * &gt;</type>
      <name>putBlockFieldNodeSolution_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a96e243d7858fe8c8fe2137f6f86b3200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>putBlockFieldNodeSolutionCounter_</name>
      <anchorfile>classdriverData.html</anchorfile>
      <anchor>a41a751537b3cf55c2037effc71001fb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ElemBlock</name>
    <filename>classElemBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ElemBlock</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>ab5d79bec7391039e5d6ce68bd780303e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ElemBlock</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a4ab0fea9e40fc96dddd8d806206ce1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>blockID_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a05fe3695d4aa6f96912b6f86b6aeacb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numElements_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a5d2cd70bf8ed4f7757b11d65c41fa793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodesPerElement_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a10a8f07e9a0c88537dfb0d2c5642797c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>numFieldsPerNode_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a043f30bc092d1adc63e217ea9eb9b09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>nodalFieldIDs_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>af31ec1f7f78dc2e5ffe4db354e9e9221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>elemIDs_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a275938b25a27509cfa1b1dee3448fe81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID **</type>
      <name>elemConn_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a163ed4bf918af7411a48fa5e3fec7317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numStiffRows_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a6e36262254f08a4329b50362c198101d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>elemFormat_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a9ffa2dd7605eaef959616aa9e0c4ebf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double ***</type>
      <name>elemStiff_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a0ecf338d740d66d73b19360fbaacbc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>elemLoad_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a348957b73e68a3be583010ee5a59bc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numElemDOF_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a77936185cbcddd639d2fc2c425e4c81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>elemDOFFieldIDs_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>af886144d940484a05a4d81f109a1fe63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interleaveStrategy_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>aa61d1d81b64162839863b55113a34546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lumpingStrategy_</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a26a51aee4e30e120d8db3f447a3c42cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classElemBlock.html</anchorfile>
      <anchor>a426614d1a4e04f1b54ab151fe3a258a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ElemContribution</name>
    <filename>classElemContribution.html</filename>
    <member kind="function">
      <type></type>
      <name>ElemContribution</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>ac412bd26c1b73271a1d8f5f83116bab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElemContribution</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>ad501dce79617e1bac2687f479f2fed35</anchor>
      <arglist>(const ElemContribution &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ElemContribution</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>ac9d3c4f4ac65e3671cf43a6c5ec57deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>a1b8056919f2beb9ce6c4dccac9ecae99</anchor>
      <arglist>(const ElemContribution &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>abaa5b119249163d6c59046ac07e3c4d8</anchor>
      <arglist>(const ElemContribution &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>matrixContributions</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>a26f05eba7cdce8db91b6b197d3b746c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>rhsContributions</name>
      <anchorfile>classElemContribution.html</anchorfile>
      <anchor>a17dca48a15aff427985c6ff13c6a441f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqnBuffer</name>
    <filename>classEqnBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>EqnBuffer</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ac1331f22094d895a1df6551f32e3b3e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqnBuffer</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>aa63e71b2c15a78312c65ecb43ed5badd</anchor>
      <arglist>(const EqnBuffer &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EqnBuffer</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a450ccb185137763247a78c6abec69802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnBuffer *</type>
      <name>deepCopy</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a122228eecaae5356f0345255a6a4c8dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnBuffer &amp;</type>
      <name>operator=</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ac34f4ca3c1d2f021b30d22a6f9537b8b</anchor>
      <arglist>(const EqnBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEqns</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a07202084cecf51238a2ffb96fa114165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>eqnNumbers</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a4d3b648c76d6947ca4a56199eac1f66b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; fei::CSVec * &gt; &amp;</type>
      <name>eqns</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a00319869f17cb08a4d7af99a8c9f82cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRHSs</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a4500c75820e40ebe57ec4fe60acbc49d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRHSs</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a321abe0d669f6cf6559c7436a0092ab4</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRHS</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>aadfdf4ad54abe02dd8926a1049888e38</anchor>
      <arglist>(int eqnNumber, int rhsIndex, double value, bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; * &gt; *</type>
      <name>rhsCoefsPtr</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a1e2c94768b36df6dea98092c93edb0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnIndex</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ad00d06024037c948955291051cdee5ed</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInIndices</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a309bed42afa8ab22ee708c175a43616b</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addEqn</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>aaceb2d4269ff801fc3c2ad03e244d977</anchor>
      <arglist>(int eqnNumber, const double *coefs, const int *indices, int len, bool accumulate, bool create_indices_union=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addEqns</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a83a2f16c46f706f4ac41e288a6b58cf4</anchor>
      <arglist>(EqnBuffer &amp;inputEqns, bool accumulate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoef</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ac69d90b4b7c6c430fd507024cfc5f7a3</anchor>
      <arglist>(int eqnNumber, int colIndex, double &amp;coef)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>removeIndex</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a87e09dac7d0ec88194c2ff2d63da6c68</anchor>
      <arglist>(int eqnNumber, int colIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoefAndRemoveIndex</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a3a00da8b418d4a11a558cc7b40ba7709</anchor>
      <arglist>(int eqnNumber, int colIndex, double &amp;coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCoefs</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a16eb417a502dadd1a5c6d69051006d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addIndices</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>aeaa499d3ec0d888880077fc9c06096ee</anchor>
      <arglist>(int eqnNumber, const int *indices, int len)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>newCoefData_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a631d0adce2490d5bc186482e0ad536ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>newRHSData_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ad09af647fd0a496c044c3dc6e6515d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a9ef8b3dced612fecde0ed790b834a056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>insertNewEqn</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a5d6d56712a0a1a29648124c76b804c2c</anchor>
      <arglist>(int eqn, int insertPoint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>internalAddEqn</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a04f2472d4a05474060c55a324b75a428</anchor>
      <arglist>(int index, const double *coefs, const int *indices, int len, bool accumulate)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>eqnNumbers_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ab29528109563ef2b48f0541a758c39ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::CSVec * &gt;</type>
      <name>eqns_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>afdcf55ec8fb018c54c5d3dffb0c604a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>indices_union_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a1dba6573a554ed8eed72e894f8165ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRHSs_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a9ac1510fad2ee3c3a0423e260e29805e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; * &gt;</type>
      <name>rhsCoefs_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ac20af291b6f68081acbf91709734dc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setNumRHSsCalled_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a842fc627a7c1cc172135542efa4d8631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rhsCoefsAllocated_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>a30a8c1105b68e43dd0913b63433aaa68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>dummyCoefs_</name>
      <anchorfile>classEqnBuffer.html</anchorfile>
      <anchor>ad7d26e490d82bffa95e75df99924b514</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::EqnComm</name>
    <filename>classfei_1_1EqnComm.html</filename>
    <member kind="function">
      <type></type>
      <name>EqnComm</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>acfcc89ee859e0d88e7a727790c915a2b</anchor>
      <arglist>(MPI_Comm comm, int numLocalEqns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqnComm</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>a3833ff0565f0e97f9e242362229ee2f6</anchor>
      <arglist>(MPI_Comm comm, int numLocalEqns, const std::vector&lt; int &gt; &amp;globalOffsets)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EqnComm</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>ad91bf60706b66c7e52f144389499bf3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getGlobalOffsets</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>a37c25eda8836234f25a09840a7a5aa17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProc</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>a1824c4da2094e88207b25e04bf75cbe1</anchor>
      <arglist>(int eqn) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>aac3b49839898ded1680f262a13d32351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalOffsets_</name>
      <anchorfile>classfei_1_1EqnComm.html</anchorfile>
      <anchor>a859e454c002422e0af739f14ef693bd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqnCommMgr</name>
    <filename>classEqnCommMgr.html</filename>
    <member kind="function">
      <type></type>
      <name>EqnCommMgr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a0c78bd49a5f3b13694df31612b71dd8e</anchor>
      <arglist>(MPI_Comm comm, bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqnCommMgr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ab83bb84605df50bd7ad31ee5223f57f2</anchor>
      <arglist>(const EqnCommMgr &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>EqnCommMgr &amp;</type>
      <name>operator=</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>aa7c408257468409e8f80dc5b8be8ad8e</anchor>
      <arglist>(const EqnCommMgr &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EqnCommMgr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>acd9e5c5645787e096fc43f1f3f8dddf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnCommMgr *</type>
      <name>deepCopy</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a777424257542964f11e03bbbd32f3ba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumSharingProcs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ad98711dbef511095736e69b704b7cb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>sharingProcsPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ac39b81b9cc82ec5b3482142a18582707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumOwnerProcs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a49de10884c5f7c118ac48a0dd932d2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>ownerProcsPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a3fdd83af38b9ad19199467a9447c3266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocalEqn</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a5145319550c0a46f669a418791e32b32</anchor>
      <arglist>(int eqnNumber, int srcProc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolnValues</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a7386f5ae53e3ee5fcd768c750fbea1cd</anchor>
      <arglist>(int *eqnNumbers, double *values, int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeIndices</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a1b385816125353190014d1767712be6f</anchor>
      <arglist>(std::ostream *dbgOut=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a2f576821d8cc3d9345645d41fadbebc0</anchor>
      <arglist>(std::ostream *dbgOut=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchangeSoln</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>aab8be68b10f61306ca8c2115d68e6ddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorProcEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a8d541ad93e43b2c9cfe907b9701b0e6f</anchor>
      <arglist>(ProcEqns &amp;inProcEqns, ProcEqns &amp;outProcEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorProcEqnLengths</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a8e57401e7c5b7c3cd88677dfbd0440b3</anchor>
      <arglist>(ProcEqns &amp;inProcEqns, ProcEqns &amp;outProcEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>af14b25b72d41a9163f26a036e83bc23a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>localEqnNumbers</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a84afbef4fd7f57b14e4a3305fb1cebe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; fei::CSVec * &gt; &amp;</type>
      <name>localEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a946a1e2f8d2852e21104f2fd82d5ae1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; * &gt; *</type>
      <name>localRHSsPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a8529053fe6f7cbe168e8da95a9534348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteEqn</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>abd70e6a31435d409c17ee5fbe18895fb</anchor>
      <arglist>(int eqnNumber, int destProc, const double *coefs, const int *indices, int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteEqn</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>aee13837df4b6b2aa7e2d9cd701bc7313</anchor>
      <arglist>(int eqnNumber, const double *coefs, const int *indices, int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a6314c88f96c553935fbf5c2173c0b2f0</anchor>
      <arglist>(fei::CSRMat &amp;mat, bool onlyIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteRHS</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a34ec9b9020164d4a396efe6539469058</anchor>
      <arglist>(fei::CSVec &amp;vec, int rhsIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRHSs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a3f8a3e3e652b3f4d68fd9628bbd15be9</anchor>
      <arglist>(int numRHSs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteRHS</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a683fbf4bd8577fc798a64bb59fc739c2</anchor>
      <arglist>(int eqnNumber, int destProc, int rhsIndex, double value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRemoteRHS</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>aaed37846c9ec309d8f87b86cc3f14e47</anchor>
      <arglist>(int eqnNumber, int rhsIndex, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRemoteIndices</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>acd31b7249f7991627d075d55103c6d7c</anchor>
      <arglist>(int eqnNumber, int destProc, int *indices, int num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRemoteEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a755a28517784462c6df3516056af4823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>sendEqnNumbersPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a846cc3b84fea585074b91a7d2c67f9d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>sendEqnSolnPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a31e8e266000b74f0dbee78392723e437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCoefs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a81c72633aaca07e6d5478b8a77ae75e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherSharedBCs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ac2e013e52373c75606aadb198cce3a71</anchor>
      <arglist>(EqnBuffer &amp;bcEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeRemEssBCs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a27a5a85b8ce055577679bcc5017f878b</anchor>
      <arglist>(int *essEqns, int numEssEqns, double *essAlpha, double *essGamma, MPI_Comm comm, std::ostream *dbgOut=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRemEssBCEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a679af3bd4728c994a86feff777ba5647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>remEssBCEqnNumbersPtr</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ac209de3d6546ae47cc3fa28c9fdf6be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; fei::CSVec * &gt; &amp;</type>
      <name>remEssBCEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>ab72da90b11d045595792e417026d6bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangePtToBlkInfo</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a5b999f04e31badc021c8033319db8537</anchor>
      <arglist>(snl_fei::PointBlockMap &amp;blkEqnMapper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newCoefData</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>af2ca247047016522a00a713592435ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newRHSData</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a3a43b1e0cc499a12b30a536262af574d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnBuffer *</type>
      <name>getRecvEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a2757428b5d728c3e35edd2c8ac4409c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnBuffer *</type>
      <name>getSendEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a98e16b0f6c29906d2ce495fcb674c999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProcEqns *</type>
      <name>getRecvProcEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a0291afc2966c7afaa1ee6afa000c0cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProcEqns *</type>
      <name>getSendProcEqns</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a4def969c10889fc73be10e9109c72a9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>exchangeEqnBuffers</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a2d8de71ab5bbc6dafb424f9ab403a737</anchor>
      <arglist>(MPI_Comm comm, ProcEqns *sendProcEqns, EqnBuffer *sendEqns, ProcEqns *recvProcEqns, EqnBuffer *recvEqns, bool accumulate)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>accumulate_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a0899fa2216ee2c5eeb6fb2d2778945ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteEssBCs</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a2e0670b801169c40dc844df595f505f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getSendProcNumber</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>afbd030deed4f1cbb177ac54e9fa52062</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>consistencyCheck</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a9b8bef8e0c8f235cb6c37b4b76eb8c5d</anchor>
      <arglist>(const char *caller, std::vector&lt; int &gt; &amp;recvProcs, std::vector&lt; int &gt; &amp;recvProcTotalLengths, std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; int &gt; &amp;sendProcTotalLengths)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a986899f255fab70b4f251d5d0562edc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProcEqns *</type>
      <name>recvProcEqns_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a9aa80f4bfb6d7d403cfb196e93c4516f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>exchangeIndicesCalled_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a8bcc2aadf8da0ec2ca3ce54657e88af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnBuffer *</type>
      <name>recvEqns_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a5be86ea8f66eaf049b3d8be8f367c656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>solnValues_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a332cb932f60abb6e308a8f80d4c08d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProcEqns *</type>
      <name>sendProcEqns_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>aed5ff0bdbecd430707790d8972de1908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnBuffer *</type>
      <name>sendEqns_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a60886b8f20c5f8f94162b99abbcf4348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>sendEqnSoln_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>af0ddf741d9f862822f63140864bf6fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnBuffer *</type>
      <name>essBCEqns_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>a3f4bb311d89115c07ffc41aaa4ef67cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classEqnCommMgr.html</anchorfile>
      <anchor>acaa34c9f652090398a4d7696f6393637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::EqnRecord</name>
    <filename>structfei_1_1EqnRecord.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>global_eqn</name>
      <anchorfile>structfei_1_1EqnRecord.html</anchorfile>
      <anchor>a586bc2073cfc8908111f48fc293659a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IDType</name>
      <anchorfile>structfei_1_1EqnRecord.html</anchorfile>
      <anchor>a019f0bcf67c505d9034b2bfa8c8caa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structfei_1_1EqnRecord.html</anchorfile>
      <anchor>a948d000453745dcaea11212e80dcb99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldID</name>
      <anchorfile>structfei_1_1EqnRecord.html</anchorfile>
      <anchor>ab99f89ae7887854c740b20ede71a36ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset</name>
      <anchorfile>structfei_1_1EqnRecord.html</anchorfile>
      <anchor>a02cddef8d0a8df299460078616ccb3d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Matrix::Factory</name>
    <filename>classfei_1_1Matrix_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1Matrix_1_1Factory.html</anchorfile>
      <anchor>a960b462907d53f5d118a90c8f3ce7d4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classfei_1_1Matrix_1_1Factory.html</anchorfile>
      <anchor>a960d7afc2216a6fd7bad8d47c70613e5</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MatrixGraph::Factory</name>
    <filename>classfei_1_1MatrixGraph_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1MatrixGraph_1_1Factory.html</anchorfile>
      <anchor>ac4fb5422aa2866fbbba2994adaa57820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>createMatrixGraph</name>
      <anchorfile>classfei_1_1MatrixGraph_1_1Factory.html</anchorfile>
      <anchor>a89e13bd572bba38a58f794865abab4a6</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; columnSpace, const char *name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MatrixGraph_Impl2::Factory</name>
    <filename>classfei_1_1MatrixGraph__Impl2_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2_1_1Factory.html</anchorfile>
      <anchor>a47dee022c30f2f015007b912ef6c4b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>createMatrixGraph</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2_1_1Factory.html</anchorfile>
      <anchor>a0f39b3e2fbbf7c4bde521a1c01d17fff</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; columnSpace, const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Solver::Factory</name>
    <filename>classfei_1_1Solver_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1Solver_1_1Factory.html</anchorfile>
      <anchor>a1661bbca5e203110c231d31af2c1d01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Solver &gt;</type>
      <name>createSolver</name>
      <anchorfile>classfei_1_1Solver_1_1Factory.html</anchorfile>
      <anchor>aa917885a1b9b408168d80c9e23dbb6c5</anchor>
      <arglist>(const char *name=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Vector::Factory</name>
    <filename>classfei_1_1Vector_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1Vector_1_1Factory.html</anchorfile>
      <anchor>af9683a1585927e7442d6c7c4f56c5ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classfei_1_1Vector_1_1Factory.html</anchorfile>
      <anchor>a0c7dc506c0054aae6517ba1e0bec038c</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, int numVectors=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classfei_1_1Vector_1_1Factory.html</anchorfile>
      <anchor>ab7d49c2c972a7341331d46d278c4c044</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, bool isSolutionVector, int numVectors=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classfei_1_1Vector_1_1Factory.html</anchorfile>
      <anchor>a51013d4e1a2bbbf99244149720fee92d</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numVectors=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classfei_1_1Vector_1_1Factory.html</anchorfile>
      <anchor>a457ee50fc490cea9b1e7d90a095732ec</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, bool isSolutionVector, int numVectors=1)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::VectorSpace::Factory</name>
    <filename>classfei_1_1VectorSpace_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1VectorSpace_1_1Factory.html</anchorfile>
      <anchor>a71147be7a05fc415d9c475079cf7a49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; VectorSpace &gt;</type>
      <name>createVectorSpace</name>
      <anchorfile>classfei_1_1VectorSpace_1_1Factory.html</anchorfile>
      <anchor>a188c45dbadac9727604c4bc22efc3f8c</anchor>
      <arglist>(MPI_Comm, const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::Factory</name>
    <filename>classsnl__fei_1_1Factory.html</filename>
    <base virtualness="virtual">fei::Factory</base>
    <member kind="function">
      <type></type>
      <name>Factory</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a636f874c4967aab68a123f63fd7a23de</anchor>
      <arglist>(MPI_Comm comm, fei::SharedPtr&lt; LibraryWrapper &gt; wrapper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Factory</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a57369150a1c9ba2eeb49f8c9a9fbbb52</anchor>
      <arglist>(MPI_Comm comm, fei::SharedPtr&lt; LinearSystemCore &gt; lsc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Factory</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a20308d5c4ed73d500ff8892975aa8fac</anchor>
      <arglist>(MPI_Comm comm, fei::SharedPtr&lt; FiniteElementData &gt; feData, int nodeIDType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a7109de010426664c6d7284a5f598d8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>clone</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>af531d974dd8962086c490a6b7914bc0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parameters</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>afd83ca98fab6e8297d23a5dcc3dd9647</anchor>
      <arglist>(const fei::ParameterSet &amp;parameterset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>createMatrixGraph</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a7ffdc09e12f24152bca8b26c5f532b47</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; columnSpace, const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a4d5528ed7e2e023a30a974dd71e35702</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, int numVectors=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a8dde1d4eab1fd73d0eb3ee25ab714f9e</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>ac965eb61cb5a17d42683628e42daeb78</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numVectors=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a138c89de8668d2f9f776927599ec449c</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>aa883bc1b43683f0a1d7f3708c9d48ef3</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>createLinearSystem</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a8c0cb487541e995f85504fade136da98</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; &amp;matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Solver &gt;</type>
      <name>createSolver</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a2f0d2b8a4767092dca2a4a6a56c827e6</anchor>
      <arglist>(const char *name=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>get_LibraryWrapper</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a684fdba896015502e1a6dd4a2a6cd7aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutputLevel</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a37cc64b1684cad98d3ea9aa66f3341c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createBroker</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>aa92c501ad42a0c86e131243d86c85682</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createBroker_LinSysCore</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a377eebbf862a22d3116150446779458f</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, fei::SharedPtr&lt; LinearSystemCore &gt; lsc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createBroker_FEData</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>aab3dd3f1a6a9dd560275ed6b9bd4fcf2</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, fei::SharedPtr&lt; FiniteElementData &gt; feData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>ad0926f9775bd62d5c69b2c7545aecf8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; snl_fei::Broker &gt;</type>
      <name>broker_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>aed870d4dd636fc81b43dcdca6b77574a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>ab15bab05b3809c7fe037addf4f05ac42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a8b983702458a8380a7b84b172d1a4f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeIDType_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>ad8197f21adb49624bc68282023790f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LinearSystemCore &gt;</type>
      <name>lsc_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>aa644933435bfd2aa8335bc503f358e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>feData_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>af5f7c2b84985839f6823ddb6e5ed21c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>wrapper_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>ac8e7a350432f1ef4232d32075e7f5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>a459942641fa09ffb199399fe5dbaa534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockMatrix_</name>
      <anchorfile>classsnl__fei_1_1Factory.html</anchorfile>
      <anchor>af784b49bc10f55d1f7d3bcb41dcd6183</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Factory</name>
    <filename>classfei_1_1Factory.html</filename>
    <base virtualness="virtual">fei::VectorSpace::Factory</base>
    <base virtualness="virtual">fei::MatrixGraph::Factory</base>
    <base virtualness="virtual">fei::Matrix::Factory</base>
    <base virtualness="virtual">fei::Vector::Factory</base>
    <base virtualness="virtual">fei::LinearSystem::Factory</base>
    <base virtualness="virtual">fei::Solver::Factory</base>
    <member kind="function">
      <type></type>
      <name>Factory</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>ae4d4633ccdaec65c3308c2cf6bacf610</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>ab86c7c8d311380c031652508be13ef2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; Factory &gt;</type>
      <name>clone</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>a694d65ddf2d4da0aaa59af0889370548</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>ad05ee861b1688a602a61c9dfc4423dd3</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; FEI &gt;</type>
      <name>createFEI</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>a79b99471b6933af4170b44bce46c62a2</anchor>
      <arglist>(fei::SharedPtr&lt; LibraryWrapper &gt; wrapper, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; FEI &gt;</type>
      <name>createFEI</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>aec4b600064cde97c264340358940f6b1</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOutputLevel</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>a853be583a3544cfddb00c9c60a048d72</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Factory</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>a878a56d4f553ca3370eea54053af95f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Factory</name>
      <anchorfile>classfei_1_1Factory.html</anchorfile>
      <anchor>a1b282580da403b27bbc076a292f9765d</anchor>
      <arglist>(const Factory &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LinearSystem::Factory</name>
    <filename>classfei_1_1LinearSystem_1_1Factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory</name>
      <anchorfile>classfei_1_1LinearSystem_1_1Factory.html</anchorfile>
      <anchor>a89684996d2ffbf4dc6f87006ddc846ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>createLinearSystem</name>
      <anchorfile>classfei_1_1LinearSystem_1_1Factory.html</anchorfile>
      <anchor>a65a070e76a85a617b78c008b00cc58dc</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; &amp;matrixGraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Factory_Aztec</name>
    <filename>classFactory__Aztec.html</filename>
    <base>fei::Factory</base>
    <member kind="function">
      <type></type>
      <name>Factory_Aztec</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a86990166e723b1249774a373765d01de</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory_Aztec</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>af00a75bec36db2da92a3296cbc604dd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>clone</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a859ee76170995c79d175541fd89ddb8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a02c5c923c5089ada0e7a1458a2938b64</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>ae5dd424616bea9d7ab86780c0f785b69</anchor>
      <arglist>(const fei::ParameterSet &amp;parameterset)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>createMatrixGraph</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>abed2b8d767067ac10919fcfd43027b11</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; colSpace, const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a507208ed2f2a94473d2a4bf5f9eca053</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a63223262719f340c98fe0d12d5f06be4</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a9ab01cd1bff88580f5016c58ce4784d2</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>aa15c534f0a769ed1ba324666e6508d24</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a7a2a60791a3c996fd54b6af98ff4c701</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Solver &gt;</type>
      <name>createSolver</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a0f90b192a563da81acda7bb2943d892e</anchor>
      <arglist>(const char *name=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutputLevel</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a8483bfbfc6b94c97d13914f016ae0db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a80a9606726eb8a8dce4364365002f30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>aebe3a472f85a7c99e3aa140a3491be51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockEntryMatrix_</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a763c66d71431cb0ff4d9ee7d99d6406d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classFactory__Aztec.html</anchorfile>
      <anchor>a40ba6e4d2470da093cca6bfd9a59df99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Factory_Trilinos</name>
    <filename>classFactory__Trilinos.html</filename>
    <base>fei::Factory</base>
    <member kind="function">
      <type></type>
      <name>Factory_Trilinos</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a8d5cb17cf078c59fe03c0ffc4b6755d7</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factory_Trilinos</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a8565287da5917659a03f318b6a676e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>clone</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a0a58d4fe959b73bd3d26b31465ec754f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a8092411b7abd801ac72092bff9d97ee9</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parameters</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a370fd8990d64641d70449901be494640</anchor>
      <arglist>(const fei::ParameterSet &amp;parameterset)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>createMatrixGraph</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a6c76aeeaa89031bfa40ceae1ba3f40a3</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; colSpace, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ac2ce19d03b155e6db362e7f4ea66fe93</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a9b242954caca2d3f3276b0427610a3f0</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ad6b87e924b6c0d6ed1f8752f94d378ad</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>createVector</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a712587293b0d38af37036060c396cc13</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, bool isSolutionVector, int numVectors=1)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>createMatrix</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ad9b436fce736530a7a53642da087054b</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Solver &gt;</type>
      <name>createSolver</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ac7791f3dd999da86c194e70524cb10fc</anchor>
      <arglist>(const char *name=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOutputLevel</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a1519abe051fc29e149ad96021ae5f792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create_LinProbMgr</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a3c2127653f7851bd6570bf63881af5aa</anchor>
      <arglist>(bool replace_if_already_created=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ac71842d1ce62ec646a195af199c871be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a56c2daa75b588bc217a098fd9e80baad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::LinearProblemManager &gt;</type>
      <name>lpm_epetrabasic_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a268d8fb194ee2db6a4bfa2b482cfd676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_lpm_epetrabasic_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a01b0b1656c7fe5cfd84e2a06ceaf6169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useAmesos_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>ac526fc5565f5747eab9b0d8617affea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useBelos_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>adbeec3aebc304fad40961b1d2fbe4604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_feiMatrixLocal_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a6b567f986d3563353950ca54ca1f4c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockEntryMatrix_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>afa5953b93e7edaf5776550f39d527c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>orderRowsWithLocalColsFirst_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a9783f0523bbe43b5dd5a9684b94760f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classFactory__Trilinos.html</anchorfile>
      <anchor>a3ebaa90749b79b84e4c9b9ea17cd2aff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEData</name>
    <filename>classFEData.html</filename>
    <base virtualness="virtual">FiniteElementData</base>
    <member kind="function">
      <type></type>
      <name>FEData</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>aa4c15a2aa57434feb800c54e7f35732e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FEData</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ac4b0ead62ad90ea113f6e85268e93563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ac29f80460e8bdcf0bbe92e2bfea50c7f</anchor>
      <arglist>(int numParams, char **params)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setLookup</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a53035d3dab82c31c7bcec0464d7d7692</anchor>
      <arglist>(Lookup &amp;lookup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>describeStructure</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a1e3d7d50cd0a60259c2bd7a10605a32b</anchor>
      <arglist>(int numElemBlocks, const int *numElemsPerBlock, const int *numNodesPerElem, const int *elemMatrixSizePerBlock, int totalNumNodes, int numSharedNodes, int numMultCRs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setConnectivity</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a43f68e55aee4912a72edb6abc9edec44</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *numDofPerNode, const int *dof_ids)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setElemMatrix</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a3a0bb3fc087db10c0fc3a3af33a2e52f</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *dofPerNode, const int *dof_ids, const double *const *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setElemVector</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a117324f635189b641373dd1388c24e8c</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *dofPerNode, const int *dof_ids, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDirichletBCs</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a82231e819943f4eddac7c1e1fb00a3a4</anchor>
      <arglist>(int numBCs, const int *nodeNumbers, const int *dofOffsets, const double *values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoMatrix</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a815495b445b7764764c14ba12f9f50e7</anchor>
      <arglist>(int numRowNodes, const int *rowNodeNumbers, const int *rowDofOffsets, const int *numColNodesPerRow, const int *colNodeNumbers, const int *colDofOffsets, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoRHSVector</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a7b8c080f79a57b67dc86571f0ab95f1e</anchor>
      <arglist>(int numNodes, const int *nodeNumbers, const int *dofOffsets, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoRHSVector</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>aa7faa05b4705c8c740cd2e1206586c90</anchor>
      <arglist>(int numNodes, const int *nodeNumbers, const int *dofOffsets, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ae5669cbaff42e561a78fa954c7d56c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>launchSolver</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>aaa62d69af6c3f1ae256837914cee5e43</anchor>
      <arglist>(int &amp;solveStatus, int &amp;iterations)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reset</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a7737a6343bdb61bc7f9529781d5d0b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetRHSVector</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a8652747e5ad2d69c84d517ed9ce0a805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrix</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a4ff3fcc65fae7bb383a0733045166083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deleteConstraints</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a54a1d80accee4846e6f3161d67144173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolnEntry</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a49821619e53d786ef16fbc0e5b85f137</anchor>
      <arglist>(int nodeNumber, int dofOffset, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMultiplierSoln</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a952cbbb6fd2f5983ab058461f93914bd</anchor>
      <arglist>(int CRID, double &amp;lagrangeMultiplier)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a2ac2da6c46887ce28470e9bc02db9181</anchor>
      <arglist>(int fieldID, int fieldSize, int numNodes, const int *nodeNumbers, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMultiplierCR</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ab04a6eb201cffdc9a98fe3e97318a645</anchor>
      <arglist>(int CRID, int numNodes, const int *nodeNumbers, const int *dofOffsets, const double *coefWeights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setPenaltyCR</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ab64c39780d2062dc441494011a881f28</anchor>
      <arglist>(int CRID, int numNodes, const int *nodeNumbers, const int *dofOffsets, const double *coefWeights, double penaltyValue, double rhsValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setDebugLog</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a1d8be105649445bf8c816b80e656d408</anchor>
      <arglist>(int debugOutputLevel, const char *path)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a4b0690c087238484ab5583cc0c2778e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a8f9aaeaea442a82075e6b07fa778aceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a617dbb7589e97d55f753114b1aaf7ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debugOutputLevel_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>aa603561c0ba6d885febdabd6b034d32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>dbgPath_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>abaed766d5eff3639be0684434467cf3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FEI_OSTREAM *</type>
      <name>dbgOStreamPtr_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>a20c29ba7ee77a1ac3571c11bda11219a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>dbgFileOpened_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>ad7d868ee895b4bcacae5a665a766a3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FEI_OFSTREAM *</type>
      <name>dbgFStreamPtr_</name>
      <anchorfile>classFEData.html</anchorfile>
      <anchor>aaae42d3e7398fa2d16bea42dac27aa6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEDataFilter</name>
    <filename>classFEDataFilter.html</filename>
    <base>Filter</base>
    <member kind="function">
      <type></type>
      <name>FEDataFilter</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a5b13b9075fd4880d3995915b546fa2de</anchor>
      <arglist>(FEI_Implementation *owner, MPI_Comm comm, SNL_FEI_Structure *probStruct, LibraryWrapper *wrapper, int masterRank=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FEDataFilter</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ab52b6db987b3b124d944229d50217a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetSystem</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae5df52bfca77fa13c6b9027d710cdbe1</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a6261623107feb32ba61025105ad6731c</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetRHSVector</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a812e1f157b2452771b55daa4bfbf7e3d</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a323a42e20a8e786cb21267b123ccc948</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a200fda8d4ae2c6f659afe66091fe70e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a483921262749a4e8b6b042ef4ea3ec11</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int fieldID, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadElemBCs</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a17d4a7f0f88f51f31b289da41782f8b2</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElem</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a069c11591f6ba6725ca214eca1dd4bfa</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ade001935ee08b15ad219eddb3c2d4fe1</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a61e403e8ead32e1b1fed460693e91ac2</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *elemLoad)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRMult</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a99b1b3365a702fd2a4e1245280b101ad</anchor>
      <arglist>(int CRMultID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRPen</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ac169e2fec25a1b23a98c1871b8c9aa69</anchor>
      <arglist>(int CRPenID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>acc938aa1b506e72276091100f13a87b9</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>acd5bf7813cc28d43c58ac6ccdd26a508</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoMatrixDiagonal</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a3aa5097c1285dda0dad5f4a36bda3050</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a038aff16b86fde10ab6e4561f7064bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ac34eb502e9ed69dc2d7c6cbafa458800</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>residualNorm</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a9bca48c9329aac075897d8c17d64dc76</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms, double &amp;residTime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aae6a35b089bfcc075ed4707b81846d26</anchor>
      <arglist>(int &amp;status, double &amp;sTime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a72c54bd30c09bf0640fbf7ce7c659f9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a843394d9c92c762224ebf25062080d4f</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a61742041140d9d77e8ba39b83d415381</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a17204f7b7a4eb02edd33ae0ef0a2395a</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ab1caba5265ab375bc08b743667647ca0</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>acf652a7809f0e5bf4f04a27004af9a74</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *multipliers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ace24ffa89d2186b9d4cf450829fd5236</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ad9b2b2efcc61a378632da3cfb4372673</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>abef31e355902667e830e38c28ec7799c</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a2c76bf37e53e8be55eb5c660219bdc37</anchor>
      <arglist>(int numMultCRs, const int *CRIDs, const double *multEstimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a1138cd9269455ee1c1b065c8f88d98d4</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a6f847d389cf5444d8572b5586d39494f</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae1171a6802dcae8f9343d410bf4d17d6</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>unpackSolution</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae35c9c6cd3f945f116ba0ed174512659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqnCommMgr</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a31d44390a1b9f70d6484d02f86700040</anchor>
      <arglist>(EqnCommMgr *eqnCommMgr)</arglist>
    </member>
    <member kind="function">
      <type>EqnCommMgr *</type>
      <name>getEqnCommMgr</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a5c314f41c4c0dbbbb6a36601521b7dc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNumRHSVectors</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a3727118fa082279cb5ec83e8991bdc01</anchor>
      <arglist>(int numRHSs, int *rhsIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a503260c46d0d21fbda9f2610d20fa6aa</anchor>
      <arglist>(int rhsID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enforceEssentialBCs</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ade11bf2b74d7b7a2d82aef5959ecdafd</anchor>
      <arglist>(const int *eqns, const double *alpha, const double *gamma, int numEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initialize</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a4ce99576e5c4915a6fbcfa3e86138280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FEDataFilter</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ac6a6a241fe7db2ee3e098d124f16c36c</anchor>
      <arglist>(const FEDataFilter &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FEDataFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a337ac9ce2ed8686791c60e7d797d01b3</anchor>
      <arglist>(const FEDataFilter &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initLinSysCore</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a6f68e5aead08b4b1f18f9e7477ff4506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadFEDataMultCR</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a886f2681961a2e4baae2b6293ef3ae12</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadFEDataPenCR</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ac10642ac8640ed6819a57564bd588806</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>generalElemInput</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a90467938697aa321e5af19891f5952a8</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>generalElemInput</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a065adef3dfeed900b21008b679eb7130</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocElemStuff</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a9b5f374deede6d2bc680a5b4b59de93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>afcbaf0d4f27e0735df753c1dde05d873</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToLocalReducedMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a03c46872f99de35ed9e9af265a6053bf</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFromMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ab7e99d57f9bdb1563646fd2104dece85</anchor>
      <arglist>(int numPtRows, const int *ptRows, const int *rowColOffsets, const int *ptCols, int numColsPerRow, double **values)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnsFromMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a20d18b785179e7da9099463a66b9a645</anchor>
      <arglist>(ProcEqns &amp;procEqns, EqnBuffer &amp;eqnData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnsFromRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a9c42a11497f749628ac74684a00db532</anchor>
      <arglist>(ProcEqns &amp;procEqns, EqnBuffer &amp;eqnData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>af4bdfd12e01d2d8d4efbabd1fd7d38b7</anchor>
      <arglist>(int num, const double *values, const int *indices, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToLocalReducedRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a10b79c201442bf8c6898ca409a1f6850</anchor>
      <arglist>(int num, const double *values, const int *indices, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFromRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>abe84e38d4e743d48150e8db0dbf98aa2</anchor>
      <arglist>(int num, double *values, const int *indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnSolnEntry</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a8a2660b5c3e5d0bfcb36501e2c24f766</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getSharedRemoteSolnEntry</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a0e07baf1cc278a0b7224686354fa6c63</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getReducedSolnEntry</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a842ce85d67f3d083ac34f113cd0ca9ab</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>formResidual</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a4d5f260f04e68249c84eb0bdb57e0143</anchor>
      <arglist>(double *residValues, int numLocalEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getRemoteSharedEqns</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae628443a0176793666ac4e7d2cfad487</anchor>
      <arglist>(int numPtRows, const int *ptRows, ProcEqns &amp;remoteProcEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resetTheMatrix</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a310e1c9e1aa5623cfdce215744c7d875</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resetTheRHSVector</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a5afd2382808979ce7bc83d794e292013</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleEqns</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ad4ef3c83f758ab6f399d57e32871d414</anchor>
      <arglist>(int numPtRows, int numPtCols, const int *rowNumbers, const int *colIndices, const double *const *coefs, bool structurallySymmetric, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleRHS</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a66523d4457ace83954af37a4f484b1fd</anchor>
      <arglist>(int numValues, const int *indices, const double *coefs, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>debugOutput</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a40140b1792652fc3cf882fa5c1489346</anchor>
      <arglist>(const char *mesg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createEqnCommMgr_put</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>af0c446f12974a54f6918befe12133984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LibraryWrapper *</type>
      <name>wrapper_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aeab4d1d288def7112776c6bd012836e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>feData_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aeb75029a8993330db17c1af8ebd6393f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useLookup_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aacdfe309ef1f3eeeb8ee7eca68c42296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>internalFei_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a8196f3b20e26b52e01ea657746cc90ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newData_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a699ca3a431ebb1c866d2808f2b98f8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localStartRow_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a4d9f7e05b2ff9c18b8962b280428382c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localEndRow_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aeddc9838c662b314037255822665f731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqns_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a2a952e3c2bd94344122655074774bfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedStartRow_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a35257b00e1138393823efb52be02c6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedEndRow_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a3e8827fd48f968a49497abc2b9711d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReducedRows_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a1253d354cbfa437db5546f12a7c869b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterations_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a5aa9ff2faac6462f08c7419af1b32aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRHSs_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae26b515aae37b8bb555b80b6e4777877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRHS_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a7c9d4234b364fd62b2d6aecfb9477012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rhsIDs_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a0f8082b9f31454d835e8fbce09936fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a3d66359c28fca14cb83940ebb28d4206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aa00b657dde3e5b4ca58bf13cab568f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterRank_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a42b97f7892abb6bac7fcfcb0109b30c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SNL_FEI_Structure *</type>
      <name>problemStructure_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a3ab9054a4142785ff0aec7f1aac589f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>penCRIDs_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a75fdc5909d54abd177fe1a2968d626b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rowIndices_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae96f2f0f5df60e65c5c93ed87d2f77ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rowColOffsets_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a11e5501ed920ed684aa26a97fe56a4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>colIndices_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a14e860747bf20a27204750dc374a1a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>eqnCommMgr_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a7b06acc8aeb4128007e783b6f95c410b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>eqnCommMgr_put_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a0e4cfcaaca145303ce3de31787eb33e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxElemRows_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a072ee78db709109377b212f04aae055d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>eStiff_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>ae3308ef271f0b0bf2166ed903eab5921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>eStiff1D_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a7687c0d3a9053ce5fa109a6a96bdccbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>eLoad_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a9090a403ff67ec0582db0db1c302aa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRegularElems_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>aa7d3980ee09f28cedf3aab5fba0fc8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>constraintBlocks_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a6b00cfbd96199cb8aef0ebd6884d3d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>constraintNodeOffsets_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a2ce9d1a7704f4fb130f269b705c0d6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>packedFieldSizes_</name>
      <anchorfile>classFEDataFilter.html</anchorfile>
      <anchor>a12c20485f566c7eb205c0a2809697999</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEI</name>
    <filename>classFEI.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FEI</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a5aec1444c37a2e3ac676cbece510f340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>abc2c3ac55b356bce6b2de91628c7bbe2</anchor>
      <arglist>(int numParams, const char *const *paramStrings)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setIDLists</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a8dacbabfcf596f77ddbdd93b21763b9b</anchor>
      <arglist>(int numMatrices, const int *matrixIDs, int numRHSs, const int *rhsIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setSolveType</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>aed348235538a63b9a56498351655a35c</anchor>
      <arglist>(int solveType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initFields</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a86698a20ea68f1445487eb7dfcb07075</anchor>
      <arglist>(int numFields, const int *fieldSizes, const int *fieldIDs, const int *fieldTypes=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initElemBlock</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a36dcd5bd20ae0b7dfcedcd775424764a</anchor>
      <arglist>(GlobalID elemBlockID, int numElements, int numNodesPerElement, const int *numFieldsPerNode, const int *const *nodalFieldIDs, int numElemDofFieldsPerElement, const int *elemDOFFieldIDs, int interleaveStrategy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initElem</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>af363d2567eef6def01ec637b78f397cf</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initSharedNodes</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac01ad9a98bc5994afe93d05ba3f86577</anchor>
      <arglist>(int numSharedNodes, const GlobalID *sharedNodeIDs, const int *numProcsPerNode, const int *const *sharingProcIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initCRMult</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a761cd245917a43482b514b2f3631fb7d</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, int &amp;CRID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initCRPen</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a5ab511e57af68e3d9a626bfc503150cc</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, int &amp;CRID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initSlaveVariable</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac6ca34a2d4ada8cf854323d74041c370</anchor>
      <arglist>(GlobalID slaveNodeID, int slaveFieldID, int offsetIntoSlaveField, int numMasterNodes, const GlobalID *masterNodeIDs, const int *masterFieldIDs, const double *weights, double rhsValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initComplete</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a04032507c1d7deeef03d6f3845e7ff1d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setCurrentMatrix</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a2cf38780f320ffb1af27c8ff4cca70fb</anchor>
      <arglist>(int matrixID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a8efa87aa7d9484ecb5a2236ace15381e</anchor>
      <arglist>(int rhsID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetSystem</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac8650954384b8491ad155f4ced740cf5</anchor>
      <arglist>(double s=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetMatrix</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a9834f090a22fd22adcdfadc11e696f47</anchor>
      <arglist>(double s=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetRHSVector</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>abc6bcd613785fb4b7e3fdde4f89e9baf</anchor>
      <arglist>(double s=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a61717bf641f73c6d1119062b3cd2a81a</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac6e047f70047fab9027cf03152a419b8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>af29a5b37ecdc04baebca01a7656f6d0a</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int fieldID, const int *offsetsIntoField, const double *prescribedValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadElemBCs</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac2131950199ec60fa60f5a8a0d0f18a6</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInElem</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a3a4b809d233db25c13bf45e16d43555b</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a39aae1178f941c357db743691d63e140</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, int elemFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a8cedce6a58e9406b605892bc4b6faa9d</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *elemLoad)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadCRMult</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a7c1fd4143a1d52ac60a6a7f5e33c2e02</anchor>
      <arglist>(int CRMultID, int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, const double *CRWeights, double CRValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadCRPen</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a595ef7f2af6ac11b8e5056901a397aba</anchor>
      <arglist>(int CRPenID, int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, const double *CRWeights, double CRValue, double penValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putIntoRHS</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a7c7ce14221c0a546c546b501c7338680</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ad661613e3358438ccc14d479fb9941b3</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumIntoMatrixDiagonal</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ab7195e18b4bac41e8bb4b7746be93e3c</anchor>
      <arglist>(int, int, int, const GlobalID *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setMatScalars</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a6a3a8a0d3c7d280fe88f1c29528244cb</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setRHSScalars</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a9b8f3653277c29b34d8795d2c4cc8bfb</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadComplete</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a874ad10c236b79ffb27b5cb0374460ec</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>residualNorm</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a2bc007651ddf64a15834f2072ce8ad19</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>aed8159ff0873f26578dab5c8f8b808cb</anchor>
      <arglist>(int &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>iterations</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>aab2221611e219db9933e8a0a76ade813</anchor>
      <arglist>(int &amp;itersTaken) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldSize</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a19195e48026a8c746fb7ddc2d3a98a39</anchor>
      <arglist>(int fieldID, int &amp;numScalars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getEqnNumbers</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a94fd960cd36a9f999bc86339c9831f11</anchor>
      <arglist>(GlobalID ID, int idType, int fieldID, int &amp;numEqns, int *eqnNumbers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ae0fb771f3a7c61b47caaae2dcbd0584d</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumLocalNodes</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a874d40c48f9ac2354e99bc681894da26</anchor>
      <arglist>(int &amp;numNodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalNodeIDList</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a1659b3b0fa6b58941788bec5caa6a80d</anchor>
      <arglist>(int &amp;numNodes, GlobalID *nodeIDs, int lenNodeIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a5f7c82682b1955f228577149febc7dfc</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>af394fd59a64c167b32fa94416d1a510d</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNodalSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a4fbdb0027dfc20928171dfd9175805a9</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ade5fc56993b08ae5fa14846e12c5b0fd</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>adc4b171343801716140980ff0dd19f37</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumCRMultipliers</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a412274f5ed9e9609fdfbd19adbc33bf6</anchor>
      <arglist>(int &amp;numMultCRs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCRMultIDList</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a33dc0d99319a63236b6107448eb02f1c</anchor>
      <arglist>(int numMultCRs, int *multIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a65cc13634816781f9484b6e2cf703d38</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a8e993e390bbeb8f4b06ea3e22913fd42</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>aacf9ec5473fe2202f1f7e422a99bbf6e</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a272e4ec25d4fb09e259b027a5822f6a2</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>ac7f0be86dae6af87f0423953b66442ea</anchor>
      <arglist>(int numMultCRs, const int *CRMultIDs, const double *multEstimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockNodeIDList</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a3b01c6e4498adf36d63ceae7c686629b</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, GlobalID *nodeIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockElemIDList</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>af2bac083e76f4eeff1f53bcbfb0654a6</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, GlobalID *elemIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a99c9490a986e0093b4cf565d3e347c51</anchor>
      <arglist>(const char *&amp;versionString)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cumulative_cpu_times</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a854fe8099e376c951178d790d1a54fca</anchor>
      <arglist>(double &amp;initPhase, double &amp;loadPhase, double &amp;solve, double &amp;solnReturn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSolnParams</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a95c4a1774e6046f7cddd6716b716681f</anchor>
      <arglist>(GlobalID globalNodeID, int &amp;numSolnParams) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>afe89640dfa34048f483531fb92c547f2</anchor>
      <arglist>(int &amp;numElemBlocks) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBlockActNodes</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a7ace8a49c7989c19542df3184b59f4f3</anchor>
      <arglist>(GlobalID elemBlockID, int &amp;numNodes) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBlockActEqns</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a842795b2e2600a92e19efce4028ce2e9</anchor>
      <arglist>(GlobalID elemBlockID, int &amp;numEqns) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumNodesPerElement</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>abe3ff909070d010734b8873a96a992c4</anchor>
      <arglist>(GlobalID elemBlockID, int &amp;nodesPerElem) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEqnsPerElement</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a6398e6b4fe236528451dcf6da82ec28f</anchor>
      <arglist>(GlobalID elemBlockID, int &amp;eqnsPerElem) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBlockElements</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a4dc7adfdc0ed6b579697ba0387b18b40</anchor>
      <arglist>(GlobalID blockID, int &amp;numElems) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBlockElemDOF</name>
      <anchorfile>classFEI.html</anchorfile>
      <anchor>a12b2053c32c970283b667301d0e17c56</anchor>
      <arglist>(GlobalID blockID, int &amp;DOFPerElem) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::FEI_Impl</name>
    <filename>classfei_1_1FEI__Impl.html</filename>
    <base>FEI</base>
    <base protection="private">fei::Logger</base>
    <member kind="function">
      <type></type>
      <name>FEI_Impl</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>af76223c38f003fc41e911039f9d382d8</anchor>
      <arglist>(fei::SharedPtr&lt; LibraryWrapper &gt; wrapper, MPI_Comm comm, int masterRank=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FEI_Impl</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>abab89fc24afd1723f0d65fa36ea4ebaa</anchor>
      <arglist>(const fei::Factory *factory, MPI_Comm comm, int masterRank=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FEI_Impl</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a2370ece4b38dd90675f096bc1e1a3423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>getLinearSystem</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a13dde276de107d8ab590b220451b6406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>abd457eee6b49fe78a0963a5eb15381a0</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIDLists</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>affd06212765c33ddcfaaddc09fe58292</anchor>
      <arglist>(int numMatrices, const int *matrixIDs, int numRHSs, const int *rhsIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setSolveType</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>af3c55cb260581bd2d2b4637b04e16d85</anchor>
      <arglist>(int solveType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initFields</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a33ad95752d7fdafa744bc269080a83ab</anchor>
      <arglist>(int numFields, const int *fieldSizes, const int *fieldIDs, const int *fieldTypes=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElemBlock</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a43bdc9b388f7a8ee4ab6213ff5f2a3d6</anchor>
      <arglist>(GlobalID elemBlockID, int numElements, int numNodesPerElement, const int *numFieldsPerNode, const int *const *nodalFieldIDs, int numElemDofFieldsPerElement, const int *elemDOFFieldIDs, int interleaveStrategy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElem</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1bad0a72be5ecef39474f37a4b59e825</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSlaveVariable</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a14ad5272de1fdb881e4df7c905b7e62d</anchor>
      <arglist>(GlobalID slaveNodeID, int slaveFieldID, int offsetIntoSlaveField, int numMasterNodes, const GlobalID *masterNodeIDs, const int *masterFieldIDs, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a4b683541fbfece03cdd36cb7cc51f5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSharedNodes</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab3b4471818012cee6bacd9557bd0e895</anchor>
      <arglist>(int numSharedNodes, const GlobalID *sharedNodeIDs, const int *numProcsPerNode, const int *const *sharingProcIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRMult</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a6021c513785411551c216917754b8726</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRPen</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1e3af09df7e5fc2caa095013531601fb</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a8a7904505aa2df0ebe1273f4fffbead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setCurrentMatrix</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ae2ba07518f169f51047870a46a2e283c</anchor>
      <arglist>(int matrixID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab677364b75355a791e6f69f311d12423</anchor>
      <arglist>(int rhsID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetSystem</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a537da9af8f7a04919215caa88310e20a</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrix</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1b4d01ddbff83ace62a744c5f34e2f60</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetRHSVector</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a11277d051960db6f4541f7d04184452a</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a5f5f6fe7dbeedd82cc685fe3e72e57c9</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a80da2c7441a057934160ec8ad52b7f8c</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int fieldID, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadElemBCs</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a0ffc96851c46bed1c3093da6ade1ecba</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElem</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a9931d188b6ae6d8b97b143c943c8a732</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a9d75112c7ff4a9210d62c1f35819d6d8</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a9997a75792087a1c158c245fbb5e62c2</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *elemLoad)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRMult</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>adcb1f52868b6a457600f00924cf9b82a</anchor>
      <arglist>(int CRMultID, int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRPen</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a170187981e9a25715c4079234699ca4b</anchor>
      <arglist>(int CRPenID, int numCRNodes, const GlobalID *CRNodeIDs, const int *CRFieldIDs, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoRHS</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a327fdf3c536a626edccdf6b2eca97c5d</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ac116af550d73520b00885e632c736ece</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMatScalars</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3b729436e1dd50468faba9af995b0d34</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRHSScalars</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a5fc8bf769e0dcd273364df47788b714b</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3975a002d0dd02d13ada152f625bbe84</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>residualNorm</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a6a35c17464bf2dbcaf8e4fb50cfb2f85</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3baf52eb279718828760e617b0c4fadb</anchor>
      <arglist>(int &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a233faa5e164be5e98a54ba6e317105e0</anchor>
      <arglist>(int &amp;itersTaken) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>version</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ae02c61e55be0dd7b7f3f68edd7be04c6</anchor>
      <arglist>(const char *&amp;versionString)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cumulative_cpu_times</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a5c96acddf5c3d718da985dbe75224bee</anchor>
      <arglist>(double &amp;initTime, double &amp;loadTime, double &amp;solveTime, double &amp;solnReturnTime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aa4f0ec6af2fdb9d561b04ab22de3af5f</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a9b226234cc39ede8361a13aa346c7031</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a48f1a1842818d8247b8bae72a93dd6ce</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aade1c1c8c1e09f6daabb4e32add5539d</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCRMultipliers</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a89108a910726f8019b5c2e551b035170</anchor>
      <arglist>(int &amp;numMultCRs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRMultIDList</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a210880f81d477c4082528fdd2d332790</anchor>
      <arglist>(int numMultCRs, int *multIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>af70769599471333d3b59d2fd4b0212d2</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *multipliers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a49d81f531fb3ce52a4c2a34c9e05421d</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a60f3987625a3044f1e3019bcf29a0471</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aaef194452a4d07cf23ab1f2d3be6a029</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a75bb905a42c488f1d2c54a1676e6916a</anchor>
      <arglist>(int numMultCRs, const int *CRIDs, const double *multEstimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockNodeIDList</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aa4bfcb1b4c9b394ec647e4f455d076fe</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, GlobalID *nodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockElemIDList</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ae0ac02d672d0402ee7c91aa419944788</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, GlobalID *elemIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSolnParams</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a2e76e192e940aa2407df74b09d699bf1</anchor>
      <arglist>(GlobalID nodeID, int &amp;numSolnParams) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a80c9d07088bdf8681f776358ea308d7c</anchor>
      <arglist>(int &amp;numElemBlocks) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockActNodes</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a76e4bbd64baea83d7a76baff1485270b</anchor>
      <arglist>(GlobalID blockID, int &amp;numNodes) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockActEqns</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab385f8d15cd5fea60f7486717f99143b</anchor>
      <arglist>(GlobalID blockID, int &amp;numEqns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodesPerElement</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a843813b006a0a5f82acf94cd20322533</anchor>
      <arglist>(GlobalID blockID, int &amp;nodesPerElem) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEqnsPerElement</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a4c7267b3dfaf7bed16114b69a910fdd6</anchor>
      <arglist>(GlobalID blockID, int &amp;numEqns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockElements</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a8c70702cc9e56ddbc1ff4afaaa252a45</anchor>
      <arglist>(GlobalID blockID, int &amp;numElems) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockElemDOF</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>acdf5b0a6794600c37adf5f15777fd39a</anchor>
      <arglist>(GlobalID blockID, int &amp;DOFPerElem) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameters</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>acbb32f0b44f07f075b0382bc387e8341</anchor>
      <arglist>(int &amp;numParams, char **&amp;paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldSize</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aa1c5d45bd6b4766e7678ec0507a9ce79</anchor>
      <arglist>(int fieldID, int &amp;numScalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumbers</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3b09df5fc84b99575f54ed7ac2a36caf</anchor>
      <arglist>(GlobalID ID, int idType, int fieldID, int &amp;numEqns, int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a77d2518df747f550281b27961e9568e6</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalNodes</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a843f4ffe25789fbe5d199353d3ecab2c</anchor>
      <arglist>(int &amp;numNodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNodeIDList</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aa5184b5d3261073801bd9b4198fff80b</anchor>
      <arglist>(int &amp;numNodes, GlobalID *nodeIDs, int lenNodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ae40d90e55a1659dee1c02efba624315a</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>basic_initializations</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a66b17589e478224ae76f025f84d62915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>inputRHS</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>af0facec4d4b1401c21747ad0aa43bbe3</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries, bool sumInto)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>fillNodeset</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a669f8c3e0436f0adf4f1dd9f61097d56</anchor>
      <arglist>(int blockID) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>aggregateSystem</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a538c2d403c99fbde6b220f48a07821c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>aggregateSystem_LinSysCore</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a28a41a349919d2ce608cb75e04db3500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::SharedPtr&lt; LibraryWrapper &gt; &gt;</type>
      <name>wrapper_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1fc09e35ab5cb7d08b270c627c3c81c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeIDType_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ad05e181cc3ec17814b00a393d322a00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>elemIDType_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aec06b8675207a7a734c7469cd86e01ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>constraintIDType_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3b3299880eaabd01e7560d5fd3fa0278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::SharedPtr&lt; fei::Factory &gt; &gt;</type>
      <name>factory_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a20b6b787d5b90e1c436137ce51125a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>createdFactory_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a928ee6d7a4fd928de9b3a0fd81dbf20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>rowSpace_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a74cd2b70d47b85eeffcdfc1a3d4de6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matGraph_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab85ba8994b5489916840771499dbd087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>x_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a489664c328cb8bc08c226ddf12c64421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::SharedPtr&lt; fei::Vector &gt; &gt;</type>
      <name>b_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a633eefc2fa23891e90a4eaebe1d9e696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::SharedPtr&lt; fei::Matrix &gt; &gt;</type>
      <name>A_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a0ebfc0512a7f5552e0291c185b8bb095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>linSys_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a0d2243f6a320a060c6632db7bb94e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newData_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a39e46ef50b137e23ffe5ff504275f0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Data *</type>
      <name>soln_fei_matrix_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a4c794f9193ac0c124ea7dc8c9e744a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Data *</type>
      <name>soln_fei_vector_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a784cd13ff9ec9930db9c75fa36cc9deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a777bbf8e60e21bff91eaee01f87d3459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterRank_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a2cf481ea7db23273e351c3e07f7bf9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a98401857f8b5de118d0742a4bd7a6b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>abb187f6d299793d05acdc98cb13d60c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numParams_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a40bcd5c4fdf07372a2241df6f948cfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>paramStrings_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a24db451631351be657675c33a96a2095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>matrixIDs_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab81d412197efe81382865bcba7170e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rhsIDs_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a34a374ae1aac5d99b09a4afbef653bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>matScalars_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>acc9267f03e3181b41c41da2a758d2fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matScalarsSet_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a13858423c8b177e7bd43a35911c8c634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>rhsScalars_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ad19eceff77e93c3f55bc1680e23cfa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rhsScalarsSet_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a9677341ccc68f9a90839eec373686d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>constraintID_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a864b663f504ba22fcebfe59d3102565d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_soln_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab8d3db32e6d094c4cb1430985c84eb52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_current_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>aa8651c226a6d106be93f53456d5296ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_current_rhs_row_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a6edd8406fde6f763e7ba2154df7606e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveType_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ab2b178da1f94f695ef28092c694732db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterations_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a74cd9bebaf2a352bf0831e9f7a67d064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setSolveTypeCalled_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a16a3ebf88cf1e5c2fbbbf9b927941e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initPhaseIsComplete_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a66bed13ca43623041397672bfa3172d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>aggregateSystemFormed_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>af2dab5a75eb16d4abd11a6b137ad3010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>newMatrixDataLoaded_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ad3218852abf9480e2761dc006e251a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveCounter_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a609794e8911dc84eaba8f6fe00d49877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initTime_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>ac01a0e885e07bcd6679c8073dc2d0d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>loadTime_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a0b1321b49aec03f6734fc1e079ae459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>solveTime_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1a802077cd8bc71ae190628f9f36b020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>solnReturnTime_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a3ab647a117383f8bfb31f5f5308a7400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>iwork_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a11ffcd2622dabedfacf23c8e1459d781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; int &gt;</type>
      <name>nodeset_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a30d73cdc0e256bfcd8530ee68fd5b2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>nodeset_filled_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a828ff6ac7f42a7ad0f8c8af57db1adb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeset_blockid_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a1ed5168c0a2f7802035321b0c0806813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>block_dof_per_elem_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a324cad55de9e5474d6015601c3bf1965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>any_blocks_have_elem_dof_</name>
      <anchorfile>classfei_1_1FEI__Impl.html</anchorfile>
      <anchor>a556d507fcb9e1c2f1b21adb64595b393</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEI_Implementation</name>
    <filename>classFEI__Implementation.html</filename>
    <base>FEI</base>
    <member kind="function">
      <type></type>
      <name>FEI_Implementation</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab508361ab1a4245d3d6de159d2b23818</anchor>
      <arglist>(fei::SharedPtr&lt; LibraryWrapper &gt; libWrapper, MPI_Comm comm, int masterRank=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FEI_Implementation</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1bf8e0843f44f9373b7e451f69bb6f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af49e5af1f8980035f63f196373667c64</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setIDLists</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a91ac9975203f9480b98ddcd32953fc9a</anchor>
      <arglist>(int numMatrices, const int *matrixIDs, int numRHSs, const int *rhsIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setSolveType</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a485d4f4b2ed0938473d992fad738d576</anchor>
      <arglist>(int solveType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initFields</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a614a4631752f73566254ee2c6a7d48ff</anchor>
      <arglist>(int numFields, const int *fieldSizes, const int *fieldIDs, const int *fieldTypes=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElemBlock</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ac5cdefee134dfc78be2d16c6ee6d5260</anchor>
      <arglist>(GlobalID elemBlockID, int numElements, int numNodesPerElement, const int *numFieldsPerNode, const int *const *nodalFieldIDs, int numElemDofFieldsPerElement, const int *elemDOFFieldIDs, int interleaveStrategy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElem</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2fabb142da9b74e7d575b3197007037a</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSlaveVariable</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a93f303cd8d5f5c4e35064dabefd9e720</anchor>
      <arglist>(GlobalID slaveNodeID, int slaveFieldID, int offsetIntoSlaveField, int numMasterNodes, const GlobalID *masterNodeIDs, const int *masterFieldIDs, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afa50966c5491a20cc0d6601e6054aa76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSharedNodes</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2514c0871f1a7e588a978673b8204c97</anchor>
      <arglist>(int numSharedNodes, const GlobalID *sharedNodeIDs, const int *numProcsPerNode, const int *const *sharingProcIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRMult</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a45388a5002145835334794cf5779fac4</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodes, const int *CRFields, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRPen</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1be258e8bc74caeb30d3466a2b67edfa</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodes, const int *CRFields, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a93a0a49f1c00e9af053dc65adb885675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setCurrentMatrix</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a463c00c29b535df3744a763fa26a14b2</anchor>
      <arglist>(int matID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a77f90b0aed7aad784865a0d53febd848</anchor>
      <arglist>(int rhsID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetSystem</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad5e351d389a12e6d79002345f3855544</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetMatrix</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab4de1b52adb5e5722ad786958d8f153e</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetRHSVector</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a6b3c0ae76d29bd121392f9ee200bb6ae</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a534ccaf755db00271fe7e10a029e3388</anchor>
      <arglist>(double s=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1ea7534371fe3af1ead4b296923b9d50</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int fieldID, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadElemBCs</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4ba40ef40269f313f36c981a6050465f</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElem</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a183b8b9067edaf8bb79a226b9e0e7075</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1c5a33c6893025fc96327e2a65eb9fe8</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, int elemFormat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a04857086a5b46404d97f801420942e04</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *elemLoad)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRMult</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae4d21370ad0f1f97cde8dd7de1d711f5</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadCRPen</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a85df294911e627c0f29705f0f8e0c782</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putIntoRHS</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a3030f64590ae5b27e7f901922df60588</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aef201288c553da534e4ffd363ee3002d</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIntoMatrixDiagonal</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a55d142491a9eba74320fdb0c95dec86a</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *coefficients)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMatScalars</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a7ebf9fbc6647e42c0113cbaf5b7dbc36</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRHSScalars</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afa80c6753b90441f26f627fcaeb8c934</anchor>
      <arglist>(int numScalars, const int *IDs, const double *scalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a6de7fe855b1de339c3aedda1f9cbdbb9</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>residualNorm</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad5bd660342a2ee2e88f30969c2be6046</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a50d041697b9a2f6ec4fbb49aa48ddc11</anchor>
      <arglist>(int &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afc15d8f37e28fa977334f974eaef927a</anchor>
      <arglist>(int &amp;itersTaken) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>version</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2d6956b44082685029a555773569f437</anchor>
      <arglist>(const char *&amp;versionString)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cumulative_cpu_times</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a9bf8a237f9ca641c70d2af340c667e38</anchor>
      <arglist>(double &amp;initTime, double &amp;loadTime, double &amp;solveTime, double &amp;solnReturnTime)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a349802bc2eea1e5ad474c639db9483df</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ac765297233e38f77fb5d05993c81d55b</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4d48c7e29cfde24c7ad77bdfe6e4d4b5</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a356765e8163571c24630b154f3e75e86</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCRMultipliers</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad43dd062a0bdc8e61cab11fd35ac1992</anchor>
      <arglist>(int &amp;numMultCRs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRMultIDList</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4eaa4a206e31bc50b778f824a18b7bb1</anchor>
      <arglist>(int numMultCRs, int *multIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab65fe78d992c572c01face87cae16ddd</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *multipliers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae9e9b07a8637c8da4eef89aa1caea93d</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad0e31fe716d671ab5910c538df0cadf9</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af3e8321f59190a580d085085b8ddaac7</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af867b9a7ae935776d5e194be4dd384c5</anchor>
      <arglist>(int numMultCRs, const int *CRIDs, const double *multEstimates)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockNodeIDList</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a70f14febf1ddbb03f65ff87b1a4569ba</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, GlobalID *nodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockElemIDList</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a0d3f7a29520adc9ee99b453cb3ad74f4</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, GlobalID *elemIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSolnParams</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae394fd13b65aafa22d67f516a67132d3</anchor>
      <arglist>(GlobalID nodeID, int &amp;numSolnParams) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a359926f524bbdd42f5890e4bde8ef338</anchor>
      <arglist>(int &amp;numElemBlocks) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockActNodes</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a6d88c55c2ff6da0d8f6924e8a13fce1e</anchor>
      <arglist>(GlobalID blockID, int &amp;numNodes) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockActEqns</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aa42892a7404c28f506a80bd93068101f</anchor>
      <arglist>(GlobalID blockID, int &amp;numEqns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodesPerElement</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae89444301daae4895014c5cf6c0cb397</anchor>
      <arglist>(GlobalID blockID, int &amp;nodesPerElem) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEqnsPerElement</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a494495644341cc9e9f58856f9906b3e8</anchor>
      <arglist>(GlobalID blockID, int &amp;numEqns) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockElements</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a5c32667fd4cd70f2e9c6e7a508facc41</anchor>
      <arglist>(GlobalID blockID, int &amp;numElems) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlockElemDOF</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a56d0841311277c0fb8c246dee5bf68dc</anchor>
      <arglist>(GlobalID blockID, int &amp;DOFPerElem) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParameters</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad1bed3734f16f57a72c30e2f44db0c4d</anchor>
      <arglist>(int &amp;numParams, char **&amp;paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldSize</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a98becfbf9b28829832220fcb60074906</anchor>
      <arglist>(int fieldID, int &amp;numScalars)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumbers</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1ae930a317b51423186fd0931a07dc58</anchor>
      <arglist>(GlobalID ID, int idType, int fieldID, int &amp;numEqns, int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aa986c4b36201ffab755488a5ca974a21</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalNodes</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ac5d6fd179a2b3fbc3f4e84e448174693</anchor>
      <arglist>(int &amp;numNodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNodeIDList</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>abd0791fd26fd0e4dfe028fb1a43c144c</anchor>
      <arglist>(int &amp;numNodes, GlobalID *nodeIDs, int lenNodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a11eece07062fda5cdf686a96abcea74c</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function">
      <type>const SNL_FEI_Structure &amp;</type>
      <name>getProblemStructure</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ada4a812fe62c07d09bb1a17bc7b45d57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SNL_FEI_Structure &amp;</type>
      <name>getProblemStructure</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4ea0dc6043f8f74193783c2f7633bb15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FEI_Implementation</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a8e7bac853f2df90849124a1726820164</anchor>
      <arglist>(const FEI_Implementation &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FEI_Implementation &amp;</type>
      <name>operator=</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a37951c1fc62db927c9fd427d9da8d91e</anchor>
      <arglist>(const FEI_Implementation &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteIDs</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a376f0819295751518279290bc7bca677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteRHSScalars</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a3be5906ef4e0157d9bfc5b848029b673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>allocateInternalFEIs</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a322194220567cb44d78d88e3dc66f9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>debugOut</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a5f8956245754e18d523e75eb9c601468</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>debugOut</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a22bd6b1ebe02869c1c40aa27ca7607d3</anchor>
      <arglist>(const char *msg, int whichFEI)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildLinearSystem</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a16708e24315cb8f78f172d6253ddca65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>aggregateSystem</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab78fff2abe04aca6c778ed31abf40863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>messageAbort</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad37599c352e327a4da6044044aa9e952</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notAllocatedAbort</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aac26325dcfb44ec2b18790c0b19950e7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>needParametersAbort</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4b26ee39338b93f3969ad2abd2d038c2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>badParametersAbort</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a0fa8ac4caa6aaab71c57c1a18deb0bff</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setDebugOutput</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a7279a3f31869631d861e4352b47320c2</anchor>
      <arglist>(const char *path, const char *name)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>wrapper_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2a4ff20b5f32e3bc64f092f6c10cd3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LinearSystemCore &gt;</type>
      <name>linSysCore_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afb550cf0448b8a40f722ad255fba9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::SharedPtr&lt; LinearSystemCore &gt; &gt;</type>
      <name>lscArray_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a03c2b8a213b201a673743f5c52caebf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveLinSysCore_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a14181f0e012746953ba31a159376d6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveFEData_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a4fd12f746e7db02ff2deaf440e45d111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SNL_FEI_Structure *</type>
      <name>problemStructure_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afab2a323915a77ca5638e4cdc4187e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Filter **</type>
      <name>filter_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a34e89f3315e4e25263af4cef9e152c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numInternalFEIs_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae6537a5e78fdd806f14edf4e8f93abf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>internalFEIsAllocated_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a3fc1207701473afe2bf1999b8087e290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>matrixIDs_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a6c94b2d4457aac0424a9487f6a789acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>numRHSIDs_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aacec37a98936fd6f2a7f6ff6c1007487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int * &gt;</type>
      <name>rhsIDs_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2bbeee51abaf187fc697324d31384392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IDsAllocated_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a18146658f909988179e622f3100df231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>matScalars_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>adb03e839d3473567c23b60cc57312beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matScalarsSet_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ac8c611c39ab2c43f82db637ec110e577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double * &gt;</type>
      <name>rhsScalars_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afd5cf1586128b7c5198e9c0f7fa9a2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rhsScalarsSet_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a79479690be73118a954abe254b4ebc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_soln_filter_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab6e048bf6439047babbb89f4c2f16fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_current_filter_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a00f6a17fb8bacc127075d29fc7ddde3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>index_current_rhs_row_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>adab789dc4026d7db29c5b030bbe6b0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveType_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a83ae2ccb21c83b41e12da83b613518b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setSolveTypeCalled_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a0f0a422a009e3f46da63b28349fed9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initPhaseIsComplete_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aba4542dad1ac6b9d9fd51600ffdc20a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>aggregateSystemFormed_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a52c947483a142bc7fcef145645f51779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>newMatrixDataLoaded_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad392afaff27837305f6f953bf41604f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Data *</type>
      <name>soln_fei_matrix_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ae80eea69606ba66c64dfe7f4b3788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Data *</type>
      <name>soln_fei_vector_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad4cffc977e20ed2639655b7ad424857f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af35e57c994434c18cf9604f3a1a953e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterRank_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a00e72d926e2341f7ea0cd2c10a43ac13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localRank_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a1c6eb5cb31e8e97a2277663454b776c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>aa826e0d8767e2167ce3e1536a747bb87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af7b87ab61475b42156cbc589820618c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveCounter_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a315e2b2fccf13e83a7f4ce67a616b645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debugOutput_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a96fc96147ffb3d4af5985e76207c3730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>dbgOStreamPtr_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ac921b6a28494645b6c029d751bcdcbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>dbgFileOpened_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afd4e151659ce93d604d84f605a4f9151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ofstream *</type>
      <name>dbgFStreamPtr_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>afc4058105d5fadb2e0f09103e36c950c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initTime_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a51bef1c41fcca3551a307916187ed01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>loadTime_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>af27bd0b3eb87da7641c7179d03238a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>solveTime_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ab8cd7db297c2b5a1e7783d600e2363ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>solnReturnTime_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a21c144f2a0df607a5594ddfdcbbbbf12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numParams_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>ad46130c322281f7ac3da61b468348014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char **</type>
      <name>paramStrings_</name>
      <anchorfile>classFEI__Implementation.html</anchorfile>
      <anchor>a2ee0cffc79ce065c114ddc1bd4ce0fb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei_map_holder</name>
    <filename>structfei__map__holder.html</filename>
    <member kind="function">
      <type></type>
      <name>~fei_map_holder</name>
      <anchorfile>structfei__map__holder.html</anchorfile>
      <anchor>a29f7c8b8e8535cddf0ae92e4b0b97a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, fei_Pool * &gt;</type>
      <name>fei_mem_pools</name>
      <anchorfile>structfei__map__holder.html</anchorfile>
      <anchor>a216f65d04e3cc51597d01823d08f7704</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool</name>
    <filename>classfei__Pool.html</filename>
    <class kind="struct">fei_Pool::Chunk</class>
    <class kind="struct">fei_Pool::Link</class>
    <member kind="function">
      <type></type>
      <name>fei_Pool</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a6a62f2ad6107cbe769881debc805dd01</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a50c1549735f45a336b69c05f6e8748ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a43a4f3a6b2ef7ce5741f47abef353b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>aa7506be14cd593a1dc7837b0c1a9d63f</anchor>
      <arglist>(void *b)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>fei_Pool</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>afae88196a552046867fada89a097aa97</anchor>
      <arglist>(const fei_Pool &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fei_Pool &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a863b2b0c7fc3c3da5ed047672b690e50</anchor>
      <arglist>(const fei_Pool &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>afba9c9f5e1e7ef7eccef3bf5fd6df103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Chunk *</type>
      <name>chunks</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a2e69f53fd5cd5264edb3ae92855f5987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned int</type>
      <name>esize</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>af99fc64b40ecf4fd50e050ed8d714657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Link *</type>
      <name>head</name>
      <anchorfile>classfei__Pool.html</anchorfile>
      <anchor>a529e8323cbd8e0b6325c8b23a143d866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool_alloc</name>
    <filename>classfei__Pool__alloc.html</filename>
    <templarg>T</templarg>
    <class kind="struct">fei_Pool_alloc::rebind</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a92fdb80df01bd491b8653a578f846373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ac17e9ad57c645867e6c709394a7e5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a74a0f717a2943e44af5f752cfa496465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8b8984a38ae3367f2eb3b8751c3fddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3d20301f7578b9fe11b179ec2eac0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ab66069c3abe525be8cb400b22696e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a82ac5260247acef6f4b1334667f84c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8cf10e56e4b130d39142828e3705459a</anchor>
      <arglist>(reference value) const </arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77267c2e245130c292442b612af1f8c6</anchor>
      <arglist>(const_reference value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a4900fd76ef3d0b727df929d3099dfde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a6fa9d7fd66b9d3f0a0d93d317b9429e3</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77208913410be0400cc8316be097edf5</anchor>
      <arglist>(const fei_Pool_alloc&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a9299618b7cffde6d817c5b0e7da406bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>acb30a02e0e9201ab2797e132a79cf7e1</anchor>
      <arglist>(size_type n, const void *hint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ad2ab97bbeac73ec9f5cbf038bbd6fbee</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a18870fa7c8aca64e2a2ef56b41bfcb10</anchor>
      <arglist>(U *p, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a0b839a67c379e2cca59d3d28317d9e87</anchor>
      <arglist>(pointer p, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>af33f6db1e3fb753989961991be6dbcd7</anchor>
      <arglist>(U *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a7e76eb1ffa15d41843379d6940166afb</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3a558701e1c670966a3153dc141e4250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool *</type>
      <name>mem</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3ab3c06f29d9d359872fb4317bf0b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>n_</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>aa39d9af0cb9ff0a7cc71e21ca7f10e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool_alloc&lt; ctg_set&lt; int &gt; &gt;</name>
    <filename>classfei__Pool__alloc.html</filename>
    <member kind="typedef">
      <type>ctg_set&lt; int &gt;</type>
      <name>value_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a92fdb80df01bd491b8653a578f846373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ac17e9ad57c645867e6c709394a7e5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctg_set&lt; int &gt; *</type>
      <name>pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a74a0f717a2943e44af5f752cfa496465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ctg_set&lt; int &gt; *</type>
      <name>const_pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8b8984a38ae3367f2eb3b8751c3fddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctg_set&lt; int &gt; &amp;</type>
      <name>reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3d20301f7578b9fe11b179ec2eac0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ctg_set&lt; int &gt; &amp;</type>
      <name>const_reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ab66069c3abe525be8cb400b22696e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a82ac5260247acef6f4b1334667f84c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8cf10e56e4b130d39142828e3705459a</anchor>
      <arglist>(reference value) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77267c2e245130c292442b612af1f8c6</anchor>
      <arglist>(const_reference value) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a4900fd76ef3d0b727df929d3099dfde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a6fa9d7fd66b9d3f0a0d93d317b9429e3</anchor>
      <arglist>(const ctg_set&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77208913410be0400cc8316be097edf5</anchor>
      <arglist>(const fei_Pool_alloc&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a9299618b7cffde6d817c5b0e7da406bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>acb30a02e0e9201ab2797e132a79cf7e1</anchor>
      <arglist>(size_type n, const void *hint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ad2ab97bbeac73ec9f5cbf038bbd6fbee</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a18870fa7c8aca64e2a2ef56b41bfcb10</anchor>
      <arglist>(U *p, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a0b839a67c379e2cca59d3d28317d9e87</anchor>
      <arglist>(pointer p, const ctg_set&lt; int &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>af33f6db1e3fb753989961991be6dbcd7</anchor>
      <arglist>(U *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a7e76eb1ffa15d41843379d6940166afb</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3a558701e1c670966a3153dc141e4250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool *</type>
      <name>mem</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3ab3c06f29d9d359872fb4317bf0b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>n_</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>aa39d9af0cb9ff0a7cc71e21ca7f10e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool_alloc&lt; fei::CSVec &gt;</name>
    <filename>classfei__Pool__alloc.html</filename>
    <member kind="typedef">
      <type>fei::CSVec</type>
      <name>value_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a92fdb80df01bd491b8653a578f846373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ac17e9ad57c645867e6c709394a7e5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fei::CSVec *</type>
      <name>pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a74a0f717a2943e44af5f752cfa496465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const fei::CSVec *</type>
      <name>const_pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8b8984a38ae3367f2eb3b8751c3fddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fei::CSVec &amp;</type>
      <name>reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3d20301f7578b9fe11b179ec2eac0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const fei::CSVec &amp;</type>
      <name>const_reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ab66069c3abe525be8cb400b22696e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a82ac5260247acef6f4b1334667f84c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8cf10e56e4b130d39142828e3705459a</anchor>
      <arglist>(reference value) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77267c2e245130c292442b612af1f8c6</anchor>
      <arglist>(const_reference value) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a4900fd76ef3d0b727df929d3099dfde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a6fa9d7fd66b9d3f0a0d93d317b9429e3</anchor>
      <arglist>(const fei::CSVec &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77208913410be0400cc8316be097edf5</anchor>
      <arglist>(const fei_Pool_alloc&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a9299618b7cffde6d817c5b0e7da406bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>acb30a02e0e9201ab2797e132a79cf7e1</anchor>
      <arglist>(size_type n, const void *hint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ad2ab97bbeac73ec9f5cbf038bbd6fbee</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a18870fa7c8aca64e2a2ef56b41bfcb10</anchor>
      <arglist>(U *p, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a0b839a67c379e2cca59d3d28317d9e87</anchor>
      <arglist>(pointer p, const fei::CSVec &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>af33f6db1e3fb753989961991be6dbcd7</anchor>
      <arglist>(U *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a7e76eb1ffa15d41843379d6940166afb</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3a558701e1c670966a3153dc141e4250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool *</type>
      <name>mem</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3ab3c06f29d9d359872fb4317bf0b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>n_</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>aa39d9af0cb9ff0a7cc71e21ca7f10e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool_alloc&lt; NodeDescriptor &gt;</name>
    <filename>classfei__Pool__alloc.html</filename>
    <member kind="typedef">
      <type>NodeDescriptor</type>
      <name>value_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a92fdb80df01bd491b8653a578f846373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ac17e9ad57c645867e6c709394a7e5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeDescriptor *</type>
      <name>pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a74a0f717a2943e44af5f752cfa496465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const NodeDescriptor *</type>
      <name>const_pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8b8984a38ae3367f2eb3b8751c3fddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeDescriptor &amp;</type>
      <name>reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3d20301f7578b9fe11b179ec2eac0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const NodeDescriptor &amp;</type>
      <name>const_reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ab66069c3abe525be8cb400b22696e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a82ac5260247acef6f4b1334667f84c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8cf10e56e4b130d39142828e3705459a</anchor>
      <arglist>(reference value) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77267c2e245130c292442b612af1f8c6</anchor>
      <arglist>(const_reference value) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a4900fd76ef3d0b727df929d3099dfde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a6fa9d7fd66b9d3f0a0d93d317b9429e3</anchor>
      <arglist>(const NodeDescriptor &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77208913410be0400cc8316be097edf5</anchor>
      <arglist>(const fei_Pool_alloc&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a9299618b7cffde6d817c5b0e7da406bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>acb30a02e0e9201ab2797e132a79cf7e1</anchor>
      <arglist>(size_type n, const void *hint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ad2ab97bbeac73ec9f5cbf038bbd6fbee</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a18870fa7c8aca64e2a2ef56b41bfcb10</anchor>
      <arglist>(U *p, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a0b839a67c379e2cca59d3d28317d9e87</anchor>
      <arglist>(pointer p, const NodeDescriptor &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>af33f6db1e3fb753989961991be6dbcd7</anchor>
      <arglist>(U *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a7e76eb1ffa15d41843379d6940166afb</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3a558701e1c670966a3153dc141e4250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool *</type>
      <name>mem</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3ab3c06f29d9d359872fb4317bf0b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>n_</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>aa39d9af0cb9ff0a7cc71e21ca7f10e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei_Pool_alloc&lt; SET_TYPE &gt;</name>
    <filename>classfei__Pool__alloc.html</filename>
    <member kind="typedef">
      <type>SET_TYPE</type>
      <name>value_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a92fdb80df01bd491b8653a578f846373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ac17e9ad57c645867e6c709394a7e5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SET_TYPE *</type>
      <name>pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a74a0f717a2943e44af5f752cfa496465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const SET_TYPE *</type>
      <name>const_pointer</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8b8984a38ae3367f2eb3b8751c3fddb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SET_TYPE &amp;</type>
      <name>reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3d20301f7578b9fe11b179ec2eac0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const SET_TYPE &amp;</type>
      <name>const_reference</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ab66069c3abe525be8cb400b22696e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a82ac5260247acef6f4b1334667f84c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a8cf10e56e4b130d39142828e3705459a</anchor>
      <arglist>(reference value) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77267c2e245130c292442b612af1f8c6</anchor>
      <arglist>(const_reference value) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a4900fd76ef3d0b727df929d3099dfde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a6fa9d7fd66b9d3f0a0d93d317b9429e3</anchor>
      <arglist>(const SET_TYPE &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a77208913410be0400cc8316be097edf5</anchor>
      <arglist>(const fei_Pool_alloc&lt; U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fei_Pool_alloc</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a9299618b7cffde6d817c5b0e7da406bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>acb30a02e0e9201ab2797e132a79cf7e1</anchor>
      <arglist>(size_type n, const void *hint=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>ad2ab97bbeac73ec9f5cbf038bbd6fbee</anchor>
      <arglist>(pointer p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a18870fa7c8aca64e2a2ef56b41bfcb10</anchor>
      <arglist>(U *p, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a0b839a67c379e2cca59d3d28317d9e87</anchor>
      <arglist>(pointer p, const SET_TYPE &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>af33f6db1e3fb753989961991be6dbcd7</anchor>
      <arglist>(U *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a7e76eb1ffa15d41843379d6940166afb</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3a558701e1c670966a3153dc141e4250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool *</type>
      <name>mem</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>a3ab3c06f29d9d359872fb4317bf0b54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>n_</name>
      <anchorfile>classfei__Pool__alloc.html</anchorfile>
      <anchor>aa39d9af0cb9ff0a7cc71e21ca7f10e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEI_tester</name>
    <filename>classFEI__tester.html</filename>
    <base>feitester</base>
    <member kind="function">
      <type></type>
      <name>FEI_tester</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ae3ca6c6199d62d2c59f82245bb79ce95</anchor>
      <arglist>(fei::SharedPtr&lt; DataReader &gt; data_reader, MPI_Comm comm, int localProc, int numProcs, bool useNewFEI=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FEI_tester</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ad763a0ba8c93f015c54d9ff7c6cc818e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a92b5f5e02edf59180196f7a4a4f55586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testInitialization</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a44954663e7ed8e92bb38dbfa893ac58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testLoading</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ab2e8cc3d2a57cd3a8c46673f962e25f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testSolve</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>aceb6f349dfab6989916bdcf72b5715a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testCheckResult</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a3110635769ac4d9fef2035a85ba338d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpMatrixFiles</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a705a911e3a9876760449d5fa942e7273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>af684fbc40b4624fc49dc9850c9bf1b1a</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createFEIinstance</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a309bc178123c23bb630ec6186e6ad6e9</anchor>
      <arglist>(const char *solverName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setIDlists</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>aa0d31cca912b4c677bdeed0ae2c4dd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initializationPhase</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a39700693159f16f56f5567879ac0bfb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>normalLoadPhase</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ac71d2b4bc83e9692cdb48657527daf79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>aggregateLoadPhase</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a927ba4a599845b89aa1199b793ada54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exerciseResidualNorm</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a9683a5f953a4b39e4ab065f4e6605200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exercisePutFunctions</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ad52b88b430014e341b3d874e1a734557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_block_node_soln</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a54989f95fb5f20574edbf4fbbf8688e5</anchor>
      <arglist>(DataReader &amp;data, FEI &amp;fei, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_block_elem_soln</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a5d5ff73de6bf043597a2f9e6abdac313</anchor>
      <arglist>(DataReader &amp;data, FEI &amp;fei, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_multiplier_soln</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a4d5ff38cf95e25d6062be23d02654c79</anchor>
      <arglist>(DataReader &amp;data, FEI &amp;fei, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>checkSolution</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>aef4ca88ecac69a5634811831bc90af60</anchor>
      <arglist>(int localProc, int numProcs, const char *solnFileName, const char *checkFileName, const char *extension, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>lsc_matrix_check</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a455f69c24ed2b29e6d6204aff274f62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>af451994afc6076576ea2d6eb72715aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FEI &gt;</type>
      <name>fei_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a771a8fcc78466f82fe258c0a20a3ade2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>wrapper_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ad9f905379c86e6af85c8fe24edb289a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; DataReader &gt;</type>
      <name>data_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>ab3d35696f4e0a3d65112f08ea9c03f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a1cb75bd50a8425dd43a0ef4b3495d63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>aea4a57ac10d47d23ebdc4db4578a3c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numMatrices</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a3df0fd1702cb0799b1d12cb8ff0cf040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>matrixIDs</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>afa88ba3c663b9009ef633499fb0ab1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRHSs</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>aa1d5bb4564b3a0def508f8b6dda09a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>rhsIDs</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>afbe57c425e8065d3b81752154d62be2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useNewFEI_</name>
      <anchorfile>classFEI__tester.html</anchorfile>
      <anchor>a7ffb07f6858f99f5b18bb80e260ef24c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>feitester</name>
    <filename>classfeitester.html</filename>
    <member kind="function">
      <type></type>
      <name>feitester</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a491ae0f0a1909b444b6a80592666fd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~feitester</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a6b2f062e1d226166e93261d4aaf71714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>ae1b545722a808799e142eb5cd05bd907</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testInitialization</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>aee4f676013eeefa3ada50b593518798e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testLoading</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>aaa10a37694ea2d523dc2076c4f32c891</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testSolve</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a27200836131b033513867e323be9eb47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testCheckResult</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a057deabd2f7415692e08f21315be94bf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dumpMatrixFiles</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a98957eb33539cc8e2cb015c578cc6e4d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a89b68470d4356325255aea4a79ed3c89</anchor>
      <arglist>(const char *param)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>a526ebb696208d357c98b895b4563cdb4</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>aef47f5bcbac87675671fa914f91eeec2</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classfeitester.html</anchorfile>
      <anchor>ac4d2e700b383a2b420094fc6af05aea0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::FEMatrixTraits</name>
    <filename>structsnl__fei_1_1FEMatrixTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits.html</anchorfile>
      <anchor>a16a957f55e261bfb381a7b333f80df62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reset</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits.html</anchorfile>
      <anchor>ac62937a77f71d81799794024501d8e1e</anchor>
      <arglist>(T *mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits.html</anchorfile>
      <anchor>a748c4afd5d913b7c9175b42ff5a03589</anchor>
      <arglist>(T *mat, int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *dofPerNode, const int *dof_ids, const double *const *coefs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setDirichletBCs</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits.html</anchorfile>
      <anchor>a7a01f1c0b0b7b913db79ac68cdfff2d6</anchor>
      <arglist>(T *mat, int numBCs, const int *nodeNumbers, const int *dof_ids, const double *values)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::FEMatrixTraits&lt; FiniteElementData &gt;</name>
    <filename>structsnl__fei_1_1FEMatrixTraits_3_01FiniteElementData_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a0359a1fce47dfb7e746dfe64339f09b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reset</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a61c34d005dd7d54da73d2c2ec40dd086</anchor>
      <arglist>(FiniteElementData *mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a909a5074e7daf7939d3f4cba0d8caa11</anchor>
      <arglist>(FiniteElementData *mat, int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *dofPerNode, const int *dof_ids, const double *const *coefs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setDirichletBCs</name>
      <anchorfile>structsnl__fei_1_1FEMatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a0e15102967ab9826fd8932b0b740f4f7</anchor>
      <arglist>(FiniteElementData *mat, int numBCs, const int *nodeNumbers, const int *dof_ids, const double *values)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::FEVectorTraits</name>
    <filename>structsnl__fei_1_1FEVectorTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits.html</anchorfile>
      <anchor>aa01e8f519691abcb4f9a92c0665c6a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reset</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits.html</anchorfile>
      <anchor>a1af4c575dff2d7c7f9e9503137eacac8</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumInElemVector</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits.html</anchorfile>
      <anchor>ada938a89b4fb17c0875f358fa876de26</anchor>
      <arglist>(T *, int, int, int, const int *, const int *, const int *, const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits.html</anchorfile>
      <anchor>a39099da8ce08e7e2f35b9d668669eaec</anchor>
      <arglist>(T *, int, int, double &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::FEVectorTraits&lt; FiniteElementData &gt;</name>
    <filename>structsnl__fei_1_1FEVectorTraits_3_01FiniteElementData_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a47924967ab4cdf7836a29fc8aaeaca3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reset</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a2687d6ffea3af17c68a471ccc9862582</anchor>
      <arglist>(FiniteElementData *vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumInElemVector</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>aeeb67c14f57d73d8d6f3fbb40f96a067</anchor>
      <arglist>(FiniteElementData *vec, int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *dofPerNode, const int *dof_ids, const double *coefs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structsnl__fei_1_1FEVectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>af635279378d97d0bffc6cb9248813907</anchor>
      <arglist>(FiniteElementData *vec, int nodeNumber, int dofOffset, double &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::FieldDofMap</name>
    <filename>classfei_1_1FieldDofMap.html</filename>
    <templarg>LocalOrdinal</templarg>
    <member kind="function">
      <type></type>
      <name>FieldDofMap</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a944d9b4fdc817a01ca4c36469c39b3af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FieldDofMap</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a14154d42be642f06b1978db57389e8b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_field</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a13e4f0beab25805f6863573a6c8ffff4</anchor>
      <arglist>(LocalOrdinal fieldID, LocalOrdinal fieldSize, LocalOrdinal fieldType=fei::UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type>LocalOrdinal</type>
      <name>get_dof_id</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>aa4ccf71408be4027bc18ba8b85a6a222</anchor>
      <arglist>(LocalOrdinal fieldID, LocalOrdinal offset)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; LocalOrdinal, std::pair&lt; LocalOrdinal, LocalOrdinal &gt; &gt;</type>
      <name>dof_id_map</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a7a11b52601a9f318c0494cc85480afa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_dof_ids</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>ab477946a2d38c18b894a2605f3fd3d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dof_id_map</type>
      <name>m_dof_id_map</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a763bdd44862450545496c1df4d700af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_need_to_compute_dof_ids</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a3950db61993742acd786d53ff42f78fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldDofMap&lt; int &gt;</name>
    <filename>classfei_1_1FieldDofMap.html</filename>
    <member kind="function">
      <type></type>
      <name>FieldDofMap</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a944d9b4fdc817a01ca4c36469c39b3af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FieldDofMap</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a14154d42be642f06b1978db57389e8b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_field</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a13e4f0beab25805f6863573a6c8ffff4</anchor>
      <arglist>(int fieldID, int fieldSize, int fieldType=fei::UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_dof_id</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>aa4ccf71408be4027bc18ba8b85a6a222</anchor>
      <arglist>(int fieldID, int offset)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; int, std::pair&lt; int, int &gt; &gt;</type>
      <name>dof_id_map</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a7a11b52601a9f318c0494cc85480afa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_dof_ids</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>ab477946a2d38c18b894a2605f3fd3d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dof_id_map</type>
      <name>m_dof_id_map</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a763bdd44862450545496c1df4d700af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_need_to_compute_dof_ids</name>
      <anchorfile>classfei_1_1FieldDofMap.html</anchorfile>
      <anchor>a3950db61993742acd786d53ff42f78fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::FieldMask</name>
    <filename>classfei_1_1FieldMask.html</filename>
    <member kind="function">
      <type></type>
      <name>FieldMask</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a407f33be9421fa086f4e5e8f012a5f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldMask</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>ac5c24a56aa2e65fe83faceb7ba0013af</anchor>
      <arglist>(const FieldMask &amp;fm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldMask</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a1f9746981305365ca2252cb7c5b59594</anchor>
      <arglist>(int numFields, const int *fieldIDs, const int *fieldSizes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FieldMask</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a8577c70e05d16841cb935cb8814413aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaskID</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>ae37d55357afbd26619db1ea261e6f8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addField</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>acb9e668738d31e7b097df7c72b25c02c</anchor>
      <arglist>(int fieldID, int fieldSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFieldID</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aba42f73f2b401c3920b1b523401c1768</anchor>
      <arglist>(int fieldID) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumFields</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aebf525aab8ed5c6434f6b1b307e0f98d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aa8328061d7e4d7d1452756aeef488cdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumIndices</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aa4659bb35f67ec006ea2824c55f1e083</anchor>
      <arglist>(int numInd)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getFieldIDs</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a3b5b74797b913c75fcdcb9b4f4e01cac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getFieldIDs</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aefc0c10d916736e72f36c7ae25ee2eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getFieldSizes</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a368842f120a01ad20a724af12fc8cf58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getFieldSizes</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a812739092e046595662b83f8712cc0f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldEqnOffset</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a2ccc8fd93bd2faec122d4b915199cb62</anchor>
      <arglist>(int fieldID, int &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aeef79ad3c182a0bd7a3fc5e882833e30</anchor>
      <arglist>(const FieldMask &amp;fm) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a4d7069d25bc6af203688527895784620</anchor>
      <arglist>(const FieldMask &amp;fm) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSetOf</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>aa9b45cf74586ae634450e5dc280e8caf</anchor>
      <arglist>(const FieldMask &amp;fm) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>calculateMaskID</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a51aa220cc2bb8a96994816dd9458d6c2</anchor>
      <arglist>(int numFields, const int *fieldIDs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>calculateMaskID</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a7d893a2611436982ea98a890dd3e37f5</anchor>
      <arglist>(const FieldMask &amp;fm, int fieldID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FieldMask &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a6f232233fbe41dda462829bf3a1a932a</anchor>
      <arglist>(const FieldMask &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>calculateMaskID</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a0b4edacbea7426363f7e2f74da109a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maskID_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a34f5657f2fc7cbf114f5be0b3bd772f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldIDs_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a20b51f2c490846641569909209bddfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldSizes_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a40651fd0414eed9936a80dfd3913b68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldEqnOffsets_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>addd95810ecec24621d674217aa83533d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numFields_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a1ee4049e53b591ea0ec3cf8a99f8f8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numIndices_</name>
      <anchorfile>classfei_1_1FieldMask.html</anchorfile>
      <anchor>a54dbca0afe7bfce7b44e9bdd9f595eb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::FillableMat</name>
    <filename>classfei_1_1FillableMat.html</filename>
    <member kind="typedef">
      <type>std::map&lt; int, CSVec *, std::less&lt; int &gt;, fei_Pool_alloc&lt; std::pair&lt; const int, CSVec * &gt; &gt; &gt;</type>
      <name>feipoolmat</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>ac8f5a25ee83ec8ae3b7a0e0c475ccbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>feipoolmat::iterator</type>
      <name>iterator</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>abed3d5894813d211effd564c5653a83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>feipoolmat::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a9bd35f5a0d2046f4c349e874050540ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillableMat</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a33ab06348fee6d3d376969d60e176a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillableMat</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a1f79303125cbe962ddbbde6abc9da50d</anchor>
      <arglist>(EqnBuffer &amp;eqnbuf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FillableMat</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a860a74d550dfaeddabd03c5d03824a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FillableMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a8da9ab18f0c42014b912d2d298b0130a</anchor>
      <arglist>(const FillableMat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>aafe96e572e9338ce0b0002d21ce07305</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPosition</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a8f4c8d9b2202920114098e626abd07ce</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumInCoef</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a9cb414eb1dc25053b2e28712ae6459ed</anchor>
      <arglist>(int row, int col, double coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putCoef</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a09a96a1106be76299bc3e349a248a8eb</anchor>
      <arglist>(int row, int col, double coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumInRow</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>ae9dd6c436013d09c06a72870240315a6</anchor>
      <arglist>(int row, const int *cols, const double *coefs, unsigned len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putRow</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a7314a3f6e21316130217c2540c99f062</anchor>
      <arglist>(int row, const int *cols, const double *coefs, unsigned len)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getNumRows</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a1f49d75ef2580b4941dfdd59846f1fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRow</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a35f4d3477edbb0beee99ada4bae34175</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>const CSVec *</type>
      <name>getRow</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a790fcb5fc0140cd9b83c51038d9e3018</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>CSVec *</type>
      <name>create_or_getRow</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a7f0ac8a289b14de8c79766205a20eb40</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>aa0ffe5b739787be72ac820507cc7d04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a7954bfb6ef12b7af1650591a37eea82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a18b8ff59a7cc2cfc6d685bc91855d0c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a9f838d59f0bfab139a0a84af5731b03f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a00b7a61677a7eb4e27ee45888985fd94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a33cf74889a479460cf54329eea84fe7c</anchor>
      <arglist>(const FillableMat &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>ae81258613fc163dff03c1f89053bcabb</anchor>
      <arglist>(const FillableMat &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>feipoolmat</type>
      <name>matdata_</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>a1d71a1f25bbc2939d261d1b6579fd988</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool_alloc&lt; CSVec &gt;</type>
      <name>vecpool_</name>
      <anchorfile>classfei_1_1FillableMat.html</anchorfile>
      <anchor>abe386362e882e4e6019920fac3b58c38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Filter</name>
    <filename>classFilter.html</filename>
    <member kind="function">
      <type></type>
      <name>Filter</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a2905f3297020a7f314a20130ab0eda00</anchor>
      <arglist>(SNL_FEI_Structure *probStruct)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Filter</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a502ee334d42eac3edbaf32b599f9c35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initialize</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a073ec71dc4c17cfb205c0548363eb345</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetSystem</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>ad911a27a4c7175e1b5245defd6b67488</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetMatrix</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>af52520334559194a54632a66571171e4</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetRHSVector</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aff537e96cc8956f3c145f9d7d6df395a</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aa9136c68b389216c5c3db747404a45bd</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a127d6a66b650fcc0743e0a500a1cd326</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a42f1fb21a5a9ad0db7d53b377bf81ecd</anchor>
      <arglist>(int, const GlobalID *, int, const int *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadElemBCs</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aff2570f0005899987b151bb48c5e948f</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElem</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a5942bfda95afacc272577ae949d79489</anchor>
      <arglist>(GlobalID, GlobalID, const GlobalID *, const double *const *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a57e7cbc95f6560109f725e2c0708b0ee</anchor>
      <arglist>(GlobalID, GlobalID, const GlobalID *, const double *const *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a2a2c72a4abdccdb11fb2e7e01bd98d6f</anchor>
      <arglist>(GlobalID, GlobalID, const GlobalID *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadCRMult</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a75ef1d4db3c10c14d7b805864dd8e5a6</anchor>
      <arglist>(int CRMultID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadCRPen</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aba5bcbdb583ce66dde2cd8bd33cd8bee</anchor>
      <arglist>(int CRPenID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putIntoRHS</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a8259a1ee83126fbe549aba1e4ae13aa4</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a5cda56345535d0bbb53ed512a92e2610</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumIntoMatrixDiagonal</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a96eeebdfa28b215f49b1ebcb90e87918</anchor>
      <arglist>(int, int, int, const GlobalID *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadComplete</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a20dd0c327e771e15310334995e29d085</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>af319d0eff4a67e960f177df6622e3f03</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>residualNorm</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>abe06d5325ea6f7106e489c671c9c225d</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms, double &amp;residTime)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>ab200e1f27028faa4e7427d051450494a</anchor>
      <arglist>(int &amp;status, double &amp;sTime)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>iterations</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a041235b5864f18acf949c0d7c5ef838a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a9164d03f738d9e0b939dd164177ee7a4</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNodalSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aa28a34081a5cbe1d9b186b43d2f1b1a1</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a069d7785d0134abe7573aa1224f06c38</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a253aece9b0f96a0163219eccf929cd65</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a0d2113e95d612952e4c5f87994d245cb</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *multipliers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>af0810a8dd5ee57b2e104e1cb292d38e4</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aa4b1824464e0765c24b646888806c51f</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a0e3bd193cf0f67a86771f014b4316bb0</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a74bbb5018ffb72ed392ecfdb7f3a1de2</anchor>
      <arglist>(int numMultCRs, const int *CRIDs, const double *multEstimates)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a35175c0c411e9f8ba7d1f45a275549f0</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a11a4394de1aa194093c65a38e342d698</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putNodalFieldSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a83efe91e0de96cf5a722e9d16f990e79</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unpackSolution</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>ae379d8e78b31d25f17ea979fe1ceec75</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setEqnCommMgr</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a0a80b5bd01268466bc13552c725682a8</anchor>
      <arglist>(EqnCommMgr *eqnCommMgr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual EqnCommMgr *</type>
      <name>getEqnCommMgr</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a6c2d7e4846c9461ef3428d16fa20b98d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setNumRHSVectors</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a96d70cc466b7c64f85d151ea218fb7e9</anchor>
      <arglist>(int numRHSs, int *rhsIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a6afe9119843d571212a30ddd80c09919</anchor>
      <arglist>(int rhsID)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>exchangeRemoteEquations</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>af644c12d9f1648a7d2647173606d4242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enforceEssentialBCs</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>afdc026661b9e0bc1521eeaf97c2b9b09</anchor>
      <arglist>(const int *eqns, const double *alpha, const double *gamma, int numEqns)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogStream</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a03da8b312f1f9fd7d8c97b225bf62af1</anchor>
      <arglist>(std::ostream *logstrm)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>logStream</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a5c619611b23475325b998d9872adc8f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyStiffness</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a66372a2f50ed6bb9aac2fea5297b3a19</anchor>
      <arglist>(const double *const *elemStiff, int numRows, int elemFormat, double **copy)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>generalElemInput</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>ae1c1262c57085b0b893f391bee550978</anchor>
      <arglist>(GlobalID, GlobalID, const GlobalID *, const double *const *, const double *, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>generalCoefInput</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aadb719a98d8ac3e35c4379f4bb2fccbf</anchor>
      <arglist>(int, const int *, const GlobalID *, const int *, const GlobalID *, const double *const *, const double *, int, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>calculateResidualNorms</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a48fea70043a71327ebd64a59c0319a58</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms, std::vector&lt; double &gt; &amp;residValues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NodeDescriptor *</type>
      <name>findNode</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a628b5fe08a589fee3522a84c6cfcbdfe</anchor>
      <arglist>(GlobalID nodeID) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NodeDescriptor &amp;</type>
      <name>findNodeDescriptor</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aa9f26556948f5688a70289cf44e73267</anchor>
      <arglist>(GlobalID nodeID) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SNL_FEI_Structure *</type>
      <name>problemStructure_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>acc516b69d5355e4d34bac10814a5aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logInput_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a4078c3d4f6e29a394afa5e4c6d4d7dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>logInputStream_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>afe5acbe41c41c7ae4caf7d88775aabaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aeaaec141315a3847f2974eddcfa6cb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a7704a496110db9c25b5d42dab5ebf46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localRank_</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>aa3fab810c0b387b7a478f030817b7ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Filter</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>af91d6e92b501b55ac43a47e9c12b416e</anchor>
      <arglist>(const Filter &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Filter &amp;</type>
      <name>operator=</name>
      <anchorfile>classFilter.html</anchorfile>
      <anchor>a41ad853598045264d203fcaff69109ba</anchor>
      <arglist>(const Filter &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FiniteElementData</name>
    <filename>classFiniteElementData.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiniteElementData</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a466422db225e14779a56795a5b5a825c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>aada4d7f3ffc0219caa91a76711d220c8</anchor>
      <arglist>(int numParams, char **params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setLookup</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a24f992f8b302e8b866ca1a3b9808c3d4</anchor>
      <arglist>(Lookup &amp;lookup)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>describeStructure</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a53afd726f364397eb6c90d80ab09368b</anchor>
      <arglist>(int numElemBlocks, const int *numElemsPerBlock, const int *numNodesPerElem, const int *elemMatrixSizePerBlock, int totalNumNodes, int numSharedNodes, int numMultCRs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setConnectivity</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a5d1d3227267acbfbef72f85cf3f8e41d</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *numDofPerNode, const int *dof_ids)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setElemMatrix</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a2dde1c7a04e77f15d9e31133b043d627</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *numDofPerNode, const int *dof_ids, const double *const *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setElemVector</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a6b0b28a4548d7096fae244c93d91b72b</anchor>
      <arglist>(int elemBlockID, int elemID, int numNodes, const int *nodeNumbers, const int *numDofPerNode, const int *dof_ids, const double *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setDirichletBCs</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a0eef2ed58fee8da737e5b7c9e4a1386d</anchor>
      <arglist>(int numBCs, const int *nodeNumbers, const int *dof_ids, const double *values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoMatrix</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a4167eb43a1a0d8685343a1f39ca55cac</anchor>
      <arglist>(int numRowNodes, const int *rowNodeNumbers, const int *row_dof_ids, const int *numColNodesPerRow, const int *colNodeNumbers, const int *col_dof_ids, const double *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoRHSVector</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>ada1eb54829bfaf320403660c14be5ace</anchor>
      <arglist>(int numNodes, const int *nodeNumbers, const int *dof_ids, const double *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putIntoRHSVector</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>aa99a58d1dd1766a707bd4b7464a43023</anchor>
      <arglist>(int numNodes, const int *nodeNumbers, const int *dof_ids, const double *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadComplete</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a8a7ed8f9503e233604b17f97ce9417b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>launchSolver</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>aa3a9c5a9332d973f152797235ef556be</anchor>
      <arglist>(int &amp;solveStatus, int &amp;iterations)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>reset</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a602e32bb6a1147a7101aace065d371ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>deleteConstraints</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a6608e0106cedc23cda8be0423074a968</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSolnEntry</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>acd36c3e8bba1b451f345b9554bbf1ea5</anchor>
      <arglist>(int nodeNumber, int dof_id, double &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMultiplierSoln</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>ad3221e0984a9b882a98c52a1ebd3779f</anchor>
      <arglist>(int CRID, double &amp;lagrangeMultiplier)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>aeff979c137246a2b82fcb6c753cf5fbe</anchor>
      <arglist>(int fieldID, int fieldSize, int numNodes, const int *nodeNumbers, const double *coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setMultiplierCR</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>a147b2e5082ad0f09c5bea7c772976d33</anchor>
      <arglist>(int CRID, int numNodes, const int *nodeNumbers, const int *dof_ids, const double *coefWeights, double rhsValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setPenaltyCR</name>
      <anchorfile>classFiniteElementData.html</anchorfile>
      <anchor>abb70546295f335c2dd3d735edc354e8e</anchor>
      <arglist>(int CRID, int numNodes, const int *nodeNumbers, const int *dof_ids, const double *coefWeights, double penaltyValue, double rhsValue)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Graph</name>
    <filename>classfei_1_1Graph.html</filename>
    <member kind="typedef">
      <type>snl_fei::RaggedTable&lt; snl_fei::MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt;</type>
      <name>table_type</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>ab182699b5376be4f547b8e962de9c327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fei::ctg_set&lt; int &gt;</type>
      <name>table_row_type</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a64066d49b46b7ed51845078f943b0d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::RaggedTable&lt; std::map&lt; int, fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt;</type>
      <name>remote_table_type</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a1eccb9d5fd1500e57ae557651d72eb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Graph</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a25de1828569aa6e5a297c50acf15c2cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>addIndices</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a5b20a80fe993e8a38a08510fc88546db</anchor>
      <arglist>(int row, int len, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>addSymmetricIndices</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a8b20ef9b9e352770fd63159656085449</anchor>
      <arglist>(int numIndices, int *indices, bool diagonal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a71412c211ba59c219b790b18d36cde36</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual table_type *</type>
      <name>getLocalGraph</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>af119a7cc78e624b309b933e39f507b61</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; remote_table_type * &gt; &amp;</type>
      <name>getRemoteGraph</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a22e64cd35ab407b9c79a04c735fafbfe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeLocalGraph</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>a80690e5c6f94fda4c0da15405ea7a7aa</anchor>
      <arglist>(FEI_OSTREAM &amp;os, bool debug=false, bool prefixLinesWithPoundSign=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeRemoteGraph</name>
      <anchorfile>classfei_1_1Graph.html</anchorfile>
      <anchor>af6af3569f3ab5cb3a16f86ce3ca973b0</anchor>
      <arglist>(FEI_OSTREAM &amp;os)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Graph_Impl</name>
    <filename>classfei_1_1Graph__Impl.html</filename>
    <base>fei::Graph</base>
    <member kind="function">
      <type></type>
      <name>Graph_Impl</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a81e045b03a0001372955e35c93f65bc4</anchor>
      <arglist>(MPI_Comm comm, int firstLocalRow, int lastLocalRow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Graph_Impl</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a029943d7944f1a6bfad81c1f299905ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addIndices</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a1758122555bb67308edf5ad36a1f5b87</anchor>
      <arglist>(int row, int len, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSymmetricIndices</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>ada47e94d03a98ac2b6154a6f8187d855</anchor>
      <arglist>(int numIndices, int *indices, bool diagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a9b3780731f9523af5a325d2ca97b84e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>table_type *</type>
      <name>getLocalGraph</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a0b05f7e61b0d222f3f729de7c5752dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; remote_table_type * &gt; &amp;</type>
      <name>getRemoteGraph</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>add90bdd7c4643d1904f416c1652160b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeLocalGraph</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a83858d471c5248a0acaa7adc3ffdcbc8</anchor>
      <arglist>(FEI_OSTREAM &amp;os, bool debug=false, bool prefixLinesWithPoundSign=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeRemoteGraph</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a847af5e8863c16ae9a4c469c53574419</anchor>
      <arglist>(FEI_OSTREAM &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalRows</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a8b62d25b082abe8df721e7d7e1fb6901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalNonzeros</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>aa3407759c8bc51aac8c8f1a7445f5996</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalRowLength</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a12a06c622d5ab563d8fc7cf38e318f60</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addDiagonals</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>aae9e24e3779bde20ee4201d49e6060bf</anchor>
      <arglist>(int numIndices, int *indices)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>table_type *</type>
      <name>localGraphData_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>af250e3e9ee93838f237c84eeb9bcd8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; remote_table_type * &gt;</type>
      <name>remoteGraphData_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a415120226b2e485988fca2dd229ecffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::EqnComm &gt;</type>
      <name>eqnComm_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a269afeac4d1905fa56e93cf56c0fb481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalRow_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a485945cd2acedefffadbd375b539ac98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalRow_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>ab2384eeeb4fa50fb488dac6ba57b3f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a2fc0ffcd461be3b935d39d9febc78716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a474ba9a53a7e11c938a366cc9acf69cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1Graph__Impl.html</anchorfile>
      <anchor>a0579543df1c07d3504667b1526a2c6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::GraphReducer</name>
    <filename>classfei_1_1GraphReducer.html</filename>
    <base>fei::Graph</base>
    <member kind="function">
      <type></type>
      <name>GraphReducer</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a40e88dba087699804cc7081518912370</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Reducer &gt; reducer, fei::SharedPtr&lt; fei::Graph &gt; target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphReducer</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a427eb38db400abbcfffe2f807099d2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addIndices</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a154bd01951561b822f7bcc9ad7c161f9</anchor>
      <arglist>(int row, int len, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSymmetricIndices</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a2d64c3c024031777cb7b4834ffacf832</anchor>
      <arglist>(int numIndices, int *indices, bool diagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a8983c8e7eff1f2d58d8a9518e5ec4f4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>table_type *</type>
      <name>getLocalGraph</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>aab32358d461190e954cf40ba76b84505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; remote_table_type * &gt; &amp;</type>
      <name>getRemoteGraph</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>aafa9cc0df21648944665095b1ea82062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeLocalGraph</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a464b855447cd5248c7c7daa4e75fc04f</anchor>
      <arglist>(FEI_OSTREAM &amp;os, bool debug=false, bool prefixLinesWithPoundSign=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeRemoteGraph</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a5e512346e02a6ebb96e8463cfc0ac03f</anchor>
      <arglist>(FEI_OSTREAM &amp;os)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a56dee9fd410ca902f0361755389ff9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Graph &gt;</type>
      <name>target_</name>
      <anchorfile>classfei_1_1GraphReducer.html</anchorfile>
      <anchor>a2137bdff75b8bff01c763c8c9ee81325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HexBeam</name>
    <filename>classHexBeam.html</filename>
    <member kind="enumvalue">
      <name>OneD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aafc9799b6062b39f88187d7f5350dfe9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aa944e06b3ab3a5461eed0289e76cbeb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aa1413984f661d852e4ff35a3da19ab7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aafc9799b6062b39f88187d7f5350dfe9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aa944e06b3ab3a5461eed0289e76cbeb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeD</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0b96fa6a63d99c1e5333fe6ffa8bd40aa1413984f661d852e4ff35a3da19ab7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HexBeam</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a1bb94a1c8c99d6ca927ebe1f52f76c68</anchor>
      <arglist>(int W, int D, int DofPerNode, int decomp, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HexBeam</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a677b6a30bb3c9622886daba1178f0b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inErrorState</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>adb272d20e04fbf96de54aba73e0dfd30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numNodesPerElem</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a357dd81d91049e06188ccabb4bd820a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numDofPerNode</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a388657d1ffce94f16e801e16c56f06a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numLocalElems</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a82e16f8edc017104b4f2aa6beff4d5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numLocalNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>af0d71732e56be4a272c685541851a6b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>firstLocalElem</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ad7694435fa5bce7bae169298a8abd079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getElemConnectivity</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>aaee5ce5b0dc4dddc797e9e3855256520</anchor>
      <arglist>(int elemID, int *nodeIDs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getElemStiffnessMatrix</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a7e8d5a6f66e733632923cd30e683ffd4</anchor>
      <arglist>(int elemID, double *elemMat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getElemLoadVector</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a4f0f157b6aa5dfda3a3335a41f201e6c</anchor>
      <arglist>(int elemID, double *elemVec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBCNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a0e682cd9571b11e91487995d49487f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBCNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>aeabf09d7f756355d2c2021995e79aa5e</anchor>
      <arglist>(int numNodes, int *nodeIDs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBCValues</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ada9ddff404cc245577c32af93f159ece</anchor>
      <arglist>(int numBCNodes, int *offsetsIntoField, double *vals)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a34dcad13136cdcfdeea43ef33fca3c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSharedNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a51f3580a8590ce8ae25c3cae674783fc</anchor>
      <arglist>(int numSharedNodes, int *&amp;sharedNodes, int *&amp;numSharingProcsPerNode, int **&amp;sharingProcs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCRs</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>abb73e39fe74c842c453011d7f87d10e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumNodesPerCR</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a805327e72c27972d94afa8b82f2e1d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCRNodes</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ac29bc19911f568fb64ed996c755a15b3</anchor>
      <arglist>(int **nodeIDs)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>W_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a373dc24c665d12685d243e9ace42202a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>D_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a5b88bff506656b7d456d74a785e56a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>decomp_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a98c5179bebbdb4214158bc1f7b0f7894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ac2599b5bebb69a36f6a3e4397e719aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a6698419027f2190935ffd8456325fb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>totalNumElems_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a58dafb0879109fcde79ac865eee611ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>totalNumNodes_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a40970bdfc05a5e24771b4894c506921e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localNumElems_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>af281e425bc4088095e9e1e2083f1f21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localNumNodes_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a080a9de39c2a56fbe9bf049df7cb1111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>firstLocalElem_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ab164444aded7956da1e51def98150101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>firstLocalNode_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a52ebc4d57c7407ae63646977c9ed6bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numElemsPerSlice_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>ace8965bf2e1c980e7dd591c49272552b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodesPerSlice_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a74260a4338b3276bcec4d4a0f2fdc67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocalSlices_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a2a0a973aeef2b9fff942fb6448d51f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inErrorState_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>aa4369d63d7ec5f84b08f0dc1c15f6542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nodesPerElem_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a6844d46c8f05e6b01a64f6996bcfd8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dofPerNode_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a61e8cf15e3a6eb078a617941e3397a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocalDOF_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>a5846e107803aee2b4aed7fdb70eba87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numGlobalDOF_</name>
      <anchorfile>classHexBeam.html</anchorfile>
      <anchor>af8e9d55859d22a46e200bba3b1ec1c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HexBeamCR</name>
    <filename>classHexBeamCR.html</filename>
    <base>HexBeam</base>
    <member kind="enumvalue">
      <name>OneD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9aaa8c5a564595921d3915c1e0d16ef6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9a3f90609140b21d65745d1c69ec45523e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9a59f79a2fd45e2d804aa47edf4752b173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9aaa8c5a564595921d3915c1e0d16ef6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TwoD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9a3f90609140b21d65745d1c69ec45523e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThreeD</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a4774e53c396b6a814e59b04ad3839aa9a59f79a2fd45e2d804aa47edf4752b173</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HexBeamCR</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a602e388ca990af2e2a18390f754b2c2b</anchor>
      <arglist>(int W, int D, int DofPerNode, int decomp, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HexBeamCR</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>ae69e8b3643a11b79f2ca87ee6ab6ce80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getElemConnectivity</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a136de69bc2b855cbbc44147b2587cdd0</anchor>
      <arglist>(int elemID, int *nodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getElemStiffnessMatrix</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a2de887949c41c3369953f56f5d7033a9</anchor>
      <arglist>(int elemID, double *elemMat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getElemLoadVector</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a6afc859125ecd98901e8733531d34d50</anchor>
      <arglist>(int elemID, double *elemVec)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBCNodes</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a5e3316faad2178f596ec4fb447815425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBCNodes</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a7555c3374bdaa4b03b112e3f70632780</anchor>
      <arglist>(int numNodes, int *nodeIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBCGammaValues</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a61d4185560745196490b7dd368ec5e42</anchor>
      <arglist>(int numBCDofs, double *gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a6872722bc42d610dd4778eda7cb830ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSharedNodes</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a8a0c7f660268e6ec3b41adb5f0ca8d9c</anchor>
      <arglist>(int numSharedNodes, int *&amp;sharedNodes, int *&amp;numSharingProcsPerNode, int **&amp;sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCRs</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>aa35543940a991f1a6b6909772d3bb488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodesPerCR</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a2ac8994e69a7c1959c064aa98d362592</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCRNodes</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a3f6ece0b7c44a79c015174be77210eff</anchor>
      <arglist>(int **nodeIDs)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocalCRs_</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>aaee28520aa5a6ae9340cc64e53722ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodesPerCR_</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>af9a38afb9a6ebe53eafcd772cf37a64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>firstLocalSlice_</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>aa696602707f23bebf3038cf6c3fcfe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>localCRslice_</name>
      <anchorfile>classHexBeamCR.html</anchorfile>
      <anchor>a6305cfc0a03f81e565c78fdbcf626900</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::IndexTable</name>
    <filename>classfei_1_1IndexTable.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexTable</name>
      <anchorfile>classfei_1_1IndexTable.html</anchorfile>
      <anchor>a47b8add70e3e6a28db784fa768207122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexTable</name>
      <anchorfile>classfei_1_1IndexTable.html</anchorfile>
      <anchor>a00953b5287b0bff736e295e7335e3c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addDiagonals</name>
      <anchorfile>classfei_1_1IndexTable.html</anchorfile>
      <anchor>a94808cd37ba39f59267295fa76398d1c</anchor>
      <arglist>(int numIndices, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addIndices</name>
      <anchorfile>classfei_1_1IndexTable.html</anchorfile>
      <anchor>a222116f2e80e826413c250a4b5fb05e6</anchor>
      <arglist>(int row, int numIndices, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addIndices</name>
      <anchorfile>classfei_1_1IndexTable.html</anchorfile>
      <anchor>a39f467fb7f96507a65fbff20a46cadb8</anchor>
      <arglist>(int numRows, const int *rows, int numIndices, const int *indices)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>initCR</name>
    <filename>classinitCR.html</filename>
    <member kind="function">
      <type></type>
      <name>initCR</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>a55cc9734999d0259e36fdb54c3321846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~initCR</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>abbc7a38d567fd1e2b07e2878639fb274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>aeaec35675db632c889cba0c36014034e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>ab5724058ab6a326cf126691dba3c7ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldIDs</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>acba4b2786f8f36c90801ca800c410bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CRID</name>
      <anchorfile>classinitCR.html</anchorfile>
      <anchor>a42b85de356a6a773c27f73bc74b63cc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>initElem</name>
    <filename>classinitElem.html</filename>
    <member kind="function">
      <type></type>
      <name>initElem</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>a4168ee78110f4a80e70b0723a3e4c8ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~initElem</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>a04256374536ed3bdd3c2b24b36c4474c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>elemBlockID</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>aeb1775be0884449e00007c9d0af838d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>elemID</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>af53ae899514278630be90ac089d7fedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>adbfa6455e504d6839758aa2471dc9e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classinitElem.html</anchorfile>
      <anchor>aae1366b92803fa5994f75a82c3fb0954</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InputData</name>
    <filename>classInputData.html</filename>
    <member kind="function">
      <type></type>
      <name>InputData</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>aff34c47ca0f425fb36c988f0e827a525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputData</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>affd7504c7b75c2fca7834e58f35f27f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>a3afe8edcb65b3df5d88759a7400f8018</anchor>
      <arglist>(const InputData &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>af70aef62bc1f3c4bf526e83553162848</anchor>
      <arglist>(const InputData &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addElemID</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>af425e53ae8a3dd056e791cc315e5e8fd</anchor>
      <arglist>(int elemBlockID, int elemID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addElemMatrix</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>af2c5fe343ceb726700eb6c1706ac0cb2</anchor>
      <arglist>(int elemBlockID, int elemID, std::vector&lt; double &gt; &amp;matrixData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addElemRHS</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>a63269c0e5c5405f9bd6f544594e835b8</anchor>
      <arglist>(int elemBlockID, int elemID, std::vector&lt; double &gt; &amp;rhsData)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>elemBlockIDs</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>ace6c4a7c2be0ed2e872c92234fb68942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt;</type>
      <name>elemIDs</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>a220f0b08e17d80d76d3078bbce2d91eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; ElemContribution &gt; * &gt;</type>
      <name>elemContributions</name>
      <anchorfile>classInputData.html</anchorfile>
      <anchor>a6e2ba3108f06bf12d12b4cc9e999e115</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::MapContig::iterator</name>
    <filename>classsnl__fei_1_1MapContig_1_1iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>acd292f3192ef0f0d5412086feae4f507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a3d333f2f229106ac8fd77b88b2083eb6</anchor>
      <arglist>(int offset, MapContig&lt; VAL_TYPE &gt; *mapPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iterator</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>aba943d09ce69e9c632f3523612364852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a8803504e3f4d443ddb7fd4f0860638d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>aeead17764ca86715eaa375ce341a8647</anchor>
      <arglist>(const iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a2e17992151eaf2d8a17e2e63488a4e99</anchor>
      <arglist>(const iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a9f6be298cde61961685313b584f4c779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>aa188e39249f6d5487ded74f9ef174934</anchor>
      <arglist>(const iterator &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset_</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a82ffe650e5ed927f7ce805a762a8ee8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MapContig&lt; VAL_TYPE &gt; *</type>
      <name>mapPtr_</name>
      <anchorfile>classsnl__fei_1_1MapContig_1_1iterator.html</anchorfile>
      <anchor>a0235979bdffe1413a744770c4a089638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::less_DirichletBCRecord</name>
    <filename>classfei_1_1less__DirichletBCRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>less_DirichletBCRecord</name>
      <anchorfile>classfei_1_1less__DirichletBCRecord.html</anchorfile>
      <anchor>aa9f19daec70d55eb59eadcc6b4ce583a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~less_DirichletBCRecord</name>
      <anchorfile>classfei_1_1less__DirichletBCRecord.html</anchorfile>
      <anchor>aebc0e0918813e5f58bc75d97a2ec3218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classfei_1_1less__DirichletBCRecord.html</anchorfile>
      <anchor>ab4ed7cd9579d870491cfb5c12735c777</anchor>
      <arglist>(const DirichletBCRecord &amp;lhs, const DirichletBCRecord &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::less_field_rank_id</name>
    <filename>structfei_1_1less__field__rank__id.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structfei_1_1less__field__rank__id.html</anchorfile>
      <anchor>ac7d29611b8a5fdb373477f10bf6e3f1e</anchor>
      <arglist>(const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;dof1, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;dof2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structfei_1_1less__field__rank__id.html</anchorfile>
      <anchor>ac395368e423d037e22b50378c242df5e</anchor>
      <arglist>(const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; *dof1, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; *dof2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::less_rank_id_field</name>
    <filename>structfei_1_1less__rank__id__field.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structfei_1_1less__rank__id__field.html</anchorfile>
      <anchor>a2ee48893f66c83b5136679ab1c081c3b</anchor>
      <arglist>(const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;dof1, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; &amp;dof2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structfei_1_1less__rank__id__field.html</anchorfile>
      <anchor>a242c37ac4e3601dd8e7d927e7e6fb141</anchor>
      <arglist>(const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; *dof1, const Dof&lt; LocalOrdinal, GlobalOrdinal &gt; *dof2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LibraryWrapper</name>
    <filename>classLibraryWrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>LibraryWrapper</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>ad7ab7488d34f2befc6c4801ab3403214</anchor>
      <arglist>(fei::SharedPtr&lt; LinearSystemCore &gt; lsc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LibraryWrapper</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a62c553f097025c34e5289129dc182648</anchor>
      <arglist>(fei::SharedPtr&lt; FiniteElementData &gt; feData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LibraryWrapper</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>ae423004007b738fd80c4025ebfe644d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveLinearSystemCore</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a5f402deb714ba66156b2442065587603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveFiniteElementData</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a19e091873a80985a138956d8fb28a411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; LinearSystemCore &gt;</type>
      <name>getLinearSystemCore</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a185781f025941b9ea1c48c51bdf11a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>getFiniteElementData</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a24160f77c90b8d11687f34f9f031a31a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveLinearSystemCore_</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a20f8c9ea441ac5ffd7b4ccab00b0371e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveFiniteElementData_</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a8dbf6a8ae4a26ac765a9a16728309ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; LinearSystemCore &gt;</type>
      <name>lsc_</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>a840e5fb668047e6240779793397356d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>feData_</name>
      <anchorfile>classLibraryWrapper.html</anchorfile>
      <anchor>ae8c9cfcf67e371e625a75737939e3a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LinearDecomposition</name>
    <filename>classfei_1_1LinearDecomposition.html</filename>
    <templarg>GlobalIDType</templarg>
    <member kind="function">
      <type></type>
      <name>LinearDecomposition</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>aacd934f7442324152ba473b0c2f6e3e3</anchor>
      <arglist>(int localProc, int numProcs, GlobalIDType lowest_global_id, GlobalIDType highest_global_id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearDecomposition</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>afc4ae432919890def9e92ab19e9eb97d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>first_locally_owned_global_id</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a9f66ffda981d84aca1dd808d28b2c1f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>last_locally_owned_global_id</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a57df8c7d9707886322915dd327e183e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>first_global_id</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a333436707d638ee95bb5c3a8ee45e024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>last_global_id</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>aca14d7f95346f57a5068fe300c3a1013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>which_proc</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a09fee8d230b15bf601e789c4a1d7b0f2</anchor>
      <arglist>(GlobalIDType id) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>first_global</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a59e5c920e8774c757e82a434d98837f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>last_global</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a53b2034ac260931623015a6eeea3acfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>first_locally_owned_global</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>ad2bcf76bf31f7e5681df4b232dd88225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>last_locally_owned_global</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>a5906f66faf53c732e615582671b3460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalIDType &gt;</type>
      <name>proc_offsets</name>
      <anchorfile>classfei_1_1LinearDecomposition.html</anchorfile>
      <anchor>aeb3eb8d4a20a1169c0e30054be4af096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LinearProblemManager</name>
    <filename>classfei_1_1LinearProblemManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearProblemManager</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a0085a20656aa19c7184753233467142c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRowDistribution</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a68de29c19d2cfd12e73cdd5c2222c311</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;ownedGlobalRows)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a12412803327abb862303eb2d5f888abf</anchor>
      <arglist>(fei::SharedPtr&lt; fei::SparseRowGraph &gt; matrixGraph)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixValues</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a4c5996896c2e9da145b6b740c12dea20</anchor>
      <arglist>(double scalar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>ab01fccb9b80d6261857dd137671882ed</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRowLength</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>af735c076e4feac04a2557b0d3fcd9a05</anchor>
      <arglist>(int row)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutMatrixRow</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a4bde84ca63ec593ec588ff05a7341889</anchor>
      <arglist>(int row, int len, double *coefs, int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>insertMatrixValues</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a7eeba1ed6a7e49d7886e567db9383442</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorValues</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>ae1ddc8f666720d18b9ab88974859e1bf</anchor>
      <arglist>(double scalar, bool soln_vector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>insertVectorValues</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a9cd3fceda9591ebf12ec765d83ab4450</anchor>
      <arglist>(int numValues, const int *globalIndices, const double *values, bool sum_into, bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutVectorValues</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a79ddb5afd8162b57375d6b8ad78a1963</anchor>
      <arglist>(int numValues, const int *globalIndices, double *values, bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double *</type>
      <name>getLocalVectorValuesPtr</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>a7ce93968c2c0c9f7b36b437b49cd9e7e</anchor>
      <arglist>(bool soln_vector, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1LinearProblemManager.html</anchorfile>
      <anchor>aaf7e813184b06d20b0d6bc72e3ec84ca</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LinearSystem</name>
    <filename>classfei_1_1LinearSystem.html</filename>
    <class kind="class">fei::LinearSystem::Factory</class>
    <member kind="function">
      <type></type>
      <name>LinearSystem</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a5a11260d680a59917cf9025172a883a5</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; &amp;matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearSystem</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a744bf4c7bd4cc6041acb2f5b003b3cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a7ecdfabee8685e30225239cbbca371d8</anchor>
      <arglist>(int numParams, const char *const *paramStrings)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a5583a85238a62ae726b4866dec4c7e3f</anchor>
      <arglist>(const fei::ParameterSet &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>ad549e2f901cad222f28448a0c622828c</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Matrix &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a2ffde84094d31112f0e7142ae4a9d297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; const fei::Matrix &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>aa098a2a78c798835ba013bf7531f0277</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRHS</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a1a84be580a06119d78c6bd5ec4dc447f</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Vector &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>getRHS</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>ae7dd8c5a83208c55b2b39167bb8fb3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; const fei::Vector &gt;</type>
      <name>getRHS</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a20cd79ec7e2f780f8d41c35836b6f70b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSolutionVector</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a2a2e305a896cfd56811c8e02360d3081</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Vector &gt; &amp;soln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>getSolutionVector</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a92e5ed18ab89676225a45e1d3665e91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fei::SharedPtr&lt; const fei::Vector &gt;</type>
      <name>getSolutionVector</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a10a7ed3a027284ccb7f1f542aea65a4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putAttribute</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a9876df1cdc1da635c1d937a1c22fb272</anchor>
      <arglist>(const char *name, void *attribute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAttribute</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>aa593e7d2abe4bb9d44e7580565a39f30</anchor>
      <arglist>(const char *name, void *&amp;attribute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadEssentialBCs</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a1e6b5ce9623056f053115fdc96b45df7</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int fieldID, int offsetIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadEssentialBCs</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>aee6e4a0ec5ebd5b216197e099bf1e3ab</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int fieldID, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadLagrangeConstraint</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a7bee04c9a938948340531ac56df95992</anchor>
      <arglist>(int constraintID, const double *weights, double rhsValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadPenaltyConstraint</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a5e5a4ae829db303feee932cc199c32b2</anchor>
      <arglist>(int constraintID, const double *weights, double penaltyValue, double rhsValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>loadComplete</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>afdfc95fe08e9da423c5add501a326cf6</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setBCValuesOnVector</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a9cc4bab89b05ae047a16fb8007bee2cd</anchor>
      <arglist>(fei::Vector *vector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>eqnIsEssentialBC</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a08f944d866970af4302622f623bd2007</anchor>
      <arglist>(int globalEqnIndex) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEssentialBCs</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>aca73ea1169aac60b47f62e46e50ee912</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getConstrainedEqns</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a1fdd9fd7ed683d1459e19cdb5e395de1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;crEqns) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>matrix_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a16aca0db0733d37b268d0420893643b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>soln_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a65b59adef9d15b4ab231ad82be389e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>rhs_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a97232d2a3b1cbb8eec46cb4a3255ad2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a164e7cf241f0d81a71ddca8d8904f797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::DirichletBCManager *</type>
      <name>dbcManager_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a7040950184c3b97c59432d459585b118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; char * &gt;</type>
      <name>attributeNames_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a79f84c1624f853ae8238be990e30b919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; void * &gt;</type>
      <name>attributes_</name>
      <anchorfile>classfei_1_1LinearSystem.html</anchorfile>
      <anchor>a44c2f512da458f21bb1b99a5674194bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::LinearSystem_FEData</name>
    <filename>classsnl__fei_1_1LinearSystem__FEData.html</filename>
    <base>fei::LinearSystem</base>
    <member kind="function">
      <type></type>
      <name>LinearSystem_FEData</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a7cc66c1b913c7354b623e8a5fec12878</anchor>
      <arglist>(fei::SharedPtr&lt; FiniteElementData &gt; &amp;fedata, fei::SharedPtr&lt; fei::MatrixGraph &gt; &amp;matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearSystem_FEData</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a63389024d2abc1e480b41893e3ce194e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadLagrangeConstraint</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a8c73cd7200f5ab8da6ac9a5bd7829f4b</anchor>
      <arglist>(int constraintID, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadPenaltyConstraint</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a3d94a32ed98b74d6649a1ace75baccfe</anchor>
      <arglist>(int constraintID, const double *weights, double penaltyValue, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a2744b458fb1d74fbaa82ebaef74ee1b4</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>getFiniteElementData</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a08a545d806cfa42ddde09a1f89e4135c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a37b7f32dadc5cdfd881ee78b97d2c8b0</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a93ffe7eccd3c2f5fa84a9939329ebb05</anchor>
      <arglist>(const fei::ParameterSet &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setBCValuesOnVector</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a5f233a26c3dc89f7abf55bcc619e8103</anchor>
      <arglist>(fei::Vector *vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLookup</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a51c3ad63d9429998c04cf0f70fd3a1eb</anchor>
      <arglist>(Lookup *lookup)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eqnIsEssentialBC</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>ab3a509e9a82ce3b408a624e91c7bd3d3</anchor>
      <arglist>(int globalEqnIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEssentialBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a55b4b74151b19657455f8ab56545ec3c</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstrainedEqns</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a444b5463cc32c03b250643e27bb8c5aa</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;crEqns) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>implementBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>ac0a473d9c5a3dc22fc6795b029775b67</anchor>
      <arglist>(bool applyBCs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a468ad4f89710cc44028080d86055fbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>aa62d3f377da511748c7121dcf9fd858d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a71dde72cca62640b8c3985bed4e5b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>matrix_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a7e51e4a695af7cb2ceee6d863a01e81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>soln_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a668c83fffdfd66337ae962743ae8bc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>rhs_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a1210e505f0482ababab6f5b0000751e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FiniteElementData &gt;</type>
      <name>feData_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>ad030eeff2316dd883e46ec5059daa2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lookup *</type>
      <name>lookup_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a589075ecb7d392407166ee66999eda14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; char * &gt;</type>
      <name>attributeNames_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a2c7994c0e374d2718e0a874d7b5769da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; void * &gt;</type>
      <name>attributes_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__FEData.html</anchorfile>
      <anchor>a76853786e91c62489268292a6acd92c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::LinearSystem_General</name>
    <filename>classsnl__fei_1_1LinearSystem__General.html</filename>
    <base>fei::LinearSystem</base>
    <base protection="private">fei::Logger</base>
    <member kind="function">
      <type></type>
      <name>LinearSystem_General</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a304603ba80ccb17d25a81b78d57e8d63</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; &amp;matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearSystem_General</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>aff467263015f143d303fbb61a7ba66e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadEssentialBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>abc106e3047c2fb57cbf4ab8247c31d61</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int fieldID, int offsetIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadEssentialBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a6c0291f3d8fb5d3d8ef31f755a648659</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int fieldID, const int *offsetIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadLagrangeConstraint</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a3a642be06f1707173944afcb152c5037</anchor>
      <arglist>(int constraintID, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadPenaltyConstraint</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>aceb22016b9921359b2e51c4b78ea1bff</anchor>
      <arglist>(int constraintID, const double *weights, double penaltyValue, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadComplete</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a292a7047664a32fa6ace349d89192fe2</anchor>
      <arglist>(bool applyBCs=true, bool globalAssemble=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>aaffcfaed46b129599a2dbeff413e86f3</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a77dfbf7daa3992c329e5f1f64f2176f9</anchor>
      <arglist>(const fei::ParameterSet &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setBCValuesOnVector</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a5ada9e39887f41ce4d9844f2cc23d2fd</anchor>
      <arglist>(fei::Vector *vector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eqnIsEssentialBC</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>aa92d1157ffc88f0361e0aeda097c29cf</anchor>
      <arglist>(int globalEqnIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEssentialBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a05868c562cfc7047c86ef8102ae1456b</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstrainedEqns</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a9ed611455638fce900f0e5106ccd6654</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;crEqns) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a7929420f10ce55b5c19b357495b73da3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>fill_EssBCValues</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a8e894c9657c50a5566636a5fc7012343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>implementBCs</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a290494cfa861f0fc7a396d019391a3ce</anchor>
      <arglist>(bool applyBCs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>enforceEssentialBC_LinSysCore</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a9d6fa33499277d5b8e358a270301a310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>enforceEssentialBC_step_1</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a0923d485914f99dcfa6246afce53f787</anchor>
      <arglist>(fei::CSVec &amp;essBCs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>enforceEssentialBC_step_2</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a3a528090cd73b4f3667bc7eec76dfc69</anchor>
      <arglist>(fei::CSVec &amp;essBCs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getMatrixRow</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>af66384db61c0bf6fadc7271de5646828</anchor>
      <arglist>(fei::Matrix *matrix, int row, std::vector&lt; double &gt; &amp;coefs, std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>af678a4abdaa655f4da52c587cd58a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec *</type>
      <name>essBCvalues_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a2e6ce4ba0c834acc85784917ef84d361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec *</type>
      <name>allEssBCs_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ac1b1cc1312e4088138a9cce6fc6a4474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>resolveConflictRequested_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a3b6ceaac384f509ed943101b8797dff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>bcs_trump_slaves_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>abf5f5a0f91b95a91cb92955d649b4dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>explicitBCenforcement_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a5501c48540ac78b7d2793cc5fb910415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>BCenforcement_no_column_mod_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ae79d945bdbe4fa68f28e73f367468a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a992ba2780e3cab11d2ddcfd71ee2baed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ab59b454b0a258e656ae4340399d6d406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalOffset_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ab54f5c11a6b811334141c59d97cec4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalOffset_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a03aa2370efd81564e863c700a703e602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ae98940dc363d39df8897f0b70b7b440b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, unsigned &gt;</type>
      <name>named_loadcomplete_counter_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ad4838da090805cfe9fb1a08dd47bdae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>iwork_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>af15d12e2b40d62f5f68c2abe26795b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>dwork_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>ab29ad7d93db78225276aeb26744758c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classsnl__fei_1_1LinearSystem__General.html</anchorfile>
      <anchor>a994aa8e18b69ed14737103ffaef32316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearSystemCore</name>
    <filename>classLinearSystemCore.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearSystemCore</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a9ef0b9ff1f0e5966df08bd14fdfb5ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearSystemCore</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>accab3892d7350d9c7e05c9e2d3a727ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LinearSystemCore *</type>
      <name>clone</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a55fe55e790445e329ee131ada2d157ba</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a2e4723fb0f5aa0455d7431dee00c11c7</anchor>
      <arglist>(int numParams, const char *const *params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setLookup</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a1f8471c595c7302de4fef9e209768a9b</anchor>
      <arglist>(Lookup &amp;lookup)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProperty</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a19ece4307b1fad22f915cbb9ce920c00</anchor>
      <arglist>(const char *, double &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setGlobalOffsets</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>adf48a26acea8af60d8510c4e79e58558</anchor>
      <arglist>(int len, int *nodeOffsets, int *eqnOffsets, int *blkEqnOffsets)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setConnectivities</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a57d90556afa201ee0b841e4c0f26918c</anchor>
      <arglist>(GlobalID elemBlock, int numElements, int numNodesPerElem, const GlobalID *elemIDs, const int *const *connNodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setStiffnessMatrices</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>aa3add667614d7c9b24fd2996a9181b1e</anchor>
      <arglist>(GlobalID elemBlock, int numElems, const GlobalID *elemIDs, const double *const *const *stiff, int numEqnsPerElem, const int *const *eqnIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setLoadVectors</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a49032423fb8d37f1f81bc804b5b8ec13</anchor>
      <arglist>(GlobalID elemBlock, int numElems, const GlobalID *elemIDs, const double *const *load, int numEqnsPerElem, const int *const *eqnIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setMatrixStructure</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>af2bea8785cefd57e6b52b4b6c4fdca9f</anchor>
      <arglist>(int **ptColIndices, int *ptRrowLengths, int **blkColIndices, int *blkRowLengths, int *ptRowsPerBlkRow)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setMultCREqns</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>ab596df5bdc212a240a68715a7451f2d7</anchor>
      <arglist>(int multCRSetID, int numCRs, int numNodesPerCR, int **nodeNumbers, int **eqnNumbers, int *fieldIDs, int *multiplierEqnNumbers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setPenCREqns</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a867ca428d7259bc7b93b6aa638059b33</anchor>
      <arglist>(int penCRSetID, int numCRs, int numNodesPerCR, int **nodeNumbers, int **eqnNumbers, int *fieldIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoSystemMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a17a1050b6c7249911efd11c953cc21d0</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, int numBlkRows, const int *blkRows, int numBlkCols, const int *blkCols, const double *const *values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoSystemMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a76aac7c0e7af43c8f29ed749c69f0dfc</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putIntoSystemMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a1b892eb26a69fd4dc238239561f7d63b</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMatrixRowLength</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a508ae024c24ad7ddac14098edc863942</anchor>
      <arglist>(int row, int &amp;length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMatrixRow</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a13a1b3fdd8ee94ad059d2a288bc99eaf</anchor>
      <arglist>(int row, double *coefs, int *indices, int len, int &amp;rowLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a2bc570a8ac743d8403284fc4ad36243b</anchor>
      <arglist>(int num, const double *values, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putIntoRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a8d785bd49fdec79fa859cbd126f98cb4</anchor>
      <arglist>(int num, const double *values, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFromRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a1d6687366d37e46f8744b66594a35a52</anchor>
      <arglist>(int num, double *values, const int *indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>matrixLoadComplete</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a8d0884d1d216af462a6bf1e494ba17be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>afe02febc84c656cb81ee3c73404f0ba3</anchor>
      <arglist>(int fieldID, int fieldSize, int *nodeNumbers, int numNodes, const double *data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetMatrixAndVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a4d4e3707f49019b4ad5c983caae79843</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a7bc028c014735393e3e6d0360d1f26b1</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a9fc04454615772616c0d737818276aff</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enforceEssentialBC</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a3996d48023c18bca8d116e38639408c1</anchor>
      <arglist>(int *globalEqn, double *alpha, double *gamma, int len)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>enforceRemoteEssBCs</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>aff96d089f89fc241a2634c154912a734</anchor>
      <arglist>(int numEqns, int *globalEqns, int **colIndices, int *colIndLen, double **coefs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMatrixPtr</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>ab6a123f512f5d63f5ca85178a8649366</anchor>
      <arglist>(Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyInMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a51d2491d874e8fba9e6f55b2832f4fba</anchor>
      <arglist>(double scalar, const Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a8c21aaa3377f1b449f7b5e89d6e5a77f</anchor>
      <arglist>(double scalar, Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInMatrix</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a224cc2a202b667e1f2795bfa93b157c9</anchor>
      <arglist>(double scalar, const Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRHSVectorPtr</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a7b9fba0b1fb9d1e9e0235477ed42a447</anchor>
      <arglist>(Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyInRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a124a84a9b66d91f2c68ef3ae7c9f6d54</anchor>
      <arglist>(double scalar, const Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a612af8541297e0a692ee7c0c8e0e797f</anchor>
      <arglist>(double scalar, Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInRHSVector</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>adf1dec4fa2dcc233df18d58c75f84cc4</anchor>
      <arglist>(double scalar, const Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>destroyMatrixData</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a7ddaabe1b1913a3af9c5576b0135a022</anchor>
      <arglist>(Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>destroyVectorData</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a2ea60fe33c63c7371b310335855a7d4c</anchor>
      <arglist>(Data &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setNumRHSVectors</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a16b0f112937850195ed14b8b68d8d328</anchor>
      <arglist>(int numRHSs, const int *rhsIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setRHSID</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>abf643e5d255cd2c38315ec66b8f4e32a</anchor>
      <arglist>(int rhsID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putInitialGuess</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>af1a4288cbff62c6929cbf3c955a77a9f</anchor>
      <arglist>(const int *eqnNumbers, const double *values, int len)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSolution</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a8b80a874cacdbfedb297b729139e6554</anchor>
      <arglist>(double *answers, int len)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSolnEntry</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>ae5ed92e086e130c77636db717fe52205</anchor>
      <arglist>(int eqnNumber, double &amp;answer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>formResidual</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a2a93a2ecabb4780e58318e4a7b0b45d3</anchor>
      <arglist>(double *values, int len)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>launchSolver</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>aacab77eafa84515071b4f429f3b03ea0</anchor>
      <arglist>(int &amp;solveStatus, int &amp;iterations)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeSystem</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a551bbc75e810ffdd3778b580ea0c1216</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getMatrixBeginPointer</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>a974589d0e361e55499ecbf8041aea9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMatrixOffset</name>
      <anchorfile>classLinearSystemCore.html</anchorfile>
      <anchor>ab6ffcb923d2dd4bf16bab53c3293f0dd</anchor>
      <arglist>(int, int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei_Pool::Link</name>
    <filename>structfei__Pool_1_1Link.html</filename>
    <member kind="variable">
      <type>Link *</type>
      <name>next</name>
      <anchorfile>structfei__Pool_1_1Link.html</anchorfile>
      <anchor>a3dfae4b47ac3f57a9d2f659eda3d22ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinProbMgr_EpetraBasic</name>
    <filename>classLinProbMgr__EpetraBasic.html</filename>
    <base>fei::LinearProblemManager</base>
    <member kind="function">
      <type></type>
      <name>LinProbMgr_EpetraBasic</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>aa1e6dbad9ba60d727c23d91c9c61b31a</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinProbMgr_EpetraBasic</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>aa053631dbc7bff69bb17443f63879cbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowDistribution</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a1c6dddea6746871c4e2f7b3cee3ff59e</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;ownedGlobalRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a1bfa1614ec9e5cfb219e7c2f86a6518c</anchor>
      <arglist>(fei::SharedPtr&lt; fei::SparseRowGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixValues</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>afda200797619e4f34af7212d3d07bc09</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorValues</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a63eebf7d490f62ec0e9546a05df1938f</anchor>
      <arglist>(double scalar, bool soln_vector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a43d09741b373405b95764961f2a93b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowLength</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>ae7dca4b49d1c24cea355c3154e4add6b</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutMatrixRow</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a959f127a008bde313b27fff786d21677</anchor>
      <arglist>(int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertMatrixValues</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a66966778373b2984a9fa321b0b11e4a5</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertVectorValues</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>ac04d1b4192495166f888ca7bf430bc00</anchor>
      <arglist>(int numValues, const int *globalIndices, const double *values, bool sum_into, bool soln_vector, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutVectorValues</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a059472dd950ea0c5b9e5ea9ed7341c98</anchor>
      <arglist>(int numValues, const int *globalIndices, double *values, bool soln_vector, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getLocalVectorValuesPtr</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>adb24444db496767a6988d928f574685c</anchor>
      <arglist>(bool soln_vector, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>globalAssemble</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>accc3b0dec877007f7498562d7258374b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>get_A_matrix</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a1fa8b25a097f20e530cba696aa9a2ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; Epetra_MultiVector &gt;</type>
      <name>get_rhs_vector</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>acee9e00914badc4aa3f4bb1327275bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; Epetra_MultiVector &gt;</type>
      <name>get_solution_vector</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a5efd0de743346ee7aaff2db2bfe60353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a58803a5cc9a2e5f2d3141f0445e2d7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>ownedRows_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>af7fd073770593976e4e5687915ae88a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_Comm &gt;</type>
      <name>epetra_comm_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>ab7b155b6701b7479a28ce800b1cd8496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_Map &gt;</type>
      <name>epetra_rowmap_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a9cac4ba0d6bf7c24a53157120887071a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>fei_srgraph_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a72aee2042188472d7634ba4beec556c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>crsgraph_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a5791fadfb842fab73aa131e0db4bd2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>ad3297eef5a4e7cb44016b91706d8e5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numVectors_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>ae2b2094f1e33d9eda28845b71ac76a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_MultiVector &gt;</type>
      <name>x_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>a717be642bbd1be719996198c3ae8d39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; Epetra_MultiVector &gt;</type>
      <name>b_</name>
      <anchorfile>classLinProbMgr__EpetraBasic.html</anchorfile>
      <anchor>add790c5da5ea1a7d045c30c8ec369b7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinSysCore_flexible</name>
    <filename>classLinSysCore__flexible.html</filename>
    <base virtualness="virtual">LinearSystemCore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinSysCore_flexible</name>
      <anchorfile>classLinSysCore__flexible.html</anchorfile>
      <anchor>a83ea24259a70ef8c6e5a05040a912094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>resetConstraints</name>
      <anchorfile>classLinSysCore__flexible.html</anchorfile>
      <anchor>abbd546355f96d63c40d7bcb62def6092</anchor>
      <arglist>(double s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setMultCRComplete</name>
      <anchorfile>classLinSysCore__flexible.html</anchorfile>
      <anchor>a88b2d5bb54f9ae958959e8413dc0d7e5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>constraintsLoadComplete</name>
      <anchorfile>classLinSysCore__flexible.html</anchorfile>
      <anchor>a4be9d61c211a04ef456ff7406e29aef5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinSysCoreFilter</name>
    <filename>classLinSysCoreFilter.html</filename>
    <base>Filter</base>
    <member kind="function">
      <type></type>
      <name>LinSysCoreFilter</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a78e7735c1e13a85f84f0927b5d740657</anchor>
      <arglist>(FEI_Implementation *owner, MPI_Comm comm, SNL_FEI_Structure *probStruct, LinearSystemCore *lsc, int masterRank=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinSysCoreFilter</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a1d97fd901a0a7d2b6abd6ffc601bae81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resetSystem</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab4b04f8e6353d0d2ac80c9df828281d0</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resetMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a2be26e3b59613171d167e1059a6ab413</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resetRHSVector</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae9fbc4dd1174b0f94c6e7e985e70395a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>resetInitialGuess</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad9ba2e692ca7e892d1cf39067ad71801</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a0f59628992e75ea0265cb671458307ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadNodeBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae2a776f5f2cecc42fb9c73efc55ac198</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int fieldID, const int *offsetsIntoField, const double *prescribedValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadElemBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a816c8cea5af663b488eee509a6b74c46</anchor>
      <arglist>(int numElems, const GlobalID *elemIDs, int fieldID, const double *const *alpha, const double *const *beta, const double *const *gamma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElem</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab95e53ae6626efffeb83c44426f28f80</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElemMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab02ff0f70a3104de68dc9da939cfd4de</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, int elemFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumInElemRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a491b5178a31e0b7cc97ffa41ef99b0de</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *elemLoad)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadCRMult</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>afeade9759754d97d4ea722bb27dc6c50</anchor>
      <arglist>(int CRMultID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadCRPen</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a43bda42092b2859326b9c48c007deaf0</anchor>
      <arglist>(int CRPenID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putIntoRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a769c6abdfbe991e6debd6257c17d5855</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a8ade47113527f838a44d86f1303d4191</anchor>
      <arglist>(int IDType, int fieldID, int numIDs, const GlobalID *IDs, const double *rhsEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadComplete</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a6755b1052417e2bac148c103a9d6f129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a789a50f06494af4a1f10adee752c8a39</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>residualNorm</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a19718426b4e160ab6419c1a374e030a5</anchor>
      <arglist>(int whichNorm, int numFields, int *fieldIDs, double *norms, double &amp;residTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa11b79f67630d65bef33650c420e3654</anchor>
      <arglist>(int &amp;status, double &amp;sTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>iterations</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a817d0944f7a0e3e85bcaa066d7760a01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBlockNodeSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa46d0b0b21ab9f614e021afd562d09da</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNodalSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a7027759a664a31171b4335cb79c7cc45</anchor>
      <arglist>(int numNodes, const GlobalID *nodeIDs, int *offsets, double *results)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBlockFieldNodeSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a783b40f6e839461256908bddcd516c84</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBlockElemSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a35096d14015802194013292668e3417c</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int &amp;numElemDOFPerElement, double *results)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCRMultipliers</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a02277e702a4b866ce9f33fbd2b961e0b</anchor>
      <arglist>(int numCRs, const int *CRIDs, double *multipliers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putBlockNodeSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9f19b54e52a81a4408b7881ccf057ae6</anchor>
      <arglist>(GlobalID elemBlockID, int numNodes, const GlobalID *nodeIDs, const int *offsets, const double *estimates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a46ced986856f63b2267d436bb87d0c37</anchor>
      <arglist>(GlobalID elemBlockID, int fieldID, int numNodes, const GlobalID *nodeIDs, const double *estimates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putBlockElemSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a33ec713645b4934f052e3f3f116fe73b</anchor>
      <arglist>(GlobalID elemBlockID, int numElems, const GlobalID *elemIDs, int dofPerElem, const double *estimates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putCRMultipliers</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae575ca4ebc3835c72cdeaeb518d5115b</anchor>
      <arglist>(int numMultCRs, const int *CRIDs, const double *multEstimates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNodalFieldSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a60e306adc7e29d5d3dae19a5dfa04231</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, double *results)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putNodalFieldData</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a92ee2bcd29f1e6e794e4de87df0fbaf5</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>putNodalFieldSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a944c636cc26c520dbeb29f738f937de0</anchor>
      <arglist>(int fieldID, int numNodes, const GlobalID *nodeIDs, const double *nodeData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unpackSolution</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9e72b553fd42a6989c784566064e732f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqnCommMgr</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ac562c54c88f7757941a39c57c594cd3e</anchor>
      <arglist>(EqnCommMgr *eqnCommMgr)</arglist>
    </member>
    <member kind="function">
      <type>EqnCommMgr *</type>
      <name>getEqnCommMgr</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa7159d5ebfcdc50f4a49d362e9981d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setNumRHSVectors</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a1d2b6dc59cd908942ebf45374f24cd7d</anchor>
      <arglist>(int numRHSs, int *rhsIDs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>setCurrentRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>accc1c039c73aeae912c10eb77384535c</anchor>
      <arglist>(int rhsID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>exchangeRemoteEquations</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab217e8a033399e410c35a462902b29d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>exchangeRemoteBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>af5a76989bd191786ace84f9f1826b404</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;essEqns, std::vector&lt; double &gt; &amp;essAlpha, std::vector&lt; double &gt; &amp;essGamma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>implementAllBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a8359cc5f03b225d8e94b8fd54741cb12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enforceEssentialBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa8ce502986ac709a83f17d1daa61dc7e</anchor>
      <arglist>(const int *eqns, const double *alpha, const double *gamma, int numEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>enforceRemoteEssBCs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a389588dc8bf345808aa0069adfafb0be</anchor>
      <arglist>(int numEqns, const int *eqns, const int *const *colIndices, const int *colIndLens, const double *const *coefs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>initialize</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a59e50513f6112349a65661a4d8c21fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initLinSysCore</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab46688058f75941419594d07e920cc91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setLinSysCoreCREqns</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a8dd80338018654525bff4068e5bafa00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>unpackRemoteContributions</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa0dd7892c3ab7b353e5f7024f9100ac8</anchor>
      <arglist>(EqnCommMgr &amp;eqnCommMgr, int assemblyMode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadFEDataMultCR</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae36d18577bdbb344c3ff791315615e9f</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadFEDataPenCR</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a4e9f9d37e9c4398ac86189e6c743542a</anchor>
      <arglist>(int CRID, int numCRNodes, const GlobalID *CRNodes, const int *CRFields, const double *CRWeights, double CRValue, double penValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeNodalColumnCoefs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad4c1f992fa7cc1b7a90878024fc6b773</anchor>
      <arglist>(int eqn, const NodeDescriptor &amp;node, int fieldID, int fieldSize, double *coefs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeNodalRowCoefs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a4504e0fe8251fb28d05687a613dbe38b</anchor>
      <arglist>(const NodeDescriptor &amp;node, int fieldID, int fieldSize, double *coefs, int eqn)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>generalElemInput</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad787dccf28ef7ff1f4a1c722ae681e71</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>generalElemInput</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a106ed30e5cbeddad96440f5a3527c4b8</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn, const double *const *elemStiffness, const double *elemLoad, int elemFormat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalSendIndex</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a4c15269fd0ec4c9769c668b8d54d63ec</anchor>
      <arglist>(const NodeDescriptor &amp;node, int fieldID, int col)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalSendEqn</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>acd89e527287a57f155dd6f80b1bba528</anchor>
      <arglist>(const NodeDescriptor &amp;node, int fieldID, int col, double *coefs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalSendIndices</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab7dc34386ed2b0a4e2f6785abe00c932</anchor>
      <arglist>(const NodeDescriptor &amp;iNode, int iField, const NodeDescriptor &amp;jNode, int jField)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storePenNodeSendData</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a5dc9902eaaf2de2215f1e7d1894cacab</anchor>
      <arglist>(const NodeDescriptor &amp;iNode, int iField, int iFieldSize, double *iCoefs, const NodeDescriptor &amp;jNode, int jField, int jFieldSize, double *jCoefs, double penValue, double CRValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storePenNodeData</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad9bda2fd8291ca9f164ea7e4cf10f8d9</anchor>
      <arglist>(const NodeDescriptor &amp;iNode, int iField, int iFieldSize, double *iCoefs, const NodeDescriptor &amp;jNode, int jField, int jFieldSize, double *jCoefs, double penValue, double CRValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocElemStuff</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a736683af33414ebc8c28136f96fc4e58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resolveConflictingCRs</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad40cf62738c6b9c8148251331563a46c</anchor>
      <arglist>(EqnBuffer &amp;bcEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix_symm_noSlaves</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a73e0107b604a0c294b05c3b76b57df32</anchor>
      <arglist>(int numPtRows, const int *ptRowNumbers, const double *const *coefs, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToBlkMatrix_symm_noSlaves</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aeec9ebd768d7b3cc5fe65a432f51809b</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numBlkRows, const int *blkRowNumbers, const int *blkRowSizes, const double *const *coefs, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae3382b0111528a044d3bc145b97d7978</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToLocalReducedMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>abd48aad8a879b5cba1bb6050187e8aaa</anchor>
      <arglist>(int numPtRows, const int *ptRows, int numPtCols, const int *ptCols, const double *const *values, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFromMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>afd561087e6774b569c9d23c0f274331e</anchor>
      <arglist>(int numPtRows, const int *ptRows, const int *rowColOffsets, const int *ptCols, int numColsPerRow, double **values)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9fb0540182bcfe20cf0bea68b133ad2f</anchor>
      <arglist>(fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnsFromMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a61cc5dbbeaafb83124824643efedca52</anchor>
      <arglist>(ProcEqns &amp;procEqns, EqnBuffer &amp;eqnData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnsFromRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a5db1fb4c0c9ee36babdc7e7d7939add3</anchor>
      <arglist>(ProcEqns &amp;procEqns, EqnBuffer &amp;eqnData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad26ac2236f99aeca0a9ad2c1d06ba34c</anchor>
      <arglist>(int num, const double *values, const int *indices, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToLocalReducedRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad5f62c4b531e462b870ef22b48753b8a</anchor>
      <arglist>(int num, const double *values, const int *indices, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFromRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a6e7d6a5f557da9862497023ec9e1b1a3</anchor>
      <arglist>(int num, double *values, const int *indices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a71de07d854681796e1bcf70b8bd753a4</anchor>
      <arglist>(fei::CSVec &amp;vec)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getEqnSolnEntry</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a7a6d8cccd414f41dfadb76c63eaaf33f</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getSharedRemoteSolnEntry</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a21bd6e837f6149f9801c4ecb1db34725</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getReducedSolnEntry</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a8f9cd36b6b4ecdff0b92242724ba2311</anchor>
      <arglist>(int eqnNumber, double &amp;solnValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>formResidual</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a2f2cd2b60f1dae2affb48e581f1b7b8c</anchor>
      <arglist>(double *residValues, int numLocalEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getRemoteSharedEqns</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a4a699836ae7ea70a754431d91b6788b1</anchor>
      <arglist>(int numPtRows, const int *ptRows, ProcEqns &amp;remoteProcEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resetTheMatrix</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a0389ed8280801224c153021d918bffef</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resetTheRHSVector</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a476fd7e1f9aadb7ee380fb18ce9e2c9c</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleEqns</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a01e461a58043ac8e84e405e1fe5cd079</anchor>
      <arglist>(int numPtRows, int numPtCols, const int *rowNumbers, const int *colIndices, const double *const *coefs, bool structurallySymmetric, int numBlkEqns, int *blkEqns, int *blkSizes, bool useBlkEqns, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleReducedEqns</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aab60c551c885d1671628f94bac1f2f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>acbfa059e6df6270e5f6d32bd14e5cfcd</anchor>
      <arglist>(int numValues, const int *indices, const double *coefs, int mode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleReducedRHS</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9c1e961b2f6b63a1ab60173fa6ad7fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>debugOutput</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>abbf79e2636e53216aa1fd9f4ef3fd247</anchor>
      <arglist>(const char *mesg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createEqnCommMgr_put</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aeaddda8c301522ee886f209a96c8f404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>timesInitializeCalled_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>af5a75b742e004c8fb5542e7652d527c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearSystemCore *</type>
      <name>lsc_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aeb35c49782d57820e6f634bc37e35d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useLookup_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a594769aa087df9275be538534e35f6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>internalFei_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a34e3c47b71d9cf1043c7796b61cd87d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newMatrixData_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a63971df16b1a01b4f2d6d8922417a01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newVectorData_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aacfe2d40c09a57ea92bfe22c4a5e25ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newConstraintData_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9fb834c19cd234402481eb5044c45b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newBCData_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae8b50f46cbe8a500e3d3db565067fecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>connectivitiesInitialized_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a82dfa94d42b40f5c155c3ee51d7622c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstRemEqnExchange_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa25b1755498f99d075fce2966245cf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>needToCallMatrixLoadComplete_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a2799a57f49c346d15a1bdbc054691f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>resolveConflictRequested_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a6ffe48a865281f5972c8426f78c341e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localStartRow_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a5f5fb0cd6b23da5f4ee3b6cb374c96f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localEndRow_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa6f4ea62fcfb99a6d8b86e31258e2f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqns_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a17cc8161a5b9e65de8e429d4dd7e42ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqns_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a252a89ad37bf53eb9cc32a80ec2f1738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedStartRow_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa6435431b1de5a926ae742356898bfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedEndRow_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a75b998e6c4d835731fd6ff0997721997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReducedRows_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a834425d0731680168b6dbece5fada83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocallyOwnedNodes_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a0c51d87cc2a79a01ca721b5678fe7842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalNodes_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a24b2797e4f565a8da671bd54baf832ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalNodeNumber_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a328b43202c468e66505c7d6b14bcb7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockMatrix_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>af92d2cd43330d0ae25781fc2d4281ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>tooLateToChooseBlock_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a18434e72f7325b6d2f3ec352cd960644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqnBlks_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>abaeee862133c641e9b516f224c20d5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localReducedBlkOffset_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a607d6393c8bb931c257b3ada93880330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalReducedEqnBlks_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab1b118ef778d1aded9d1f3f103a0affb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterations_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a8e0e45d02116c695e0fb1e790b5dd1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRHSs_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aaf97a2ea379d4883f83f2ec7908117e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRHS_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a38b8ec921a4eadf4c01b27ecfac0a41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rhsIDs_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a69eb458f987509088b830360d456f2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a457610a01a4a3a1d4ecd660d16b05c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aba381f1345852e5f254a4e7a8c2a492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterRank_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ada41b9aa6b3b18addf984dafc6d5aafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SNL_FEI_Structure *</type>
      <name>problemStructure_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a50b22557c0d43e7ea1c71a86310e6d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matrixAllocated_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa37e96120c296a79e251e6ce2193da12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rowIndices_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a5e0b62fbd7d834f2ab2489742e410471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rowColOffsets_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a0ca9b4bae692b9fd4dc7d7dfb5809c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>colIndices_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a28b53910947476767872ab0c62c77d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kid_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a482b51e186eae1f89a1e61b4284811e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kdi_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab50e00dc30c04e96548e79cf04f31594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kdd_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9561c6da76cc3121a9440d0328c2044c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrD</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aa25d23c6973300f32ffab37f53a6b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKid</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>abdf949262640a8fc0944b25159988b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdi</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>af0f409f29dad20ea9ecc76a456a0a15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdd</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ac9ac339210d319636f4682683e8e2c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat1_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a86a54a19e5f4cfc00a99c3c8f786578d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat2_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad74d6ab7f87616b669653123669c62df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>fd_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae2a2779bf9644fe779e3b75f773e56fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>tmpVec1_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad95e7f32cf6971875cb06c7ed87eec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedEqnCounter_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a21bd0d2a99eed3ed04481a5dcd45ad2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedRHSCounter_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab9e70cf5c4b015de40902f129567d029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rSlave_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a18afc47fae7e2a23bea0b02c5d87b674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>cSlave_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad3c7ee44d5969a9ca8cc7349a7e20992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeIDType_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a5dead7b594d4a89ee36ce3de8c842645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::DirichletBCManager *</type>
      <name>bcManager_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ad379ffb074cd0b0383f181b65c0df7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>eqnCommMgr_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a13e19d8d564ad2f0252b0c692d6ae4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>eqnCommMgr_put_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a33bb44bf937aa961fcca6ec6161a3f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxElemRows_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a6dff215f83bd05dbddfdb58ba1055c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>scatterIndices_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ab8d86fe14bc2359c6908e021c8dbbf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>blkScatterIndices_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a9c091cbba9443d9e79aa2f42905ca586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>iworkSpace_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a53306117d5f9e97de219667eb576110e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>iworkSpace2_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>ae336d4481fd296a8fd33c8081f8a1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>dworkSpace_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aea31a62b72f02a2c3658ff4f5bfda01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const double * &gt;</type>
      <name>dworkSpace2_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a4da289c79469f4d3991d9521109e0b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>eStiff_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>a65c3d4873990a2bc2fc31da7e0f285b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>eStiff1D_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>af13ea0c473c558d0fbe9fc25fb4948d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>eLoad_</name>
      <anchorfile>classLinSysCoreFilter.html</anchorfile>
      <anchor>aecfa22ac16ea582caaa5552203e83617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>loadCR</name>
    <filename>classloadCR.html</filename>
    <member kind="function">
      <type></type>
      <name>loadCR</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>ac9d07b099da4dedcb15ae1ce4472ec3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~loadCR</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>ae5fb4f50c4e6e67575e7a7c1fe9bfe55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>ad5c1bbb04e82160cba92241434fba296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>a2b111d866b0a9dcc5a51142347b51626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldIDs</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>ada71ad3d10dd272f89c71fc9c1ea5d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fieldSizes</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>aa73c169f4d91c9eee11045735fd96373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>weights</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>ac29425f1ead58bce30b501c95fc416f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>CRValue</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>a2243afcf441296af9a2943cb0548c8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>penValue</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>a21f2d14c26803cb3c6ecba6fb0aa2760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CRID</name>
      <anchorfile>classloadCR.html</anchorfile>
      <anchor>a8f1097132fc4fc2a9e26414bd93de3b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LogFile</name>
    <filename>classfei_1_1LogFile.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogFile</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>a266ec4b8b64599f22f82e9d51760af2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openOutputStream</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>ab07527f7f02d9e4d26f5581ec34e9f33</anchor>
      <arglist>(const char *path=NULL, int nprocs=1, int localproc=0)</arglist>
    </member>
    <member kind="function">
      <type>FEI_OSTREAM *</type>
      <name>getOutputStream</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>a3c52bf613403eadc341527d8c260c19c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeOutputStream</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>a0c0dba1d102ddca409199a180252439a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogFile &amp;</type>
      <name>getLogFile</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>af913d424f29f6fb4f4cfdb9170a088fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LogFile</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>aee809f2e8794f68951ce89cd0ca754c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FEI_OSTREAM *</type>
      <name>output_stream_</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>a48b84e6fe56193ca9d009131c04fd0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>counter_</name>
      <anchorfile>classfei_1_1LogFile.html</anchorfile>
      <anchor>a186b9e60308105be8a89ff4035dd368d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Logger</name>
    <filename>classfei_1_1Logger.html</filename>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>aa2cc7e24b18c6b3aff7106cbbc3a3b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Logger</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>af76bf36bc419fc480b01ff2c0fbf4ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLevel</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>af98da33275349f5536457df4d88e9686</anchor>
      <arglist>(OutputLevel olevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogID</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>aaa9cfad56f75a113ebdfb853291b440f</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEqn</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a9784345f1594c78d30d586e39a7e2ead</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLogID</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a23f32107104302d16da8a2515ce1c5d6</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLogEqn</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a3d5bf1f76e168bd87c80ebce05afac14</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt; &amp;</type>
      <name>getLogIDs</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>ab35ec30e85f51530da23cdfaeea8c4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt; &amp;</type>
      <name>getLogEqns</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>ac4bd8db40a15be3c5c362e57b4a8b57f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputLevel</type>
      <name>output_level_</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>ae0ea8f8f9a2dd1fcb4c06ad8d9201401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEI_OSTREAM *</type>
      <name>output_stream_</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a39801b1625900c2944d1f1650b20e87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>logIDs_</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a4bb4fe908297c8239ae165506af61571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>logEqns_</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a55aef8435b6f4be35ad70d3a247a133e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Logger</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a11bfb88c53a69c9b03814ed86c210b32</anchor>
      <arglist>(const Logger &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Logger &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1Logger.html</anchorfile>
      <anchor>a344f916a12a95975f19aa75a81977d14</anchor>
      <arglist>(const Logger &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::LogManager</name>
    <filename>classfei_1_1LogManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogManager</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ac057928f904cf6b6018582417fd6824b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputLevel</type>
      <name>getOutputLevel</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>affc0ffed1a4df5904421916254f04314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLevel</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>a4beb042571c43fcbac3e1e32709d110d</anchor>
      <arglist>(OutputLevel olevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLevel</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>acf0ef5e8970f4cd20a296f990f323e57</anchor>
      <arglist>(const char *olevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputPath</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ad8aefc6426335aa64cf08b7a95a56a75</anchor>
      <arglist>(const std::string &amp;opath)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getOutputPath</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>a8dc65ef1ea4174ead0f26ceba7ad9c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumProcs</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ae03409dab167f4717e36769a7852df3a</anchor>
      <arglist>(int nprocs, int localproc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogManager &amp;</type>
      <name>getLogManager</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>a6a6ad2603cd29a38b6471bec83df59d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LogManager</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>a562a14aafa5f3be24a5868d5a938c3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OutputLevel</type>
      <name>output_level_</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>a59efaa1873b2a3cf223d235cef825378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>output_path_</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ae9719a706a38a1c196cb1dc182f4167b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ad125a9a4fbd0dda8fddc9eee66fe8cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1LogManager.html</anchorfile>
      <anchor>ac2a6665cd17d034f81d1b713fef97a16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Lookup</name>
    <filename>classLookup.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lookup</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a1ceeae3b4f9680502a7f987f6d57632d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumFields</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>aaa42a7c2b95938d3404caf0021e05f2a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldSize</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a68cadfa0fbd7898df13f0b4d637e04f9</anchor>
      <arglist>(int fieldID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>getFieldIDsPtr</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>af2893d4c6d9720f8afce8ed2494a6d3a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>getFieldSizesPtr</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a1d662d8516ea87b176b7db13b3b7713c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>addc137ad9027b88b45c2599bc5d5cbbd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const GlobalID *</type>
      <name>getElemBlockIDs</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a863e67be995d4c46062f4ea6fd1251a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getElemBlockInfo</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a8ea30d911f735a846366910d8c21d207</anchor>
      <arglist>(GlobalID blockID, int &amp;interleaveStrategy, int &amp;lumpingStrategy, int &amp;numElemDOF, int &amp;numElements, int &amp;numNodesPerElem, int &amp;numEqnsPerElem)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>getNumFieldsPerNode</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a5220498d0d1fb4e275bb4785297fccc8</anchor>
      <arglist>(GlobalID blockID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *const *</type>
      <name>getFieldIDsTable</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>af864c6273e7b5ed4933a5c2f5b9398da</anchor>
      <arglist>(GlobalID blockID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getEqnNumber</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a10cdd7f4ac482c9fef05a9d0eb653371</anchor>
      <arglist>(int nodeNumber, int fieldID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAssociatedNodeNumber</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a1585c5599db7897590db1237ab01c1b4</anchor>
      <arglist>(int eqnNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getAssociatedFieldID</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>af7112c327052118238b393a4dcff9a88</anchor>
      <arglist>(int eqnNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInLocalElement</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a93f4593fd53bf0350a7f6ad0a60757ac</anchor>
      <arglist>(int nodeNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSubdomains</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>aeffc67a5eb920a7653261f69701077a8</anchor>
      <arglist>(int nodeNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int *</type>
      <name>getSubdomainList</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>acd5322d79a9129bda409c669e0cfd767</anchor>
      <arglist>(int nodeNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>ad97d6cb92a4e411cb90a941fbde239c0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>getSharedNodeNumbers</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>af32dadbb8633d1a7240127187025d465</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>getSharedNodeProcs</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a3ad26c5bf13daa39274c8309f2386a35</anchor>
      <arglist>(int nodeNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSharingProcs</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a0633f69b7a9db442811c27de4cd7b4da</anchor>
      <arglist>(int nodeNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExactlyBlkEqn</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a5e60b29c868518bc6c7853ac7cf1f1e6</anchor>
      <arglist>(int ptEqn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ptEqnToBlkEqn</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a485173d7d3b06f37c2a5bc7d36c4d9bd</anchor>
      <arglist>(int ptEqn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOffsetIntoBlkEqn</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a7673c448e46c3370bb31f3c0ec7c68d1</anchor>
      <arglist>(int blkEqn, int ptEqn)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBlkEqnSize</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a360042b747a9c1d9ef09ff13c2a0055a</anchor>
      <arglist>(int blkEqn)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Lookup_Impl</name>
    <filename>classfei_1_1Lookup__Impl.html</filename>
    <base virtualness="virtual">Lookup</base>
    <member kind="function">
      <type></type>
      <name>Lookup_Impl</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a750d09b64db05260157ca20bbc4509cb</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matGraph, int nodeIDType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lookup_Impl</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a1e6930098f2467a06fc36e09656bf668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a1eef9d5fca49a07b8ecb1b153d7a43e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldSize</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a4016603044b095dde7a684b3b6039d1f</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldIDsPtr</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ad2bcca8ea17e7de84fc90e118d8609b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldSizesPtr</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>abc5a0be9253236fa97d334243cbd903a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ad9cc89c1340fc6049830463fe3c36092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalID *</type>
      <name>getElemBlockIDs</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a798867a1a6a0f8cad59e11876e682940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getElemBlockInfo</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ad1f671d72beed57bc2e59e85da0ad356</anchor>
      <arglist>(GlobalID blockID, int &amp;interleaveStrategy, int &amp;lumpingStrategy, int &amp;numElemDOF, int &amp;numElements, int &amp;numNodesPerElem, int &amp;numEqnsPerElem)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNumFieldsPerNode</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a2535edd8f35494468ff58a9195d844fb</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>const int *const *</type>
      <name>getFieldIDsTable</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a6c0fe6978ed5fad9a411f1cc81284c63</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumber</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a2bd514750a9100726f4ba12ec0a5f298</anchor>
      <arglist>(int nodeNumber, int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedNodeNumber</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a6dcce520894ce028c8b46f802583b551</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedNodeID</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a65c26f6698b4b4369cdf0f444a208e10</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedFieldID</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a1dd646189a7979fa3db9b87ebbba1e23</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInLocalElement</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a1783b4787bd8f34a6d334cc94a93159a</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubdomains</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a89c9e5afa3e495808e025341591d733f</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getSubdomainList</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>adaf821013cb87fabb62a077735ec8223</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a054fd9bc3cacdf075ef4ff94d52c0e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getSharedNodeNumbers</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a043d57eaf7188f0fda1a986312b65406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getSharedNodeProcs</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ac2435fe445b4c4b8cf0b1870c7a4eb7e</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharingProcs</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a327beb347515ce3b4ddeb2382d27c41a</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlyBlkEqn</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ad1296fc52a8179e1949825352ca44e27</anchor>
      <arglist>(int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ptEqnToBlkEqn</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a0324558fd9b041c5195661bf32c4654e</anchor>
      <arglist>(int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffsetIntoBlkEqn</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a01aea76bc032379c200d02900bd867e4</anchor>
      <arglist>(int blkEqn, int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnSize</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a2793fd35255ef5722f90809a9e07f2dc</anchor>
      <arglist>(int blkEqn)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>buildDatabases</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>adfd32f3ceec75dba32b95114c518ff77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matGraph_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a587e37000ce33032e9f2d34d0ba334f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::PointBlockMap *</type>
      <name>ptBlkMap_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>afc71d29179871f12e3e35b0591410365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vspace_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a62f9dbaa082482e1fea21f7665b500ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeIDType_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>afb26177a3076b67dbcddaf2684ebebb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::Record&lt; int &gt; * &gt;</type>
      <name>nodenumPairs_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>abc16ab07256710fd8551a38e1406c53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::Record&lt; int &gt; * &gt;</type>
      <name>eqnnumPairs_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a0eea04ce85bfd72dbc14e88a8dd06b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, std::vector&lt; int &gt; * &gt;</type>
      <name>nodenumSubdomainDB_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a40300f6338d3608e4bfd8636264abca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>databasesBuilt_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ad9043ef031323b511e2e1478dab533cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldIDs_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a77280da2b585736352aa46be7618b2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldSizes_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>ab48fcc8fb339b0f6554cd884fe1ab3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>elemBlockIDs_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a56ce638d2318e83fc253587c44ee3ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const int * &gt;</type>
      <name>fieldIDs_2D_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a94c6ecc08c4292cf61379bfd51aa92a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>workspace_</name>
      <anchorfile>classfei_1_1Lookup__Impl.html</anchorfile>
      <anchor>a7137e9dc439f17587c5f3d2b1c6e241f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::MapContig</name>
    <filename>classsnl__fei_1_1MapContig.html</filename>
    <templarg>VAL_TYPE</templarg>
    <class kind="class">snl_fei::MapContig::iterator</class>
    <member kind="typedef">
      <type>int</type>
      <name>key_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a4f69913f0214cd1f99e01bc7a5fa222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VAL_TYPE</type>
      <name>mapped_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>afd185323f98591263d526de8318bfcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int, VAL_TYPE &gt;</type>
      <name>value_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a92697585cfe2b18b49fb0b28f1421e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a19349735ea3704393e0565cc40ef2f9d</anchor>
      <arglist>(int firstKey, int lastKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>af8220082fa8f235bde2b68e913081e36</anchor>
      <arglist>(const MapContig&lt; VAL_TYPE &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a1ceffffea3dfa7b7326efe9f5500d326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a404c0278a5b0d2c092838c6c682c5b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>end</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>acc0e7d96a5e6545cb5ed1c230660ff8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>acbca8d095cfe36e5b92e97087366e785</anchor>
      <arglist>(value_type val)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>aeca27e997223ee92171bfec585ea24d4</anchor>
      <arglist>(iterator &amp;pos, value_type val)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a8b60436f0e943310c5cf95784f48403b</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a8e29217ca97e31810bcedd358e516f32</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a31296f236f49f5888d4ca737266652a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>keys_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a53206d1c51d08250df1943335cc39acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>keysPtr_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a6eff18ec73ca3e21e96cb1809db07b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iterator</type>
      <name>m_end_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>af4ea95f242c4e221ed3033feb8193386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; VAL_TYPE &gt;</type>
      <name>values_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a2c8966c0768597b421b9a31aed9929a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VAL_TYPE *</type>
      <name>valuesPtr_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>ab28934bece3a946c78a0b4fbbbc93291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>first_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a0051a9156bccda08bd2f38d0501898f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>ae4187e9986fea24be9f25b0a3fad9699</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a67171474c4da6cc8efe0c7fafefd2b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;</name>
    <filename>classsnl__fei_1_1MapContig.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>key_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a4f69913f0214cd1f99e01bc7a5fa222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fei::ctg_set&lt; int &gt; *</type>
      <name>mapped_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>afd185323f98591263d526de8318bfcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int, fei::ctg_set&lt; int &gt; * &gt;</type>
      <name>value_type</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a92697585cfe2b18b49fb0b28f1421e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a19349735ea3704393e0565cc40ef2f9d</anchor>
      <arglist>(int firstKey, int lastKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>af8220082fa8f235bde2b68e913081e36</anchor>
      <arglist>(const MapContig&lt; fei::ctg_set&lt; int &gt; * &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MapContig</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a1ceffffea3dfa7b7326efe9f5500d326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a404c0278a5b0d2c092838c6c682c5b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>end</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>acc0e7d96a5e6545cb5ed1c230660ff8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>acbca8d095cfe36e5b92e97087366e785</anchor>
      <arglist>(value_type val)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>aeca27e997223ee92171bfec585ea24d4</anchor>
      <arglist>(iterator &amp;pos, value_type val)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a8b60436f0e943310c5cf95784f48403b</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a8e29217ca97e31810bcedd358e516f32</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a31296f236f49f5888d4ca737266652a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>keys_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a53206d1c51d08250df1943335cc39acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>keysPtr_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a6eff18ec73ca3e21e96cb1809db07b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iterator</type>
      <name>m_end_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>af4ea95f242c4e221ed3033feb8193386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::ctg_set&lt; int &gt; * &gt;</type>
      <name>values_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a2c8966c0768597b421b9a31aed9929a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::ctg_set&lt; int &gt; * *</type>
      <name>valuesPtr_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>ab28934bece3a946c78a0b4fbbbc93291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>first_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a0051a9156bccda08bd2f38d0501898f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>ae4187e9986fea24be9f25b0a3fad9699</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1MapContig.html</anchorfile>
      <anchor>a67171474c4da6cc8efe0c7fafefd2b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::MapTraits</name>
    <filename>structsnl__fei_1_1MapTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static MAP_TYPE::iterator</type>
      <name>lower_bound</name>
      <anchorfile>structsnl__fei_1_1MapTraits.html</anchorfile>
      <anchor>af8a00e69337e6b491b928bcbb6904618</anchor>
      <arglist>(MAP_TYPE &amp;map_obj, typename MAP_TYPE::key_type item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>insert</name>
      <anchorfile>structsnl__fei_1_1MapTraits.html</anchorfile>
      <anchor>a0ad35d71508c021a3becf267ad1491ab</anchor>
      <arglist>(MAP_TYPE &amp;map_obj, typename MAP_TYPE::iterator &amp;pos, typename MAP_TYPE::value_type &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Matrix</name>
    <filename>classfei_1_1Matrix.html</filename>
    <class kind="class">fei::Matrix::Factory</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matrix</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a796d5beef4f6195110b03bfb3bb28f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a3f8d4159470a80746421c1e9e7fde9b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a8fd192a481c9119e57f39b9e98e7c4d0</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>getMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>aa3f31b446b898dd787870976418fd12c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>aa6ad6cc2e179a725087cf90c20ff90d2</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getGlobalNumRows</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a891e980107b400a8d8cd83d39971ffe9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>aefa5e8712bd2dc0cec0c70a1c057fe7a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRowLength</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a8236017ef04aeee3089b424388cf1737</anchor>
      <arglist>(int row, int &amp;length) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>aa7024ea769c8c39052c8c34d08baad91</anchor>
      <arglist>(double scalar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutRow</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>acf2e21adbbf7c3ecb7bf90464ff84b70</anchor>
      <arglist>(int row, int len, double *coefs, int *indices) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a95ed3bb4b585bcb835262630aa5a16fe</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a348c2d305dcf6f10b1d435e46a4a5bfc</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>acf3367f183eecfcc8326815ee481c3ea</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *const *data, int format=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a8eaeb049cbf56e1fc151b57177c7bbfd</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *data, int format=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>ad88fa61d00f990afea7b8f48c728da6f</anchor>
      <arglist>(int blockID, int connectivityID, const double *const *values, int format=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>abea36a52690fb2a56d79d530362017f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>multiply</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>ad34466a5c95be15ee9ed2aba21647d6f</anchor>
      <arglist>(fei::Vector *x, fei::Vector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a4920bae1670e4e9eeb14851b2a837538</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a66968d413efe68b68d080780c99b38d5</anchor>
      <arglist>(bool accumulate=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a629e42e44d772b02ea5cc02770eeb49f</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a1eba1cfd44158d98b02b7ca0fc3a6817</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usingBlockEntryStorage</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a4e2f7d7569f4ebfcbb218115a5a832a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>markState</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>ae80e74f7c0d023042fc8718aa97d7613</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>changedSinceMark</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a8f071d1519f373ee3534fdb972f16e37</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getBeginPointer</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a950e18b9a1f29e1b3078bfbb23fd8a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOffset</name>
      <anchorfile>classfei_1_1Matrix.html</anchorfile>
      <anchor>a82b05fd371f929369ecdf0249b51b6ab</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Matrix_core</name>
    <filename>classfei_1_1Matrix__core.html</filename>
    <base protection="protected">fei::Logger</base>
    <member kind="function">
      <type></type>
      <name>Matrix_core</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a59166089a70d2cdccf3c7f3be20bc683</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numLocalEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matrix_core</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a799f98fc4578be74462cd38aee58e155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>giveToMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a2bc93e363c7dd599190740033b07a2ba</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRHS</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac2f4539d041d3aa4618e7ae4828f731f</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Vector &gt; rhsvector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlaveInfo</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a654d5f364ff03a290fd6d539d70dd234</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>getMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ae3825a0ddc65ed8d74f188bd1772305f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FillableMat *</type>
      <name>getRemotelyOwnedMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6a70251e0b7edec66135cf4a36af944b</anchor>
      <arglist>(int proc) const </arglist>
    </member>
    <member kind="function">
      <type>FillableMat *</type>
      <name>getRemotelyOwnedMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6ca8aaee516276466b59c39da84aa3c4</anchor>
      <arglist>(int proc)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, FillableMat * &gt; &amp;</type>
      <name>getRemotelyOwnedMatrices</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ab895b94a5a8d603618e2f6755bc61dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar_remotelyOwned</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6db4d36f712ddca75457723deede4328</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqnComm</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ad978a44f1e70d58a15c32f1e2a9e65fd</anchor>
      <arglist>(fei::SharedPtr&lt; fei::EqnComm &gt; eqnComm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyTransposeToWorkArrays</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>aa4f1658b91cdc52a5a2a4c6a25fa37af</anchor>
      <arglist>(int numRows, int numCols, const double *const *values, std::vector&lt; double &gt; &amp;work_1D, std::vector&lt; const double * &gt; &amp;work_2D)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac1c9068e1b3e81527402967e4958b816</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>giveToUnderlyingMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>aa36d1a2934e40dbca4ccf0701ef027d8</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>giveToBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>af4072bb74a7fc40cf3c0ddf8861c4a27</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>giveToUnderlyingBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>aeda20bb7491bfd06136ec8397c0b5cac</anchor>
      <arglist>(int row, int rowDim, int numCols, const int *cols, const int *LDAs, const int *colDims, const double *const *values, bool sumInto)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a517bbba00fee1d747475d8b7926a825c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a03aa5e6f8b3e596fb846606fbe7242f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a947ecb41254c4e8df2ab0743bc9d3502</anchor>
      <arglist>(bool accumulate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>af3a8328d8dd82cf4162cd23d5baf8f24</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>copyPointRowsToBlockRow</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a2e90b276a38e432e6c568e6391e8390a</anchor>
      <arglist>(int numPtRows, int numPtCols, const double *const *ptValues, int numBlkCols, const int *blkColDims, double **blkValues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>convertPtToBlk</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a2a46cf0e0d74cb02c2c675ab0faa5614</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, int *blkRows, int *blkRowOffsets, int *blkCols, int *blkColOffsets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MPI_Comm</type>
      <name>getCommunicator</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>adfdcb3775e0e9149571ba73694ed4298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a7cb913b9efe55c6621c45f4a0fdb74f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a4487647e5f90a4c2ecd0c52a46896077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>globalOffsets</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a22873ad1ea346b5b39969c3ea0d4eacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>globalOffsets</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a7785b13e511dc4de4f04b2b829d03f33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>firstLocalOffset</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a3f07726b79420be241e24416f1323a03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>lastLocalOffset</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a61468bd3d105a2c5b8c9ada2630a4e0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numProcs</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ae54b5a41f45f8837602c04ddaf6c6e04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>localProc</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6bdc370254f1e2ebbc6bbc19f11f9fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a7263f2485fe1dcc4e311164738fb839e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>aadc19f9056b40585d49cfe4a4a7ea84f</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveFEMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a31e5768c6584b3199008b086fc3319cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFEMatrix</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a2838f9458cef913418b487931fd21b3b</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getOwnerProc</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a21e28bebc7e3025ff625fdd7c13b4754</anchor>
      <arglist>(int globalEqn) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ab1680013b678792b14cbc5f9d5d37028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>work_indices_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a1953f4eef925e58d23272c83346933f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>work_indices2_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a0f19cbf91e353952ede119e179e9e4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>work_ints_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a0063ac2026fc55627e194e5ad958c55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>work_data1D_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6fc47a61ff75214af5573a5b58955987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const double * &gt;</type>
      <name>work_data2D_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ab4c73231d95beef744927344ee153af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::EqnComm &gt;</type>
      <name>eqnComm_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac38ae3597eeba9b308193d06807547c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>rhsVector_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a5080fdc186cba22663f77a6e67fa8524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>adaae5ef4fc8c1551282a1a0b9c6f8dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ab0a8ba5a0fb8b1ae7830eb1a66f1800c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac81a760849069b9a09690a510c7d841b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a3b4f7fa0bd2ca9a8bd6f341fc3a6acff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a5738972ee9f567b3dc051edd59c1435d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, FillableMat * &gt;</type>
      <name>remotelyOwned_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>addbfc0fe844ac44052783c98c30e374b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FillableMat *</type>
      <name>remotelyOwned_last_requested_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>acac82c152c573115020add587c62c4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sendProcs_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac5d9a7e1f39362e79339b559487a8b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recvProcs_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a670592cfa069c4c567b65e63eedd9db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; char &gt; &gt;</type>
      <name>recv_chars_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a6f7980aec86f5239edbb49b6c2c32f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; char &gt; &gt;</type>
      <name>send_chars_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a3910a61b26a627c5d2e3b7695549b295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sendRecvProcsNeedUpdated_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ac3458dc56aa666d00981a941f2218a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>proc_last_requested_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>afd81ad2da98e836eeec2b9bc5d2839f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveBlockMatrix_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a639838e4b153fc6bb7df5690f63996fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveFEMatrix_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>ab3d9d05183e1ffcd4ccf615dfb2a698f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalOffsets_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a7f32e04d2cb977104bead6818b00bb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalOffset_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>aee5dc7bbb6a1ab9bc14a15a709a6b923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalOffset_</name>
      <anchorfile>classfei_1_1Matrix__core.html</anchorfile>
      <anchor>a142e1b85b2d16947f832daea3036d56e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Matrix_Impl</name>
    <filename>classfei_1_1Matrix__Impl.html</filename>
    <templarg>T</templarg>
    <base>fei::Matrix</base>
    <base>fei::Matrix_core</base>
    <member kind="function">
      <type></type>
      <name>Matrix_Impl</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a3d1e79cd41efa2eb250eb737510074fb</anchor>
      <arglist>(fei::SharedPtr&lt; T &gt; matrix, fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, int numLocalEqns, bool zeroSharedRows=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matrix_Impl</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a2e219b71e1c78ef530ad37a262ba0538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>aabe580fda669d40e8e0658e112ce3429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a8f848bf44829c16ff2d22cc573a47551</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; T &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a1986db91998e64c16298c06e6540b6df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const fei::SharedPtr&lt; T &gt;</type>
      <name>getMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a0f0333ef2ddfb8188f5366e733b01a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>getMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ae9cd11365477305c4e8bdb4e14230684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ac1ec1511d8edd875deafa2db2508e458</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumRows</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>adfb6d0a9d35a3d48b89738b74736be2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>add63ef3551b44b472eec70fe35bfe5d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a64849c8298d7defe1e075f3ee29d2d83</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowLength</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a7cf863ac056c0854b5a911ab10e2ec17</anchor>
      <arglist>(int row, int &amp;length) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutRow</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>aea04ec3ddc8fa1a7240cbf0b28671113</anchor>
      <arglist>(int row, int len, double *coefs, int *indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ac6b9c5ea93516ea5b5c04a26f7133fb9</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ab93c87323d0dcbf69b03df9b09c21be3</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a594f7c1cddd5f06627eca1b349f589df</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *const *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>afa65898d971b6803ab33c13b7a027f4d</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a7a2c1d444c40665b7dddf4e74cc5e602</anchor>
      <arglist>(int blockID, int connectivityID, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ab46d13d908ca53e7011228ef0bf55dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>multiply</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a052ab72239ff7ecaacf27e350e9bac84</anchor>
      <arglist>(fei::Vector *x, fei::Vector *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>addaaef890828fcab19dcd8d23ee4f6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a069a531de69ca7b2701642d12c371975</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ad8c6cafa1d68da8e24bb69340e133307</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a0556366c9cfbdc512a7712964b8ef4ec</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingBlockEntryStorage</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a67e8ad46f9bfcb38ffef8aa66f2003e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>giveToUnderlyingMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a3a42b2ba618e908a8032f12831549f8e</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>giveToUnderlyingBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>aec6b94567fbe293fb943c04426955205</anchor>
      <arglist>(int row, int rowDim, int numCols, const int *cols, const int *LDAs, const int *colDims, const double *const *values, bool sumInto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markState</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a28ab730c1d9d5d32f425a79e17695217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changedSinceMark</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a6c8f542cca8913245c6c093d8c27e4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBeginPointer</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a4a474d040028074eca31fbc76c24c0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffset</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a24ce92e17be38e6006dcc3f8173b5dab</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ac0013536f39e6548c23454609fcb43ac</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToBlockMatrix</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a86900e5d85e72ebc55310cd86e842f35</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; T &gt;</type>
      <name>matrix_</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>a163fb8249bc9734d96aff00ceac199c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>globalAssembleCalled_</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>aa8ce705d18d6ff024b98e0dc278865bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>changedSinceMark_</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>adad3f535591b2fed7855166d014aa209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1Matrix__Impl.html</anchorfile>
      <anchor>ab5f3ed92ddbc089c78df8d5a9bdb7cc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Matrix_Local</name>
    <filename>classfei_1_1Matrix__Local.html</filename>
    <base>fei::Matrix</base>
    <member kind="function">
      <type></type>
      <name>Matrix_Local</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a20d2a217da246a56794b0e30f6047128</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, fei::SharedPtr&lt; fei::SparseRowGraph &gt; sparseRowGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matrix_Local</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a003fbae2ff21b4499e5c3c0fd3c0146a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a3fa9fa1037730edfd93beed0f9f28e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a43a5db430a6dda4d057db9f58faccc4c</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a34f90deee944e91da2a15d0a702e311c</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>getMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a494ba687c4d5dbf5589340b66c1b2731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a258f10df17b5128c3b05c26078069a28</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumRows</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a7ee6300500abf90ff74d32087c8a846b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a10f208e856acc4e978ced5a51966a377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowLength</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a01d4ecc05889b05a9755ced117d45ced</anchor>
      <arglist>(int row, int &amp;length) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>afa040a9034e5c32560e93bde45cbd666</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutRow</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a6bcadbd01a27a3ec6a203896112da5d2</anchor>
      <arglist>(int row, int len, double *coefs, int *indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>aa4ccbd60f5213366414be3a84d436697</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a07b5655481ec60b4f22cc86efdf0d399</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a4264d251ffa5556dbb614616fbbefa0c</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *const *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a6e8e7e76696a046f35f20469b2a0b662</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>aa7924f913ff45c239f9dc276574b888a</anchor>
      <arglist>(int blockID, int connectivityID, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a107fbfc6e740aadcf5dd9d6e6c324ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>multiply</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a92533198e82744dd82d3b153ac283115</anchor>
      <arglist>(fei::Vector *x, fei::Vector *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>ab67452895b00e9da636867493d2e1647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a3bc8b99af8e1e2a38670c3fabba5e972</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>ac4bad6099b026db9dc77da1d879d28e6</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>ac6d5a7eea9945218028a6be7581675b9</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingBlockEntryStorage</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>ad0c0ddd44e119cfc04a7f120cf3e6e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markState</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>aba5f35ae4e1fe5445fbab15cb4ba0e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changedSinceMark</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>af9458d2d94b13176ca1fa8b926514456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getRowNumbers</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a2acfbd16ab2773cff0beb04c36695c4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getRowOffsets</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a21cb8b769523cacfc306b229f0f30703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getColumnIndices</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>ab97e4b8c7d266127cbcdc7b5fb798580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getCoefs</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a9b5406554769e677983e4ffc35abce5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>create_Matrix_Local</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a9edff1f992829295f5dcd0126c647393</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph, bool blockEntry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getRowIndex</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a7a7a54c2b61f3d02c01ed869a5552f6f</anchor>
      <arglist>(int rowNumber) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a76a742ba63dda7c4746134cfe18c25af</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a164ce0becf6ce07614eb546c607485ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>sparseRowGraph_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a8391247c635f9e9d1235cae53b6fe16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>coefs_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a06659ebfd6e2b37804e8b80101bc7d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>stateChanged_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>adfbbf0fa600967d2dae30b5d91142af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>work_data1D_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a5bdb835b70de336d17bc36106aa0b426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const double * &gt;</type>
      <name>work_data2D_</name>
      <anchorfile>classfei_1_1Matrix__Local.html</anchorfile>
      <anchor>a20a156f203d155743d71d1aac9e1c808</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MatrixGraph</name>
    <filename>classfei_1_1MatrixGraph.html</filename>
    <class kind="class">fei::MatrixGraph::Factory</class>
    <member kind="enumvalue">
      <name>REDUCED_INDICES</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740af5415328f24a7a0bb4436892e4e9deb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNREDUCED_INDICES</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a7f82c82100c0421b95f1c57fb374f3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_ENTRY_GRAPH</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a72122e8b62b7ed8b8243091f6dacad05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ENTRY_GRAPH</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a8b5715f4fb4237e7999a25bd03d736ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REDUCED_INDICES</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740af5415328f24a7a0bb4436892e4e9deb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNREDUCED_INDICES</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a7f82c82100c0421b95f1c57fb374f3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_ENTRY_GRAPH</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a72122e8b62b7ed8b8243091f6dacad05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ENTRY_GRAPH</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe35c435b4fdea449ec6aa0bc9c41740a8b5715f4fb4237e7999a25bd03d736ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixGraph</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a97946927434bbf17853e74b1a96d1142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameters</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>aefe7ef1dcaedc70e840e6469ca355cfd</anchor>
      <arglist>(const fei::ParameterSet &amp;params)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRowSpace</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>af9a5214723d465812d4a1c3891221a09</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getRowSpace</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ae59b58a72d6ba8a5708afa48b77802e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setColumnSpace</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a0245032cf2c2fec688499328e28faa4e</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; columnSpace)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getColSpace</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ac42d895989a0566457edf71b7cfac840</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a17f2eaeeddd2ced7a3ae63a172029901</anchor>
      <arglist>(int numIDs, int idType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a5fc2aca28dd9410df24fa35c0d1e121c</anchor>
      <arglist>(int numIDs, int idType, int fieldID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abd94a38e337ad299cbfb3e9bb94acf24</anchor>
      <arglist>(int numIDs, int idType, const int *numFieldsPerID, const int *fieldIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abe5879aa66289ac49b11d0793db919ac</anchor>
      <arglist>(int numIDs, const int *idTypes, const int *numFieldsPerID, const int *fieldIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>af804b2ce89802ac0587c5ca9a502033d</anchor>
      <arglist>(int blockID, int numConnectivityLists, int patternID, bool diagonal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>acfc49e01d246a2678191aa7721bb08c1</anchor>
      <arglist>(int numConnectivityLists, int patternID, bool diagonal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a828ed6ebd5db364483125ac494a175c0</anchor>
      <arglist>(int blockID, int numConnectivityLists, int rowPatternID, int colPatternID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>aa45d1d239313c0f7bda2822159e5ee5e</anchor>
      <arglist>(int blockID, int connectivityID, const int *connectedIdentifiers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a68784152dfb2b09b9c4df01387d153ef</anchor>
      <arglist>(int blockID, int connectivityID, const int *rowConnectedIdentifiers, const int *colConnectedIdentifiers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a266c4e702acbe52b6e9edb64e025b091</anchor>
      <arglist>(int patternID, const int *connectedIdentifiers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ac6f68e3128440230ca1791f8a8e202ed</anchor>
      <arglist>(int rowPatternID, const int *rowConnectedIdentifiers, int colPatternID, const int *colConnectedIdentifiers)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a0cb8c9b385750ae160acadb135f40b38</anchor>
      <arglist>(int idType, int numRows, const int *rowIDs, const int *rowOffsets, const int *packedColumnIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ad23a98df3107fbd600ebf6a270acf5ae</anchor>
      <arglist>(int idType, int fieldID, int numRows, const int *rowIDs, const int *rowOffsets, const int *packedColumnIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a2e16a910fef80cf191f3fe68e62f1cc1</anchor>
      <arglist>(int idType, int numRows, const int *rowIDs, const int *rowLengths, const int *const *columnIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initLagrangeConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ada89c4dc9ad465c27a1eef765d547529</anchor>
      <arglist>(int constraintID, int constraintIDType, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initPenaltyConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a2a5c883ff61bd7d8fc7a0bcbaaa85981</anchor>
      <arglist>(int constraintID, int constraintIDType, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initSlaveConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ac34b90dd5753d6b07bb3d608d109e071</anchor>
      <arglist>(int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs, int offsetOfSlave, int offsetIntoSlaveField, const double *weights, double rhsValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>newSlaveData</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>aed90b95ecb2622078f0549929aedc915</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasSlaveDof</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a9452b82239d7488fd8a0a770b3403b05</anchor>
      <arglist>(int ID, int idType)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>initComplete</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a31b6e7af7ba8794b4a8036e3bfcd17ea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createGraph</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ad8ed13730e50e6c4720fa611651c6e85</anchor>
      <arglist>(bool blockEntryGraph, bool localRowGraph_includeSharedRows=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compareStructure</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a92fc4c4510020f492d4527a219faab71</anchor>
      <arglist>(const fei::MatrixGraph &amp;matrixGraph, bool &amp;equivalent) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumConnectivityBlocks</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a7d11df53c5aa0d0ad232ad9ae442f853</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; int, fei::ConnectivityBlock * &gt; &amp;</type>
      <name>getConnectivityBlocks</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a8375c0521df31e5d67244f41998ba867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConnectivityBlockIDs</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a4a624cb614a1e9951f74f6037782efb9</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;blockIDs) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumIDsPerConnectivityList</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a7466a2b3a3c349503ca5902b646d4c60</anchor>
      <arglist>(int blockID) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConnectivityNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ab7bf5abcc0151a8048ea743d3ea62598</anchor>
      <arglist>(int blockID) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConnectivityNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a0a1ece67e83451d21830502c533259bf</anchor>
      <arglist>(int blockID, int &amp;numRowIndices, int &amp;numColIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ae4cc89a624e454de9a338964bb670e12</anchor>
      <arglist>(int blockID, int connectivityID, int indicesAllocLen, int *indices, int &amp;numIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>aca3f2651096128ca04ece1cede3c06b6</anchor>
      <arglist>(int blockID, int connectivityID, int rowIndicesAllocLen, int *rowIndices, int &amp;numRowIndices, int colIndicesAllocLen, int *colIndices, int &amp;numColIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPatternNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ace411484bfae5798bfd7c7d1e250e9be</anchor>
      <arglist>(int patternID, int &amp;numIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPatternIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ac79aeb51093fa204233e9d81688be361</anchor>
      <arglist>(int patternID, const int *IDs, std::vector&lt; int &gt; &amp;indices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalNumLagrangeConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>adc7c75b0b3df65ac98fa5470543796be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getGlobalNumSlaveConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a1bdcb7af75976a3ab5c884adbca7f7fa</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintType *</type>
      <name>getLagrangeConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a8c109ae84ef7a100dc60ca0f15601e93</anchor>
      <arglist>(int constraintID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; int, ConstraintType * &gt; &amp;</type>
      <name>getLagrangeConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>adf3fb99fc6965602f69331d4d593d240</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintType *</type>
      <name>getPenaltyConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a9090c57d840c59e3a2a4e99449110671</anchor>
      <arglist>(int constraintID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintType *</type>
      <name>getSlaveConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>abb1306ce3f9af0f73f25a8e0ea59d7c2</anchor>
      <arglist>(int constraintID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getConstraintConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a96d5a7b08467568b5fbde08bcf8ecd55</anchor>
      <arglist>(ConstraintType *cr, std::vector&lt; int &gt; &amp;globalIndices)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const fei::ConnectivityBlock *</type>
      <name>getConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a71acdfe4458e71d51e392cb58c9ce492</anchor>
      <arglist>(int blockID) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::ConnectivityBlock *</type>
      <name>getConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a3429e7b0e057dbefda7ab1480e1eff83</anchor>
      <arglist>(int blockID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIndicesMode</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a50518c4c17cc22b42f9611af2208ae7a</anchor>
      <arglist>(int mode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::FillableMat &gt;</type>
      <name>getSlaveDependencyMatrix</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>ade99133605917e88aaeb1d8ad3e86258</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::Pattern *</type>
      <name>getPattern</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>aa731433dafa27a61bdabd0094ad364a9</anchor>
      <arglist>(int patternID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>createSlaveMatrices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a8f99fc40203d67b85ea9ed5203a730b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>getReducer</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a9324d9d76346f13db5e877b841e33a4b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>getRemotelyOwnedGraphRows</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a05b65f3d4089f8b6fd3b1e533b7ccc9a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getConstrainedIndices</name>
      <anchorfile>classfei_1_1MatrixGraph.html</anchorfile>
      <anchor>a6e78f50eaf7380da970934374c9983f6</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;crindices) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MatrixGraph_Impl2</name>
    <filename>classfei_1_1MatrixGraph__Impl2.html</filename>
    <base>fei::MatrixGraph</base>
    <base protection="private">fei::Logger</base>
    <class kind="class">fei::MatrixGraph_Impl2::Factory</class>
    <member kind="function">
      <type></type>
      <name>MatrixGraph_Impl2</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a11946111970e7d90a8ca7b3dcd0b314f</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace, fei::SharedPtr&lt; fei::VectorSpace &gt; colSpace, const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixGraph_Impl2</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a646925217a0dfcebc7b50992fb09af0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a03369ec20d70a22219b877f6180f51a4</anchor>
      <arglist>(const fei::ParameterSet &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRowSpace</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a73d078e9d642e0bfc3e6fd0fe12641a2</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; rowSpace)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getRowSpace</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a0214e030feaa3cac70335abe249986cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumnSpace</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a57730b75478453d8d0c6ceea7bb40337</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; columnSpace)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getColSpace</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3da568fe4dcad18fee545d1d7a17a8ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a4d93fb4d9acacc474bed26f3f6166983</anchor>
      <arglist>(int numIDs, int idType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2e1d2ce3e8d827b8c544940c3270eae9</anchor>
      <arglist>(int numIDs, int idType, int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a94abeaef26ffdf302e8c824011dbfff8</anchor>
      <arglist>(int numIDs, int idType, const int *numFieldsPerID, const int *fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a67d35f59fdad202909c977cf5503091c</anchor>
      <arglist>(int numIDs, const int *idTypes, const int *numFieldsPerID, const int *fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a724cfdfb3cbf220d8b65233e17b7319b</anchor>
      <arglist>(int blockID, int numConnectivityLists, int patternID, bool diagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a12603184258e621fc7b27d2c5aba42c1</anchor>
      <arglist>(int numConnectivityLists, int patternID, bool diagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ad537feceee1a1cfa3bdee6c0f4259ac7</anchor>
      <arglist>(int blockID, int numConnectivityLists, int rowPatternID, int colPatternID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ac08877fcd42cc8b40f07bde00b6a5d91</anchor>
      <arglist>(int blockID, int connectivityID, const int *connectedIdentifiers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a4ee319d0657ed27035632d717dc21e3b</anchor>
      <arglist>(int blockID, int connectivityID, const int *rowConnectedIdentifiers, const int *colConnectedIdentifiers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7dc854d0bfc8343f0149c7b5028bc0bd</anchor>
      <arglist>(int patternID, const int *connectedIdentifiers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a59b0f060453a4ef15ad09a77bca9446b</anchor>
      <arglist>(int rowPatternID, const int *rowConnectedIdentifiers, int colPatternID, const int *colConnectedIdentifiers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a0e5c9576829554c05bdbd1fb0d3e464c</anchor>
      <arglist>(int idType, int numRows, const int *rowIDs, const int *rowOffsets, const int *packedColumnIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>af612aa890acbdec7a57d239136344735</anchor>
      <arglist>(int idType, int fieldID, int numRows, const int *rowIDs, const int *rowOffsets, const int *packedColumnIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initConnectivity</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a391d0189d0baba3ac6e2ff3c6f647693</anchor>
      <arglist>(int idType, int numRows, const int *rowIDs, const int *rowLengths, const int *const *columnIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initLagrangeConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a9a22da1a55945b27a4a55caeead58703</anchor>
      <arglist>(int constraintID, int constraintIDType, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initPenaltyConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a63fa63fda1da5f7d22634704d16b2769</anchor>
      <arglist>(int constraintID, int constraintIDType, int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSlaveConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a8baa27603726fdddce0e858b8dbc25ad</anchor>
      <arglist>(int numIDs, const int *idTypes, const int *IDs, const int *fieldIDs, int offsetOfSlave, int offsetIntoSlaveField, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>newSlaveData</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a6f7749e86dfa27ca3f5af8bd70fb6583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSlaveDof</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a77775d17f38d08b344efc4bfb7cf101f</anchor>
      <arglist>(int ID, int idType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>acbfc3f58f3f0f9747b5e6b603b208002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createGraph</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ae13439aa5aa24186ce10dbae8caf753a</anchor>
      <arglist>(bool blockEntryGraph, bool localRowGraph_includeSharedRows=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareStructure</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a502d981a4e01679375b61fe5aca48306</anchor>
      <arglist>(const fei::MatrixGraph &amp;matrixGraph, bool &amp;equivalent) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConnectivityBlocks</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>afb578433fe1a00b864ffc0d1834a106c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, fei::ConnectivityBlock * &gt; &amp;</type>
      <name>getConnectivityBlocks</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2b9ebe5d3143e32afeda891ee7c1cda4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectivityBlockIDs</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>af7ddec3959f7c27002370c72f829c9d4</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;blockIDs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIDsPerConnectivityList</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3bdda648040ec0bef65dc0f3b0eaf17a</anchor>
      <arglist>(int blockID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectivityNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a87dfebfc562bc5c6aa7191e05ce1973c</anchor>
      <arglist>(int blockID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectivityNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a55237ad74d921a042c49356c0458fdf9</anchor>
      <arglist>(int blockID, int &amp;numRowIndices, int &amp;numColIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a26c79814d6c727c8d05b889a4cd676e0</anchor>
      <arglist>(int blockID, int connectivityID, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3be3e6b41d0d2e1b624886f492e7da2f</anchor>
      <arglist>(int blockID, int connectivityID, int rowIndicesAllocLen, int *rowIndices, int &amp;numRowIndices, int colIndicesAllocLen, int *colIndices, int &amp;numColIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatternNumIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>af3908d7450cb252248c6876f06907c96</anchor>
      <arglist>(int patternID, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatternIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7ff9ae8f7d1b0caf6646e5eccd5948bc</anchor>
      <arglist>(int patternID, const int *IDs, std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumLagrangeConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a1cdb7234915bef326e4162a06b3bdcd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumSlaveConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7e3c616aad2e1db9b85489061c6f7de1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstraintType *</type>
      <name>getLagrangeConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2394b5b8022fd50da0469495a4dbdb4e</anchor>
      <arglist>(int constraintID)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, ConstraintType * &gt; &amp;</type>
      <name>getLagrangeConstraints</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aa48dae08c1d595b9c63bc73c6ceec50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintType *</type>
      <name>getPenaltyConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a621efbb1e017795b9dc6c47e2f7bc2b2</anchor>
      <arglist>(int constraintID)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintType *</type>
      <name>getSlaveConstraint</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3cd34b1da19bee000ce37bcf4d722424</anchor>
      <arglist>(int constraintID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConstraintConnectivityIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>abe3581006ecb8f8eaa3659a3b6fc6fc5</anchor>
      <arglist>(ConstraintType *cr, std::vector&lt; int &gt; &amp;globalIndices)</arglist>
    </member>
    <member kind="function">
      <type>const fei::ConnectivityBlock *</type>
      <name>getConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a6fbd822f61b7ad4f631b8c52d6f82724</anchor>
      <arglist>(int blockID) const </arglist>
    </member>
    <member kind="function">
      <type>fei::ConnectivityBlock *</type>
      <name>getConnectivityBlock</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a29a7d12ab166b3b4266581de2c13700d</anchor>
      <arglist>(int blockID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndicesMode</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a658d66e7e7406386878dd669a19901be</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; FillableMat &gt;</type>
      <name>getSlaveDependencyMatrix</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ab16753d398af34dd887ebcd9a4fe2e8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::Pattern *</type>
      <name>getPattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aa06026306da479a52fe2d393185b4bc6</anchor>
      <arglist>(int patternID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>createSlaveMatrices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a47d157ada8f8b1ebf89cfd3ab1b749c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>getReducer</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aaaca318f74d18b65a9ba61026eebbdab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>getRemotelyOwnedGraphRows</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>adf5279a5541100b89cd343b0c9266c80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstrainedIndices</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a95104b387e397912283571b17250684f</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;crindices) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createAlgebraicGraph</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2520e55f64136a43f1ccbcb21fa11edf</anchor>
      <arglist>(bool blockEntryGraph, fei::Graph *graph, bool gatherFromOverlap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_multiField_symmetric</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a1e9cce57bbd484b0e829d664d9416dc5</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_multiField_nonsymmetric</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ae719488f39012c2953b31d783124023f</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_singleField_symmetric</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7d3b7f36bec8d610421304260ce05341</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_singleField_nonsymmetric</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aecea9aeed74b05eac78a43c81934a958</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_noField_symmetric</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7d6b2a3cde212effaf050c8acee02be6</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addBlockToGraph_sparse</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a53c4bb63c26af87fa056d4c3fe821962</anchor>
      <arglist>(fei::Graph *graph, fei::ConnectivityBlock *cblock)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addPattern</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a092c733f3b2bab1d9343d53fcba11928</anchor>
      <arglist>(fei::Pattern *pattern)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityIndices_multiField</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ac792fa781b2587bb23e29405c1f64bfc</anchor>
      <arglist>(const snl_fei::RecordCollection *const *recordCollections, int *records, int numRecords, const int *numFieldsPerID, const int *fieldIDs, const int *fieldSizes, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityIndices_singleField</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aa27944ee4cba8a11125c48d7983df20c</anchor>
      <arglist>(const snl_fei::RecordCollection *const *recordCollections, int *records, int numRecords, int fieldID, int fieldSize, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityIndices_noField</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>af4ee9efaef93766fc437a01ad1e34f83</anchor>
      <arglist>(const snl_fei::RecordCollection *const *recordCollections, int *records, int numRecords, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityRecords</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a15b21b238514fc4af90c289c1ab17c78</anchor>
      <arglist>(fei::VectorSpace *vecSpace, int idType, int numIDs, const int *IDs, int *records)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityRecords</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ad26dc12083c710c153bd632360b8a58c</anchor>
      <arglist>(fei::VectorSpace *vecSpace, int idType, int fieldID, int numIDs, const int *IDs, int *records)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getConnectivityRecords</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a9c9c81ea59a0e82e866636e316b8fcc2</anchor>
      <arglist>(fei::Pattern *pattern, fei::VectorSpace *solnSpace, const int *connectedIdentifiers, int *recordList)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exchangeBlkEqnSizes</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a00f09259391b2b16beb5a420aa6c770f</anchor>
      <arglist>(fei::Graph *graph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addLagrangeConstraintsToGraph</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a11c4ca95f2973e919455f8dd7f9ed306</anchor>
      <arglist>(fei::Graph *graph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addPenaltyConstraintsToGraph</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3f014a4f23bb76f4011c40dcd1f9f4a5</anchor>
      <arglist>(fei::Graph *graph)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ac717a9ff01bbfa6e648b9a28113e0c12</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a72397b8d43833ef64954240ec04d739d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>abea1f8b27db6a9a0df5476dd53878ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a20cf8afb0e83bdde271537ada1414d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>rowSpace_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>adcf8c30391c8e7f3e1e06c35d1070e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>colSpace_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>acd9f5a54feb169d29bc7ef53d2919cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveRowSpace_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aa60e9bb587f835871bc368eb0250adc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveColSpace_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ae66c7b2058f8b3914e1da8a3e41871b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>symmetric_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>af03ccdbb9dc28eea296a31b9b8d1332b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>remotelyOwnedGraphRows_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a5f07feb73dbd0585f0149ed67b7a1c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>simpleProblem_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a52f6ae0b759b2fc7e429e06ef7481ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockEntryGraph_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a8c71a86bd43dece70792fc9c31318b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::Pattern * &gt;</type>
      <name>patterns_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a12c8046f1a5746500cd71ad5ddc50949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::ConnectivityBlock * &gt;</type>
      <name>connectivityBlocks_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2d5092d87edaaba893b182071d1a294a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>arbitraryBlockCounter_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aacd318676a87a8dfcaa667c1aaf77d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::ConnectivityBlock * &gt;</type>
      <name>sparseBlocks_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a501978e9d0c482409294842475f850be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, ConstraintType * &gt;</type>
      <name>lagrangeConstraints_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aec433bc5cf91ef568dcf269f2e8d76b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, ConstraintType * &gt;</type>
      <name>penaltyConstraints_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a5009359ec5954e15e9b7e315189d248c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, ConstraintType * &gt;</type>
      <name>slaveConstraints_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ae3ae2b97c34b609023190b4dab14b6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ptEqualBlk_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a9534195d0c6353f52b1df243b965e56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newSlaveData_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>abf15255695d18ed603b9b4d3ffe21108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localNumSlaves_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ab58dedcb6ee50806de90bffa5e8ed4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>globalNumSlaves_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ac14c8a4697fd11435fbc238befc7bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; FillableMat &gt;</type>
      <name>D_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a6e1602d72747f367c741817972dc299f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; CSVec &gt;</type>
      <name>g_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>afe53fbf3bf237fcbe1714a4a2ad2b502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>g_nonzero_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a3eaecc47809f49c8159148c13c4e3e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a6819345cd78e8d0fc599f4b24833bbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a402826666114dd80eae0ec92533eacb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>ae4b062833a697cc186f0202cf9051d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>tmpIntArray1_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a7bbb3dd62b70e1902c6ea8c863196bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>tmpIntArray2_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aba1b2b58eee65339b9e77a95adace217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>vspcEqnPtr_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a6d531d5e1126d0c90668109744742dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; int &gt;</type>
      <name>constrained_indices_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>a2cf6e657bd967309d41291636eced543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>includeAllSlaveConstraints_</name>
      <anchorfile>classfei_1_1MatrixGraph__Impl2.html</anchorfile>
      <anchor>aaf84786b2f614460aece37a8c47b9966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MatrixReducer</name>
    <filename>classfei_1_1MatrixReducer.html</filename>
    <base>fei::Matrix</base>
    <member kind="function">
      <type></type>
      <name>MatrixReducer</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a31fa72dce883a3f292a8af875b47a936</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Reducer &gt; reducer, fei::SharedPtr&lt; fei::Matrix &gt; target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixReducer</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>af4ba1e1bcea010fb56cd753bfc65abab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>getTargetMatrix</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>ac2bca44d74e72182ad876316c152d0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>aeb20afea54086cf010ccf34e50f8bb86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>adde6609cbdf48c7a923be2dbe974296a</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>getMatrixGraph</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a62cbf190cbe319afebb81bb0bc79a45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixGraph</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a538dab965ae76ea12432f4e2c0df596f</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumRows</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a9ac6b6cdd402512746dc848adba5af76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumRows</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a2c2d52ac626ec9d5fa1d49de2f25972b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a1f40f9502e056642b1a385e17a1a7c39</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRowLength</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a1062818c850cd9d003927098a16154c5</anchor>
      <arglist>(int row, int &amp;length) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutRow</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a632d370a631cc3ab80934cdb44c20954</anchor>
      <arglist>(int row, int len, double *coefs, int *indices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a8b445048cb4e8bd9393e5923535e87d2</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a488962440487f9541079eeb436866047</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>aa5258219ce19d6630cd05833ec3e6aa6</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *const *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>aa0b6d7e827da5a470363d58933abce80</anchor>
      <arglist>(int fieldID, int idType, int rowID, int colID, const double *data, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a998f429be02e918413e2a67e5a7ad629</anchor>
      <arglist>(int blockID, int connectivityID, const double *const *values, int format=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>globalAssemble</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>ae0e948075b85aa811a1a50f51b2703cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>multiply</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a5a8eec1468f2d95efd44233ce2058b4f</anchor>
      <arglist>(fei::Vector *x, fei::Vector *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>adaa6152df933b529a9634726e4897263</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a7c2d917e23ed593e453d41426cf596d6</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a83fc0237cb6e530fecdbe0d085599252</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a19fc9ee0190a30529316035351b3bc45</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingBlockEntryStorage</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>adb6521c8d8e87356b891e456b978e7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>giveToUnderlyingMatrix</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a86ec89bf173396b74210d8f8ef9b1eb2</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>giveToUnderlyingBlockMatrix</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a9f4584f7e0f8675c85cf24df47ceab08</anchor>
      <arglist>(int row, int rowDim, int numCols, const int *cols, const int *LDAs, const int *colDims, const double *const *values, bool sumInto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markState</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>ae282e4bbaa77bfc596c4fa843d3ac4a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changedSinceMark</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a54286c20cd98fd1092d29711277bb86e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToMatrix</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>ad44de3f5a8fb15f341f7ca3708e39518</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto, int format)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToBlockMatrix</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a0875cf401ed1e217ba92dc0e99459001</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sumInto)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>abbfe252f7ed9f9303910133ba6257dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>target_</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>acb14e061c12e3db9128fae0d44eff6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>globalAssembleCalled_</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a03aecf4fe80f80600ae19ca356c7d023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>changedSinceMark_</name>
      <anchorfile>classfei_1_1MatrixReducer.html</anchorfile>
      <anchor>a26823a34885cdb0ddff1397a2cef20b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::MatrixTraits</name>
    <filename>structfei_1_1MatrixTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a74d55b9a26ba5cf5abffc4174edc264d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getBeginPointer</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a8082a675cc8ad18ef2cda9ac0face77b</anchor>
      <arglist>(T *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOffset</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a9341f68b91140b51bc603bb080cc3915</anchor>
      <arglist>(T *, int, int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>adff053132a2b39c0b4b1ae83fa40f2a1</anchor>
      <arglist>(T *mat, double scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumLocalRows</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a4d3cb040b5a319b7eacb69ce0425cd61</anchor>
      <arglist>(T *mat, int &amp;numRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a41230410d57690c962d72dc5ef4f144b</anchor>
      <arglist>(T *mat, int row, int &amp;length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>acff01ea9636aaeb2e2a3ff06e02ff94c</anchor>
      <arglist>(T *mat, int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>aa9b90bf9e8267d33e5c677d2deb25e63</anchor>
      <arglist>(T *mat, int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a2d9bd6cd11bd280ccd5834bc98acd345</anchor>
      <arglist>(T *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>matvec</name>
      <anchorfile>structfei_1_1MatrixTraits.html</anchorfile>
      <anchor>a1b066a4fab32364aee803da9357663de</anchor>
      <arglist>(T *A, fei::Vector *x, fei::Vector *y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::MatrixTraits&lt; fei::LinearProblemManager &gt;</name>
    <filename>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a847edf93599e1069b79669000c721d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getBeginPointer</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a666d682c20571093af509ee96f22bdcd</anchor>
      <arglist>(fei::LinearProblemManager *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOffset</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>ac6379ee220ab4cf15f3f2cbb0bb7ea79</anchor>
      <arglist>(fei::LinearProblemManager *, int, int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a3a99d427a0b1bf9f189ec94cbabb273a</anchor>
      <arglist>(fei::LinearProblemManager *mat, double scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumLocalRows</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>aafd064e9c2cd002961d03fd9ff0a3573</anchor>
      <arglist>(fei::LinearProblemManager *mat, int &amp;numRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a351cd72b09addb77b428f064187a2961</anchor>
      <arglist>(fei::LinearProblemManager *mat, int row, int &amp;length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>aca3bf5f11c311fae6032f12eea72c44d</anchor>
      <arglist>(fei::LinearProblemManager *mat, int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>afcc39f46f104529fc6189c7279de47e4</anchor>
      <arglist>(fei::LinearProblemManager *mat, int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a2855a42f8c87f3d67f0b1c427e14c390</anchor>
      <arglist>(fei::LinearProblemManager *mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>matvec</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a1744b720965753f8a80797cec24a5134</anchor>
      <arglist>(fei::LinearProblemManager *mat, fei::Vector *x, fei::Vector *y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::MatrixTraits&lt; FillableMat &gt;</name>
    <filename>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a1c4eff4945eecac03ae3aa80a8830cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getBeginPointer</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a0784250f10260e2a64ac654d9fea3229</anchor>
      <arglist>(FillableMat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOffset</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a198f22feef1bb2df5323ced08869a7c5</anchor>
      <arglist>(FillableMat *, int, int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a036c9de84e64cf9cadc476ec128906d2</anchor>
      <arglist>(FillableMat *mat, double scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumLocalRows</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a292ba4dc0ea7529bd4eea666696fe7a2</anchor>
      <arglist>(FillableMat *mat, int &amp;numRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a5768cd70d671619645ff6f071f9f2971</anchor>
      <arglist>(FillableMat *mat, int row, int &amp;length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a2f774163825531036d216c7660a50c56</anchor>
      <arglist>(FillableMat *mat, int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a8801a6c73efc31a661235dca3cd35b5e</anchor>
      <arglist>(FillableMat *mat, int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>aeefffad829090430c12f6660cf6c09fd</anchor>
      <arglist>(FillableMat *mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>matvec</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FillableMat_01_4.html</anchorfile>
      <anchor>a0cfb3e5923fea275bdb0e24adb0ebd5b</anchor>
      <arglist>(FillableMat *mat, fei::Vector *x, fei::Vector *y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::MatrixTraits&lt; FiniteElementData &gt;</name>
    <filename>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>ad9854b9a8b5df5269549e1b5145f054a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getBeginPointer</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>aae2b4c7b95e1657e27e043b38bf64831</anchor>
      <arglist>(FiniteElementData *fed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOffset</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a91b4934a974a726683ef0ab6c1174a8d</anchor>
      <arglist>(FiniteElementData *, int row, int col)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a73504ed7e425c8948e93269741235d17</anchor>
      <arglist>(FiniteElementData *fed, double scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumLocalRows</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a3f707fb8f2613645cdea9a9135206222</anchor>
      <arglist>(FiniteElementData *fed, int &amp;numRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a644eede794b0dd0ccd1a3eb4ad965281</anchor>
      <arglist>(FiniteElementData *fed, int row, int &amp;length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>ad8bc14eba0416ce3fe4d39ab4c51969e</anchor>
      <arglist>(FiniteElementData *fed, int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a821b383b6ee617dd653e431e94dfc6f1</anchor>
      <arglist>(FiniteElementData *fed, int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>aba9d9cc1cdaa36db75068974b14177b8</anchor>
      <arglist>(FiniteElementData *fed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>matvec</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a352040e2ce0758752bd0b9bed650cdad</anchor>
      <arglist>(FiniteElementData *fed, fei::Vector *x, fei::Vector *y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::MatrixTraits&lt; LinearSystemCore &gt;</name>
    <filename>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a68729c52c524c3f12c5e61c161fc0385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getBeginPointer</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a2b1bd849931d9f7a482c28d6cf523de2</anchor>
      <arglist>(LinearSystemCore *lsc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOffset</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a0a0325283bda5d34a80d0f98561b322d</anchor>
      <arglist>(LinearSystemCore *lsc, int row, int col)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a1b7ab1b7bca3fa7748d5fe15cc38c02b</anchor>
      <arglist>(LinearSystemCore *lsc, double scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumLocalRows</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>ac0ae278cbc90e880ea0f54529b41dad0</anchor>
      <arglist>(LinearSystemCore *lsc, int &amp;numRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRowLength</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a445c8c6e03dc5a1fa256a1d8a4a06f9d</anchor>
      <arglist>(LinearSystemCore *lsc, int row, int &amp;length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOutRow</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a575347a2a1cf967d3350d44d1c4e4c30</anchor>
      <arglist>(LinearSystemCore *lsc, int row, int len, double *coefs, int *indices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a5610369a5aa37cfb5dd63bd009d79e8f</anchor>
      <arglist>(LinearSystemCore *lsc, int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a1671cbd7c9c8d6b3b66bd5496b6e05f0</anchor>
      <arglist>(LinearSystemCore *lsc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>matvec</name>
      <anchorfile>structfei_1_1MatrixTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a45b1048b000776c98af7384a01ae08e3</anchor>
      <arglist>(LinearSystemCore *lsc, fei::Vector *x, fei::Vector *y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::MessageHandler</name>
    <filename>classfei_1_1MessageHandler.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageHandler</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a282c33cf6fe979e1f687e779f76011ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a982a58dab2dd19fe45392a90dcb42c3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>acc7cf53d05736078a39c2010476001de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>aed9423c59fe40d22f9223f4c2f27d08d</anchor>
      <arglist>(int destProc, int &amp;messageLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSendMessage</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>ac9a334ca95419c35ff0d9575a3407d7f</anchor>
      <arglist>(int destProc, std::vector&lt; T &gt; &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>processRecvMessage</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a2d4606ac52055e48a6b4e4051e04d4e1</anchor>
      <arglist>(int srcProc, std::vector&lt; T &gt; &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageHandler&lt; int &gt;</name>
    <filename>classfei_1_1MessageHandler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageHandler</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a282c33cf6fe979e1f687e779f76011ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a982a58dab2dd19fe45392a90dcb42c3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>acc7cf53d05736078a39c2010476001de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>aed9423c59fe40d22f9223f4c2f27d08d</anchor>
      <arglist>(int destProc, int &amp;messageLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSendMessage</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>ac9a334ca95419c35ff0d9575a3407d7f</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>processRecvMessage</name>
      <anchorfile>classfei_1_1MessageHandler.html</anchorfile>
      <anchor>a2d4606ac52055e48a6b4e4051e04d4e1</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nodeBC</name>
    <filename>classnodeBC.html</filename>
    <member kind="function">
      <type></type>
      <name>nodeBC</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a4a5a2c362ec5fa0662f07ed8c8318e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nodeBC</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a12b4d9024a39578de993950c36d9023e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a47ccf5c95e044b5448ac198c98ea1bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>af8227550b83fbe911f90bf62a58c75a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldID</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a18ad3c9e7d79b0232526ed283d1de3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldSize</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a6f9bb26db2247fe416591eb52132bbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>alpha</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>a8b861cdad96d26863ec14af69f57b07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>beta</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>afd213b18cc91b7c016937a7071347818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>gamma</name>
      <anchorfile>classnodeBC.html</anchorfile>
      <anchor>adb2270724387a1a219c4f728f192c5ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeCommMgr</name>
    <filename>classNodeCommMgr.html</filename>
    <base>MessageHandler&lt; int &gt;</base>
    <member kind="enumvalue">
      <name>STRICTLY_LOW_PROC</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aa45737128051060cc8f79b129bab9dc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROC_WITH_LOCAL_ELEM</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aa0d34d3e341c939b76d07c4c1fc0aee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALLER_SPECIFIES</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aae3a50b3960d8784e795a7d991ef8518f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRICTLY_LOW_PROC</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aa45737128051060cc8f79b129bab9dc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROC_WITH_LOCAL_ELEM</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aa0d34d3e341c939b76d07c4c1fc0aee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALLER_SPECIFIES</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ec50d50615f85eed10b39588b795f4aae3a50b3960d8784e795a7d991ef8518f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeCommMgr</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ae0f136ed92e5ee572d1fb171b74bd70c</anchor>
      <arglist>(MPI_Comm comm, const SNL_FEI_Structure &amp;problemStructure, int sharedNodeOwnership=STRICTLY_LOW_PROC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeCommMgr</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a960667ece2a92c0c09ade926b8534271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ad7ac1a913f300502b940ecf9524db627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; GlobalID &gt; &amp;</type>
      <name>getLocalNodeIDs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>aa87113886fffa130c98925cf0b6fa646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; GlobalID &gt; &amp;</type>
      <name>getSharedNodeIDs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>afdd707a49e24ebcdedeb799cbc52b551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSharedNodeNumbers</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a1753b8c2342c58d6d1b24980833b53b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSharedNodeIndex_num</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a25dbf0c05cc6fe0412b244c543e549b7</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSharedNodes</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a3e0cc4adbc9a712051360249c01a938a</anchor>
      <arglist>(const GlobalID *nodeIDs, int numNodes, const int *const *procs, const int *numProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a8ad4631ec0f500a8ceeab9bb5fb231e1</anchor>
      <arglist>(NodeDatabase &amp;nodeDB, bool safetyCheck)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>informLocal</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a67b006d5dd4f80fe40ed3b645eeb1370</anchor>
      <arglist>(const NodeDescriptor &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeEqnInfo</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a84a69414159be21094476d04a595ed0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSharedNodeIndex</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a8004d98f26198f9c7d57ddf10e868438</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSharedNodeNumSubdomains</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a858fb6a94dce68f0629568e04284e9cc</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; *</type>
      <name>getSharedNodeSubdomainList</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a9c67abf8c8a8f25908fc9314d950495e</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function">
      <type>NodeDescriptor &amp;</type>
      <name>getSharedNodeAtIndex</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ae06bf85c2ad66b55eb2114b3f2573b4e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSharedNodeProcs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a5331c0ede2ba46890836405a86fa1ec8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSharedOwnershipRule</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a064b5ba4f2813a7698a833bcc0a3f016</anchor>
      <arglist>(int ownershipRule)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>af6a925e7736701ae2c69bdeb3cc3191a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a586da58cc57303de4f005ef96ccf093e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>abda45b3bb9fec4c0e0acd652eca4a7ec</anchor>
      <arglist>(int destProc, int &amp;messageLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessage</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>aa348c5f6c96e23ffcb8a4d40e034533c</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processRecvMessage</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a44a9616d9f8a8db0db84123a7bb9c9a0</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeCommMgr</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a37086920c57470bdd4436fa772637adb</anchor>
      <arglist>(const NodeCommMgr &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeCommMgr &amp;</type>
      <name>operator=</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a46dca827216673a6dcd1c0857e854d75</anchor>
      <arglist>(const NodeCommMgr &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>allocateNodeDescriptorPtrs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>adbd35357167b30eca9d35d5b165cdfbc</anchor>
      <arglist>(NodeDatabase &amp;nodeDB)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeNodeProcs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a8dd9beacf56b51cedda81c6ddb55124e</anchor>
      <arglist>(int index, std::vector&lt; std::vector&lt; int &gt; * &gt; &amp;procTable, const int *procs, int numProcs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>checkSharedNodeInfo</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a3d94d85fe8ccd3437b404e2afff99e52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>checkCommArrays</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ab7edcc20399429b7139eb37a3834e6bf</anchor>
      <arglist>(const char *whichCheck, std::vector&lt; int &gt; &amp;globalRemoteProcs, std::vector&lt; int &gt; &amp;globalNodesPerRemoteProc, std::vector&lt; int &gt; &amp;globalRemoteProcLengths, std::vector&lt; int &gt; &amp;nodesPerRemoteProc, std::vector&lt; int &gt; &amp;remoteProcs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setNodeNumbersArray</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a7ae23033270006983ff28ffefc61377e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>packLocalNodesAndData</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ad3e8fb36739ccc5cc4f997060d5bda81</anchor>
      <arglist>(int *data, int proc, int numNodes, int len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>packRemoteNodesAndData</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>aea7e3983e390bfd6064e711feafe5047</anchor>
      <arglist>(GlobalID *data, int proc, int numNodes, int len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>adjustSharedOwnership</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ad3216d7ad0ed4c5e4bee7bd17903147e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createProcLists</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a5a203db6f35a6dee792752777ec2b371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createProcList</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a8b2449f66af928641511dac07e89bd70</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;itemsPerProc, std::vector&lt; int &gt; &amp;procs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exchangeSharedRemoteFieldsBlks</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>af860095b3a4bcab18b98b41ef51667dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getGlobalMaxFieldsBlocks</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ab39dd710d806a45092377e1125356ebc</anchor>
      <arglist>(int &amp;maxFields, int &amp;maxBlocks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getGlobalMaxFieldsBlocksSubdomains</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>af59ae263454f5461cc4eddf1e0c2f9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeDescriptor **</type>
      <name>sharedNodes_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a0660768d7b6c72b464316a16e82f1825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sharedNodesAllocated_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ae8f6644cba1fc3ac4792c0452ead81e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sharedNodeOwnership_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a34e2605ee78d92994ad7aea6f0576507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>localNodeIDs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a1b2df74ec4f4d8c837d7a61067f057fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>remoteNodeIDs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a0bab103b42070a5ad0dd25e329a163fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>sharedNodeIDs</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ad8340deb6d7bfc6089a48fc8f520ba51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>sharedNodeSubdomains</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a833e0221e4f71af409cd0fff5e4bcd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>trivialSubdomainList</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ae767224af8d57da63c918552c08b1d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt;</type>
      <name>sharingProcs_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ac44f9b7edde9ff2b6d714c239751d3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sharedNodeNumbers</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ac4b16812fb7c4d80f0bfb5564b79ea66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>remoteOwnerProcs_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a93c5400e4ac0b8e344d142338af7e96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>remoteSharingProcs_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a664eb130f5df726c9c892b46adc743c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>nodesPerOwnerProc_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a2eec65c6ed847eb7e1e1dc2e3026255a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>nodesPerSharingProc_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a4339f40e37c5c29f413c6b8d4f73f1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>af15f207b5fa23df8aa05cb3721437576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a2d7cd59b080d7d977c119d21f23d36eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ada0f06258b476a1b5610cb9b424ae1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxFields_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>ae619838b4127fac9f36bf50d08a5c30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxBlocks_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>adafbf6e7de4c391861990c7298087a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxSubdomains_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a5a98504c533ec8e54e1276e9994594fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initCompleteCalled_</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a790a9e72eb08c6435b4830ec13270b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SNL_FEI_Structure &amp;</type>
      <name>probStruc</name>
      <anchorfile>classNodeCommMgr.html</anchorfile>
      <anchor>a5791dc165f71e9f95e4afb42e2e5eca5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeDatabase</name>
    <filename>classNodeDatabase.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeDatabase</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ab791f7eb7d44ef10e520716969ccf270</anchor>
      <arglist>(std::map&lt; int, int &gt; *fieldDatabase, NodeCommMgr *nodeCommMgr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDatabase</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a469913a747a35605f8a85f9dcb614290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodeDescriptors</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a83ce19e440577be4c7d770c0c61feca9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; GlobalID, int &gt; &amp;</type>
      <name>getNodeIDs</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a31f566f1a59191110a4e79d1ca29c198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeWithID</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a44d7009370d1cd26eec324637b726d70</anchor>
      <arglist>(GlobalID nodeID, const NodeDescriptor *&amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeWithID</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a519955e1c8e18833f4497554c2af86c5</anchor>
      <arglist>(GlobalID nodeID, NodeDescriptor *&amp;node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeWithNumber</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>afe624e895fa9b2a0e2f1cd318de93d87</anchor>
      <arglist>(int nodeNumber, const NodeDescriptor *&amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeWithEqn</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a7275a92c867058a36e5efa57ae5084ce</anchor>
      <arglist>(int eqnNumber, const NodeDescriptor *&amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNodeAtIndex</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a971366b791ebe64868e77dedff35ad5c</anchor>
      <arglist>(int i, const NodeDescriptor *&amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNodeAtIndex</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a1876f154448dc2cc988c5a95ad8d8ccd</anchor>
      <arglist>(int i, NodeDescriptor *&amp;node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countLocalNodalEqns</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>abbe5edb536a198d6f4b43368b847cb5a</anchor>
      <arglist>(int localRank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countLocalNodeDescriptors</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>adb36233899748a5697577176b5dff3c1</anchor>
      <arglist>(int localRank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfID</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>af214a0c33d70dbd27f3088aa614c8935</anchor>
      <arglist>(GlobalID nodeID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initNodeID</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ada81e3badd7591b1bfb2e648274a3646</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initNodeIDs</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>aadb422b26a53b050dbae076ef1e51b66</anchor>
      <arglist>(GlobalID *nodeIDs, int numNodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>synchronize</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a3403a192a1f04847ac24fad86106cc78</anchor>
      <arglist>(int firstLocalNodeNumber, int firstLocalEqn, int localRank, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedNodeNumber</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a7ff701f2916fc5fd9500dfa3ccebab45</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedFieldID</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ac38d15fa72e103ef6bd706cf4983e2dc</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSynchronized</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a5e05d2a248234d8d54601aacd799baa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeDatabase</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a3ba0b5ee6d880fd49f09ab7d01feb3a3</anchor>
      <arglist>(const NodeDatabase &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeDatabase &amp;</type>
      <name>operator=</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ad8f1a743e2f77698fd85f65c3d387a0b</anchor>
      <arglist>(const NodeDatabase &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ae0083c74fa039e5794bdb6b73c99554f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NodeDescriptor * &gt;</type>
      <name>nodePtrs_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a05e50b6ec71c32874583ac0c336ef040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>eqnNumbers_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ac0eb081df5309260879e52aafefc08e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>eqnNodeIndices_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a4c91e0d0b6ee77a91b1a9efdd0699a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GlobalID, int &gt;</type>
      <name>nodeIDs_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>aecbef4e7e01ed5bb491940d71dfdbcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>nodeNumbers_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ac1bb08aa1479fed3d382f0724763c927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>synchronized_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a16154c1d78146bc3bb9f7a14d72b86d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>need_to_alloc_and_sync_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>af1f02e7e2144b1530b74f74852c49aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt; *</type>
      <name>fieldDB_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a915ca880c3a6ba08136e8527b863cddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeCommMgr *</type>
      <name>nodeCommMgr_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a859585c1d9910de2178012f57ef96ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalNodes_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>af18c2004f221e32b63ba0863891d1912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalNodeNumber_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>a7654cf02a809ff8b9b1b7202784a72f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalNodeNumber_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>aebda535e73c74b68b92b358c57893346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool_alloc&lt; NodeDescriptor &gt;</type>
      <name>nodePool_</name>
      <anchorfile>classNodeDatabase.html</anchorfile>
      <anchor>ae85a4439829b068cd43db6a0e6c1b720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeDescriptor</name>
    <filename>classNodeDescriptor.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeDescriptor</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a72061a6f40da905355d7d46fc32b1027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeDescriptor</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a3d1e179425057fc7f1097fc0f31f27c7</anchor>
      <arglist>(const NodeDescriptor &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDescriptor</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a1fdb802f59ea848a59b1a0e102be3ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID</type>
      <name>getGlobalNodeID</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a1e0d0ee5b9e9c43ce033a4f3de2c6e08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalNodeID</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a390f6b22cd9432aad6ad553b1d8c0a72</anchor>
      <arglist>(GlobalID node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>afe22128cabeff1be7df8725b76e834d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a19dc0b476c330e4e0f7b6a1963921304</anchor>
      <arglist>(int nn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a75d4fa9c06932d3633ca91ed446e6ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlkEqnNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a5eea17f1d1a3942749d4da49b0d6e546</anchor>
      <arglist>(int blkEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodalDOF</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ac043c9cf6112706e670a123d71a3ad9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumNodalDOF</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a16bb40e0e2996bb8aa3bdfaf52a959df</anchor>
      <arglist>(int dof)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addField</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a72e9988394f5e69d9acf939fb44f0612</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldEqnNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a0cb65e88ede9728c78073b40ae488072</anchor>
      <arglist>(int fieldID, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a1bf03ebf8b42a23a83ff0ba5cfb22d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldIDList</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a8e00dbf514a25f62bc112e6f9344d0a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldEqnNumbers</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a7d8f6bf233022c39129fbffc7234ffab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldEqnNumber</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a29de255fd29dfbecb46b4eaea9207aba</anchor>
      <arglist>(int fieldID, int &amp;eqnNumber) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFieldID</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ad2cbce5b141c362246a88bc4dd31caec</anchor>
      <arglist>(int eqnNumber, int &amp;fieldID, int &amp;offset_into_field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>afea5cc41e022a73c5729955a38ff0ea2</anchor>
      <arglist>(const NodeDescriptor &amp;nd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a01ba8321fde4c1cfca1e8d4d912841ce</anchor>
      <arglist>(const NodeDescriptor &amp;nd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a9eb85720993875d462dcbd0f20ec2235</anchor>
      <arglist>(const NodeDescriptor &amp;nd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ab7f3cba0750e6eca6ebe8d7b57a98c1d</anchor>
      <arglist>(const NodeDescriptor &amp;nd) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProc</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a1abc306df354b9003822333b89e36fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerProc</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a62fef705eef4f5c88e556381eb459829</anchor>
      <arglist>(int proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBlockIndex</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a312f9f7c238791e010772d45cfe169ef</anchor>
      <arglist>(unsigned blk_idx)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBlocks</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>acb7c622202de6de68e76e8f1cdb038f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned &gt; &amp;</type>
      <name>getBlockIndexList</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>aea6754a7afab3517d61a3f4e3ab46598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBlockIndex</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a5b1279a064e5e2f80bb71cbe426191d7</anchor>
      <arglist>(unsigned blk_idx) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeDescriptor &amp;</type>
      <name>operator=</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a87dac55a357a41d25f8cdf583b8d9e79</anchor>
      <arglist>(const NodeDescriptor &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocFieldLists</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ac7a83cc56004b94e4938cc4cbc14eac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>allocBlockList</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>aeaa9f1065a408ea7670d02478333e73d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID</type>
      <name>nodeID_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a3218770a8db1687a058033535a81036c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeNumber_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ac430bd78ad1576dc7b8f3285a7ad513b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numNodalDOF_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a2988a917d161a78b88ceb6a5b3d95343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>fieldIDList_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a919fb53bd0cc15a3ef8f510dda7eb0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>fieldEqnNumbers_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a7e611cc9237906d8b1c0920db4ca4020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numFields_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>aa5dcca41751666226cbf8ab268dcd0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>blkEqnNumber_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>a1db1989e0ebfa1a86c1a5280110b6a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ownerProc_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>ab58b8f8ffd324c2b6907bd370372c40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>blockList_</name>
      <anchorfile>classNodeDescriptor.html</anchorfile>
      <anchor>aabc8cc497f337cadd64715202c48e1fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Param</name>
    <filename>classfei_1_1Param.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ParamType</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556aaa3b244db70352de63aedb6d99c59796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a9291076e0a224e4e7729679975844af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a934af3cece20c21371acb03b1267ea6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556ac3fb7b3f036097d61b55e8cfce8d95e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a52e66f6dbecfc2c3c35abdc5c48a1ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_TYPE</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a6761e8957a8f526708e0474e86722d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556aaa3b244db70352de63aedb6d99c59796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a9291076e0a224e4e7729679975844af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a934af3cece20c21371acb03b1267ea6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556ac3fb7b3f036097d61b55e8cfce8d95e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VOID</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a52e66f6dbecfc2c3c35abdc5c48a1ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_TYPE</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a394ea882b2dcab42d9fe1c2fd7f88556a6761e8957a8f526708e0474e86722d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a413c87aa0ddf69790765b64e49f925f4</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>ada618c7c4c48981365b99bb38ad43f9d</anchor>
      <arglist>(const char *name, double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a8c5004ea4b6e28f69cca0542d4df511b</anchor>
      <arglist>(const char *name, int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a22537aec9fc5e1477b282f01c4e1fe2f</anchor>
      <arglist>(const char *name, const void *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a2c4a01ff72e653a57caa1fe77542ecd7</anchor>
      <arglist>(const char *name, bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a0d979c69a1c0bed6b0aa39c75453f3f2</anchor>
      <arglist>(const Param &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Param</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a4e2dc8a37aa8535ce69a15af199dcc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Param &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>aa7180defbc18820a78f8c105db3357c5</anchor>
      <arglist>(const Param &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a8eedad779b46983ad5ba8d2ed5d36e28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParamType</type>
      <name>getType</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a1183c25cc7eeecbaae7ede4ea5ee66d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getStringValue</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a06554128b52a3e7b1ef429b3375f699e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleValue</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a910a5a4a9c8f67799d07678e0d698803</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>ad63fb1bee92100b38d16d94f47ceb1f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolValue</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a30050570c4397a35f359504abfc0f1d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getVoidValue</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a5d4850247407b2a232119c1ab71bf4c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParamType</type>
      <name>type_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>ab5da7291b7825683b734cf9c19b97a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>af3e0b3071883e7120d686618d27e14ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>string_value_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a3b9b506bb9fddb109e0475f172b4b0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>double_value_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>ad5de5f203415d6a642f5b1c99daa1b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>int_value_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a7bedc765e8379c33e4536eb8f231c15e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>bool_value_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>affb1d3fbd9794453e69bff8db96eab1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const void *</type>
      <name>void_value_</name>
      <anchorfile>classfei_1_1Param.html</anchorfile>
      <anchor>a5bb197da63306d5e7564afa74ed75e6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>parameters</name>
    <filename>classparameters.html</filename>
    <member kind="function">
      <type></type>
      <name>parameters</name>
      <anchorfile>classparameters.html</anchorfile>
      <anchor>a2e2af680388704e90c6c0ceb0edc6cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~parameters</name>
      <anchorfile>classparameters.html</anchorfile>
      <anchor>a8ef05b5210024cb8d7ab84fddb4d05b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; char * &gt;</type>
      <name>paramList</name>
      <anchorfile>classparameters.html</anchorfile>
      <anchor>a7e5ce83b5a4da929c26141480ba5b79f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ParameterSet</name>
    <filename>classfei_1_1ParameterSet.html</filename>
    <class kind="class">fei::ParameterSet::const_iterator</class>
    <member kind="function">
      <type></type>
      <name>ParameterSet</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a115bdfd6b531e5984102827448ab20bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterSet</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a1415f067b86c9cd17e2a5bcd8baf4a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a55be045455fa3b24ae326330a31f2e0e</anchor>
      <arglist>(const Param &amp;param, bool maintain_unique_keys=true)</arglist>
    </member>
    <member kind="function">
      <type>const Param *</type>
      <name>get</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a73f76ca34eae7c472d471f591d884b71</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a3a5be628be2f3830a6528b55d9bf38f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>ab3b7df5b8f7ad4554837679cb48f18de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a9e6609b762f64cf1bf46409975ce2acc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntParamValue</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a334c98811b50a9ace14924664c7e8502</anchor>
      <arglist>(const char *name, int &amp;paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDoubleParamValue</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>ae66a15c1ed3539e2c01a081274775dbb</anchor>
      <arglist>(const char *name, double &amp;paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStringParamValue</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a5f190f6a8760d94ccf3251bd812f3728</anchor>
      <arglist>(const char *name, std::string &amp;paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBoolParamValue</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a5183f06b5ebc10e8c37715df217e413f</anchor>
      <arglist>(const char *name, bool &amp;paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVoidParamValue</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a420905b4b9e2d2d398243136bd8b4bfd</anchor>
      <arglist>(const char *name, const void *&amp;paramValue) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>findOffset</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a9a662e002677298817c648911f141ca9</anchor>
      <arglist>(const fei::Param *param) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>findOffset</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a11a527cf35c600d45882cca4d044cb0a</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const Param * &gt; *</type>
      <name>params_</name>
      <anchorfile>classfei_1_1ParameterSet.html</anchorfile>
      <anchor>a2554d1853051c4d672e0a5a2094e8135</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Pattern</name>
    <filename>classfei_1_1Pattern.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PatternType</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FIELD</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba4a7f8f771c2c1a529dd3481cdb5f6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba34bf54e6a65513749c98130e2f221ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_IDTYPE</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba49820e3a8103927e4546325ebfa11139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba76bf317b887aebd87044f4c66f419661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FIELD</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba4a7f8f771c2c1a529dd3481cdb5f6a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba34bf54e6a65513749c98130e2f221ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_IDTYPE</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba49820e3a8103927e4546325ebfa11139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a029e96e0a32f40147d49aacec768f09ba76bf317b887aebd87044f4c66f419661</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>ae72e22222807c01e54d5b8fae81ccaaf</anchor>
      <arglist>(int numIDs, int idType, snl_fei::RecordCollection *records)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a541879e113d40da9ed6a990dd952cead</anchor>
      <arglist>(int numIDs, int idType, snl_fei::RecordCollection *records, int fieldID, int fieldSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a96e1ee736b75eabb340b6a85f8c9ab43</anchor>
      <arglist>(int numIDs, int idType, snl_fei::RecordCollection *records, const int *numFieldsPerID, const int *fieldIDs, const int *fieldSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a4dbd31f5965a5a31af422bd15b34d0b9</anchor>
      <arglist>(int numIDs, const int *idTypes, snl_fei::RecordCollection *const *records, const int *numFieldsPerID, const int *fieldIDs, const int *fieldSizes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Pattern</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a061d7bf25b1142bce6c49b88acb5973e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PatternType</type>
      <name>getPatternType</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a50975d287bcc10a9cc377936c598d55d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIDs</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a3e201f2dfdcec8a5fb21c6614350114b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getIDTypes</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a14801e6454fac3efe54527afb200c973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>snl_fei::RecordCollection *const *</type>
      <name>getRecordCollections</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a616c836c5a836c44963623ccd0d5e88a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNumFieldsPerID</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a4e8271d3def336bb333c4748180154c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldIDs</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a6cbb437fa33a78352c1c2dcd019e1d8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNumIndicesPerID</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a0c56bba47accdc4711e05c1fba9c5017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumFields</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a27d05a156c232ac7e4995a78aa1acd1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a1c095e538f117844cbb869c1eb24570f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a3ccd8dc09f5a8c7fd3142b40f981d448</anchor>
      <arglist>(const Pattern &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>ab4eac3f69318fa162983ff465529c918</anchor>
      <arglist>(const Pattern &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PatternType</type>
      <name>type_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a240702eb175de4e858ee0bea00ed3546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numIDs_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a68858463d1da9977c32e8a3f612f45d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalNumFields_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a0bd6d302eb86454e5b31769bb32bc8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numIndices_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a120e732e420f93dc027ea89570874b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>data_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a2a57c1cb84e82f76aa371179ed397e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; snl_fei::RecordCollection * &gt;</type>
      <name>recordCollections_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a2610d15de5e951ab8e795afce528eaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int *</type>
      <name>idTypes_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>ab3c5dbd0a117c53b2095d763c5e32dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int *</type>
      <name>numFieldsPerID_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a1cb7b931e6b784119b4e308b638d39ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int *</type>
      <name>fieldIDs_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>af4c077809e5c9cdda50e181d205863d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int *</type>
      <name>numIndicesPerID_</name>
      <anchorfile>classfei_1_1Pattern.html</anchorfile>
      <anchor>a19ba60b822b15d9ced03884c54e41f5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::PointBlockMap</name>
    <filename>classsnl__fei_1_1PointBlockMap.html</filename>
    <member kind="function">
      <type></type>
      <name>PointBlockMap</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ad86320be9d8dfa2afeea13a9a753f476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointBlockMap</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ad35ce675bf6b043b792471b985e784a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPtEqualBlk</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>af487cda71190d90a446a57ffab1e0f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ptEqualBlk</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a6de5678968c6be54a60d41ce724dfd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setEqn</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a6d50981bc3b329ae85d1399291fc8892</anchor>
      <arglist>(int ptEqn, int blkEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setEqn</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>abf3829b09547b2b64db29f51ba81ac3c</anchor>
      <arglist>(int ptEqn, int blkEqn, int blkSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setBlkEqnSize</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>aacec29bdfdf406b092e13b7be687ca98</anchor>
      <arglist>(int blkEqn, int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnSize</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a9ddec87e14f12811e606551fcd1448d4</anchor>
      <arglist>(int blkEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxBlkEqnSize</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a97224acc7f0d14f5e6fa139b6eccdf1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxBlkEqnSize</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ad84790e530ae3f9e520968f73daea9d2</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>eqnToBlkEqn</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>af8bd9c871f8d88fb22e01043e78078fd</anchor>
      <arglist>(int eqn) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blkEqnToPtEqn</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a8611074e4def832e5b5008d0c8dab2ca</anchor>
      <arglist>(int blkEqn) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnInfo</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a76c2c77eecd4eee743a3f0b776db3a8b</anchor>
      <arglist>(int blkEqn, int &amp;ptEqn, int &amp;blkSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPtEqnInfo</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a82827ccf5a444367aeeccfd2a8e81854</anchor>
      <arglist>(int ptEqn, int &amp;blkEqn, int &amp;blkOffset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnOffset</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ae17f2df89d68d3ad20df5ddb2aa62966</anchor>
      <arglist>(int blkEqn, int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlyBlkEqn</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ac828381f7451ef1e6812e5ef93faf753</anchor>
      <arglist>(int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, int &gt; *</type>
      <name>getPtEqns</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a8f65b27caa0b8a465d2b51f7379dc6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, std::pair&lt; int, int &gt; &gt; *</type>
      <name>getBlkEqns</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a0f034baeef680bb44d757d5ed2abfb1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PointBlockMap</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ad659020a05a01d936181463de0d05077</anchor>
      <arglist>(const PointBlockMap &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>PointBlockMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a12ff65f3e49efbdb3df1417ac46a6622</anchor>
      <arglist>(const PointBlockMap &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt; *</type>
      <name>ptEqns_</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a0b7387b5d56807df56b1e48b241f1bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, std::pair&lt; int, int &gt; &gt; *</type>
      <name>blkEqns_</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>aec6458c6b7e2a6e2a8698f4ca8a6e010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxSize_</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>ad609b85358c7267aa63f1891a0fe3a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ptEqualBlk_</name>
      <anchorfile>classsnl__fei_1_1PointBlockMap.html</anchorfile>
      <anchor>a80e43e388d250fdee9d7140ce821cca5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Poisson_Elem</name>
    <filename>classPoisson__Elem.html</filename>
    <member kind="function">
      <type></type>
      <name>Poisson_Elem</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>abf12ea8109cfacdb6b8ed5d242b309b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Poisson_Elem</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aa248dba42937734beccc162950ca323a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID</type>
      <name>getElemID</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a852c6ef82236841854e3af3c08f6e0e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElemID</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a09a3337d53427040c31da7caac31cdf2</anchor>
      <arglist>(GlobalID gNID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numElemRows</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a2184ccb079facd3eaca6a734e4ea28dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>numElemRows</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a64beda91e5f0c8f8596b179bd1b59682</anchor>
      <arglist>(int gNERows)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numElemNodes</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a87b3d6a47772c1cf295c4c8a88a8684e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>numElemNodes</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ae4e5694b066869139cfd8b8ce9bfd001</anchor>
      <arglist>(int gNodes)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElemLength</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aa89bad95a16ebab64023c221660bc794</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElemLength</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a0de475f14ca39290602438cacc4d7b95</anchor>
      <arglist>(double len)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalLength</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a7c442a85e417a5e74a28713eaecba633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalLength</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a7cc936e0591456d7538791563cd83f9d</anchor>
      <arglist>(double len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocateInternals</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ae70f46abdf1b54ee01a77843c075ccc4</anchor>
      <arglist>(int DOF)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocateLoad</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aedf46e4933cef2eb5ac154fbe35c417e</anchor>
      <arglist>(int DOF)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocateStiffness</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aeff5ac70d58e077605c554f19a525c46</anchor>
      <arglist>(int DOF)</arglist>
    </member>
    <member kind="function">
      <type>GlobalID *</type>
      <name>getElemConnPtr</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a79707c58c56254ec26eaf147ac660ee7</anchor>
      <arglist>(int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLoad</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ac2acb6a3f918ddeebaca51fb53c76866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getElemLoad</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ab5751f6a9ad797d9feb2b34681688acd</anchor>
      <arglist>(int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateStiffness</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>afef3db377515c4b7390dff05cde70d5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double **</type>
      <name>getElemStiff</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>abf89c532d2f392d800567940a13ff52e</anchor>
      <arglist>(int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getNodalX</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a1f4b087c3c1a27fd91e794d3af6446c6</anchor>
      <arglist>(int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getNodalY</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a5f29421351703534662de95e0c0174fe</anchor>
      <arglist>(int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateCoords</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a65fa57cf9ece0ba5a634b5afda4e84d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>messageAbort</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a117c3eab42a96dd0321aa3801bb83a02</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a7a4b2fe7a43c869fbb664c6944e7935c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToScreen</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aa0c79e9938bab0e9ac0397531a4fa459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID</type>
      <name>globalElemID_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>af263e8b79eb72c5a96de8fbe14bb0cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ID_IsSet_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a957e5b9e98ef8ca5326a20354ef1683a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numElemNodes_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a8fd3d1c2c4de459080ff53abab409457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numElemRows_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aaa7f41d55f2f8e17cb55d14b28052e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID *</type>
      <name>nodeList_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ab437b692e3e096ac6bb65b6e3b649a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>nodalX_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a5e00a4ba28f2b676a64f6a3b80d82b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>nodalY_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ac5db1de521e6172d24918971c4dfee96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>elemStiff_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>aa68c22da279aaa1894c07d3be0577ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>elemLoad_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a42cb8f92ca2a68a1d7984b6b82efe05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>internalsAllocated_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ab8b5e3868ff57b9e0c325f52ce93b162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>elemLength_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a5f2933af89501a8982fae6115265ceda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>totalLength_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a8274570e66ea3dbd24ebf3ab512658d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>elemLengthIsSet_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>ade3ea67e93d7f4c1e0f32a809560f33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>totalLengthIsSet_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a8751c8a81fa50b949a4f2c2fa3a354a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>loadAllocated_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>a15b46aa241bf9e993c9ceecca4b8720d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>stiffAllocated_</name>
      <anchorfile>classPoisson__Elem.html</anchorfile>
      <anchor>acd0591341f1a3b45470609e4c758d1dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PoissonData</name>
    <filename>classPoissonData.html</filename>
    <member kind="function">
      <type></type>
      <name>PoissonData</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ad5a3b16205db2f3c404af78053ccfc8b</anchor>
      <arglist>(int L, int numProcs, int localProc, int outputLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PoissonData</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a3a4581eeb6fe53ceb48e14272337a9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getElemFormat</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ae58c130f148f765e7a2542b3345f1f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a878cd00e50d400625bee3f2c6aa717f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getFieldSizes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>af46fb8d8c3fa8d69a14278f93b878ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getFieldIDs</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ac3ee3bebadf08a85c57f3c41ded3e1d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID</type>
      <name>getElemBlockID</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a1849b1c913347bee2bad9effe670216b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalElements</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ac6fe9899f2973e16cf96ac5b6c706edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID *</type>
      <name>getLocalElementIDs</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>acc28911d948c2018ecab385fd5674abf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodesPerElement</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ada80ec5dc5b4d97c64dfbdd1e3061251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getNumFieldsPerNodeList</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>adc563b5e6d75130cc2e38076b9b18c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int **</type>
      <name>getNodalFieldIDsTable</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a27f011efd30a69a3a61526bed3a015c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID *</type>
      <name>getElementConnectivity</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a251d1883018d205bb531103b7824b4ab</anchor>
      <arglist>(GlobalID elemID)</arglist>
    </member>
    <member kind="function">
      <type>double **</type>
      <name>getElemStiffness</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ad0eecd2276ec84f4f9cdb7ec141af12c</anchor>
      <arglist>(GlobalID elemID)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getElemLoad</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a46a3ad3cee1af856517ff44b31e98d5d</anchor>
      <arglist>(GlobalID elemID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBCNode</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a187fa19809a79fc71da4a5dfc250e983</anchor>
      <arglist>(GlobalID nodeID, double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateBCs</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aad83e103dc8ab4f4197d101d5a471351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBCNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a0607a4f18d3c866f5f0d1fed7722ac21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID *</type>
      <name>getBCNodeIDs</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>abc6f50b18db366460308b974b38d8492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBCFieldID</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a52cce6b40c3863bb700811dfc3eeecda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBCValues</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a53633f1ab217a2e30f8c086bfc47bb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLeftSharedNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a8d89f7f35435436e99ee39544a80c808</anchor>
      <arglist>(int &amp;numShared, GlobalID *sharedNodeIDs, int *numProcsPerSharedNode, int **sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRightSharedNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ab768c480e99c7b2f895e6df84ae647d6</anchor>
      <arglist>(int &amp;numShared, GlobalID *sharedNodeIDs, int *numProcsPerSharedNode, int **sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTopSharedNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a15eb9957b17ad34ed9deed8879691850</anchor>
      <arglist>(int &amp;numShared, GlobalID *sharedNodeIDs, int *numProcsPerSharedNode, int **sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBottomSharedNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a6d8829dac5d33cde6ed1ce2669aba229</anchor>
      <arglist>(int &amp;numShared, GlobalID *sharedNodeIDs, int *numProcsPerSharedNode, int **sharingProcs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check1</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a5462e045e148e1cc65db6fc9084d6165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculateDistribution</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aee4c60329eb7ae6198ce58a18d03eb31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>messageAbort</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aa5fe034e624c99f0dfc81905a1fe52c3</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculateConnectivity</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a3767e25527ba588cea8fd99187f6f2d2</anchor>
      <arglist>(GlobalID *conn, int size, GlobalID elemID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeFieldStuff</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a3bd98f8241af9b6aa9acea7f3a8dfb14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteFieldArrays</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aeb0f22ebdc20097205fb7085502f02fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printSharedNodes</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a6be84b12234ef68124a58510c968bae1</anchor>
      <arglist>(const char *str, int numShared, GlobalID *nodeIDs, int **shareProcs, int *numShareProcs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Poisson_Elem *</type>
      <name>elem_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aee8709b397e71b34afd2879de37a975a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalElements_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aa386ec5287bed5b1a51622d9ed9039f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>startElement_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a5275c67ead3484ec4110be10189dfe18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ab63683d6e734e8839c58f89ce7c3a2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a6f254063081432f64c8f4df5d68e2950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a506dd3b290b49e47ce50073b15aceb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a0e9c48e41e957f84dc9b472e458a527c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>procX_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a0bc8e38321055ab2c6211c97374f7755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>procY_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>abcfd800ac828c2ef10ca506d02bc1cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxProcX_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a91aff41ef04a6072f6190f0a418f733d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxProcY_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a1fbb9137f1ec961a50ae68a3d4c58021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numElemBlocks_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a826ded66246de6c4b492458079984fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>solveType_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ab841a2184cadf0b10a330daa68a6df87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodesPerElement_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a6a470a294e07340a24abd237f8940177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fieldsPerNode_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a262b168f30adee32b50575551bb372ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID</type>
      <name>elemBlockID_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ae1bba3c986a887fd7dc5b4a27aa89d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>elemSetID_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a0b71c35cc13760e90abae46412aa6b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>elemFormat_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ae432f6281a6686a5bd9a0f963c91f7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fieldSize_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a8b9a35dd333040375c0334a17ccded5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>numFields_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>afba06cbc28c62ee0e65fd7ca0c7237f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int **</type>
      <name>fieldIDs_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>acdb273b435b57d04e743936ceb22d5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>fieldArraysAllocated_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aef2a56325cea2c9693f7e8374dda7e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID *</type>
      <name>elemIDs_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a485dedb59f541c711546e0bfe1a5fd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>elemIDsAllocated_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>a201fa6d015471377c79b302fd28e9165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>BCNodeIDs_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>ad989a2f0d86f2c16c3b0a2dd1820f7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>BCValues_</name>
      <anchorfile>classPoissonData.html</anchorfile>
      <anchor>aa40b3d3f790a79fd56bede2dc5c1073b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProcEqns</name>
    <filename>classProcEqns.html</filename>
    <member kind="function">
      <type></type>
      <name>ProcEqns</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a2af29b33ffcfc31f6d2dbabbd3f3d026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProcEqns</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a701ee29904c8fb4c111759ac0f2cb5fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProcEqns *</type>
      <name>deepCopy</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a4b4eb6963656863285f065af8fc1f2c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumProcs</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a4d5ce97b8ec87c56484dc009609e7282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>procsPtr</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>ab747ccb101a118c6007fbcfc8fa0c646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>eqnsPerProcPtr</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a1529e8f050a54fde710c53fcf03ece9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt; &amp;</type>
      <name>procEqnNumbersPtr</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a73f6488e3fa5009a1a39e9be14fbfddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt; &amp;</type>
      <name>procEqnLengthsPtr</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>ab7be39c397c86da2bd1660b1197642a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEqn</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a998ef05cbc2079526703a4505f0ebed4</anchor>
      <arglist>(int eqnNumber, int proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEqn</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>aa029778191d433952bd99f8f4a571dfb</anchor>
      <arglist>(int eqnNumber, int eqnLength, int proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcEqnLengths</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>adec307d03ec42f1b51ef7d20c4aee2dc</anchor>
      <arglist>(int *eqnNumbers, int *eqnLengths, int len)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteMemory</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a009d49c81b44dd8c1e345844b3f29ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalAddEqn</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a356e4e88544d9a9116a7486f1b2932b2</anchor>
      <arglist>(int eqnNumber, int eqnLength, int proc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>procs_</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a4facafe5132f24aa119a99afad106a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>eqnsPerProc_</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a5e1a999117cdf1144253d7512d7e19df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt;</type>
      <name>procEqnNumbers_</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>aef7f60a4d41d76fba01a44b9e0f8cfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; * &gt;</type>
      <name>procEqnLengths_</name>
      <anchorfile>classProcEqns.html</anchorfile>
      <anchor>a062f01384526230fa40599c3397c2352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>putBlockFieldNodeSolution</name>
    <filename>classputBlockFieldNodeSolution.html</filename>
    <member kind="function">
      <type></type>
      <name>putBlockFieldNodeSolution</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>ab8b8da94e9b471aed0bb1a062d1d446a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~putBlockFieldNodeSolution</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>afdb9e32f757a7dcd2b25bc34d0b9580c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>elemBlockID</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>acfecf68c2c90abca64d50643a9f4725c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldID</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>acd9f57649da58bb5e32f7a10c23513ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fieldSize</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>a8958defadc7f7772b36429a9a7c3f4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>a64a240cc6a0f289b6068c79f3732808a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>a334762b8bc84436318572357cfefb092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>estimates</name>
      <anchorfile>classputBlockFieldNodeSolution.html</anchorfile>
      <anchor>a53ada1b4168dadc9641d3454122142b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::RaggedTable</name>
    <filename>classsnl__fei_1_1RaggedTable.html</filename>
    <templarg>MAP_TYPE</templarg>
    <templarg>SET_TYPE</templarg>
    <base>fei::IndexTable</base>
    <member kind="typedef">
      <type>MAP_TYPE</type>
      <name>map_type</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a4228710981456c7aec6cab67be485d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SET_TYPE</type>
      <name>row_type</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a45e95ca8b35adf4210ce55ac5711c478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MAP_TYPE::iterator</type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a0b2a1931440decac17522c43207d0318</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a3d6fea75c98a4139d474abbc2aece22d</anchor>
      <arglist>(int firstKey, int lastKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>ac754040553e61ec10a861b5ace3322c5</anchor>
      <arglist>(const RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a8c958e1f9635204b85d52a367a20b9f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDiagonals</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>aeca77ce37787b2d5d2df0d3531f6f495</anchor>
      <arglist>(int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIndices</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a91daf6173422f1e15cc6a4ccf9a7d2b2</anchor>
      <arglist>(int row, int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIndices</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a76f7010d46f0b0aa017d8afad65dd010</anchor>
      <arglist>(int numRows, const int *rows, int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>MAP_TYPE &amp;</type>
      <name>getMap</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>abe9648fc97d60757439662fffa8c9831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MAP_TYPE &amp;</type>
      <name>getMap</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a73ff822850645bea82078ca46f169b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SET_TYPE *</type>
      <name>getRow</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a2043386de3ac47c759af73f93a4b3c8c</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a36ecb778fa5d51ba4382d7da02ffa60c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>ae5b5034f767afafd459f902c8cb4d757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a57052314effff2bbc2653fb223a409a9</anchor>
      <arglist>(const RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;rhs, bool quiet=true) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MAP_TYPE</type>
      <name>map_</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a7ca28a06fb526d296f53a87bd11b762c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool_alloc&lt; SET_TYPE &gt;</type>
      <name>poolAllocatorSet_</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>a8b19147822b0046eba513cc51534591d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SET_TYPE</type>
      <name>dummy</name>
      <anchorfile>classsnl__fei_1_1RaggedTable.html</anchorfile>
      <anchor>ab86b1da178660bb47596df3553f70ea3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::RaggedTable&lt; MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt;</name>
    <filename>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</filename>
    <base>fei::IndexTable</base>
    <member kind="typedef">
      <type>MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;</type>
      <name>map_type</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a31cff77cb050746548e2e3db84891c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fei::ctg_set&lt; int &gt;</type>
      <name>row_type</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a15744e6721cf5b9950c4114d46ce31dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>aac74d212019e38e356ebc6a4d10a5849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>ad1ef5b4a92de7131fed92efb5c76adfb</anchor>
      <arglist>(int firstKey, int lastKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>ac9674ec18dbed6892df92c68541fb23e</anchor>
      <arglist>(const RaggedTable&lt; MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RaggedTable</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a65863e566f24cee719db041199d33f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDiagonals</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>ac913e3427bddede9cd42362d56418747</anchor>
      <arglist>(int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIndices</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a98fc5fbbed24c7ff17f0bd190cda2bb4</anchor>
      <arglist>(int row, int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIndices</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>ae8f967be8bd53894d0fd51046439aaca</anchor>
      <arglist>(int numRows, const int *rows, int numIndices, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type>map_type &amp;</type>
      <name>getMap</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>afb8b48f0af8893d6aa769d2d70c62278</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>row_type *</type>
      <name>getRow</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a76f9aeca2112620e2c09bf883a375ce2</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>abca5a49f58c41d58e17ee2b8bb08703a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a123517686197dc6be7392a36500de2d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map_type</type>
      <name>map_</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a18ae50f74493d1900ebe09e54009a26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_Pool_alloc&lt; row_type &gt;</type>
      <name>poolAllocatorSet_</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a08ffb6beae9f2ece11e26ed559e7adbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>row_type</type>
      <name>dummy</name>
      <anchorfile>classsnl__fei_1_1RaggedTable_3_01MapContig_3_01fei_1_1ctg__set_3_01int_01_4_01_5_01_4_00_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>ac37377e9c9473f2a838410d38010aa21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei_Pool_alloc::rebind</name>
    <filename>structfei__Pool__alloc_1_1rebind.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>fei_Pool_alloc&lt; U &gt;</type>
      <name>other</name>
      <anchorfile>structfei__Pool__alloc_1_1rebind.html</anchorfile>
      <anchor>ac160c435c8c026bd7dac30180c1421f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Record</name>
    <filename>classfei_1_1Record.html</filename>
    <templarg>GlobalIDType</templarg>
    <member kind="function">
      <type></type>
      <name>Record</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a5b7295a573bb0300b12c8d4eba1753cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Record</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a8563411222bb5246f9ed6ff1bb27817d</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Record</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>aa272e4fab597e87fdab24a38c8a04c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a11de1e8859854a8d24abf6a2eb1cd918</anchor>
      <arglist>(const GlobalIDType &amp;ID)</arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>getID</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a5489189922015575cd699db8f9a21ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumber</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a64c85d9fd7688c75428f3b271eb39bd1</anchor>
      <arglist>(const GlobalIDType &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>GlobalIDType</type>
      <name>getNumber</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a142be47c684c05d3884d02663d3181c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a2ba476340dcc10e0c60f0d876c8cb1ab</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;rcd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>ad17268211a3257b663c809f46ff65e11</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;rcd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a7ad664168cd99386c47fde67b9a294c7</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;rcd) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a6f4e6c2f6b432483111e9ecc2016e9eb</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;rcd) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerProc</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a915e71619ce1a6693b96e6f3625f7cea</anchor>
      <arglist>(int owner)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProc</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>abd8b382dc431cf0a4ab886739ecd155c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldMask</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>ab0594656dd2c0de90b975aa776dd5ba1</anchor>
      <arglist>(fei::FieldMask *fm)</arglist>
    </member>
    <member kind="function">
      <type>fei::FieldMask *</type>
      <name>getFieldMask</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a6bab62e367fadeb8a7fad8baba990bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const fei::FieldMask *</type>
      <name>getFieldMask</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>aabe7ce9d788ead5d4124393d3f896b07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffsetIntoEqnNumbers</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a694346e48b780a7df46d83ade67780e9</anchor>
      <arglist>(int offset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffsetIntoEqnNumbers</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>ac8efa22d6d082a4c9de74d82d5616db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSlaveDof</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a86d20ad127a84c063b7cee0367a1d3ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hasSlaveDof</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a9ca3f9abf1c366c9ffb92076cc9c706a</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>Record&lt; GlobalIDType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a9a921d7b93f1103b0ce0f687917b0f78</anchor>
      <arglist>(const Record&lt; GlobalIDType &gt; &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInLocalSubdomain_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a603b718a2cb6b2868778160576901f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>ID_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a006abe749a186f3a734c358332c77f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalIDType</type>
      <name>number_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a2d13fe0f9de79a0f74d39bb297753324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FieldMask *</type>
      <name>fieldMask_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a4111ab7b3203ea885a6896bae2a97da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>offsetIntoEqnNumbers_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a3a1c1e444c50b1f25c3e3a8ec74a44ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ownerProc_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a7ddcb5ad16255ee75ed2e1882472adcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hasSlaveDof_</name>
      <anchorfile>classfei_1_1Record.html</anchorfile>
      <anchor>a20efdd27d47b3f82ddb5fb2de864518c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Record_Operator</name>
    <filename>classfei_1_1Record__Operator.html</filename>
    <templarg>GlobalIDType</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Record_Operator</name>
      <anchorfile>classfei_1_1Record__Operator.html</anchorfile>
      <anchor>a8962a9218e20414464fb03cd466e6d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>classfei_1_1Record__Operator.html</anchorfile>
      <anchor>a2e3dcc90246f2cf4c3d69685495ff23a</anchor>
      <arglist>(Record&lt; GlobalIDType &gt; &amp;record)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Record_Operator&lt; int &gt;</name>
    <filename>classfei_1_1Record__Operator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Record_Operator</name>
      <anchorfile>classfei_1_1Record__Operator.html</anchorfile>
      <anchor>a8962a9218e20414464fb03cd466e6d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>classfei_1_1Record__Operator.html</anchorfile>
      <anchor>a2e3dcc90246f2cf4c3d69685495ff23a</anchor>
      <arglist>(Record&lt; int &gt; &amp;record)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::RecordAttributeCounter</name>
    <filename>classfei_1_1RecordAttributeCounter.html</filename>
    <base>Record_Operator&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>RecordAttributeCounter</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a730ca7218fbea08a2a626d7342bcbb27</anchor>
      <arglist>(int proc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordAttributeCounter</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>ace45e3edd17da8a754e1525c34be1265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>ad4d8dd8e7fc81c7f03b06c09fa6e080f</anchor>
      <arglist>(fei::Record&lt; int &gt; &amp;record)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocalDOF_</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a6b721d94154968c61e502cc645837344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocalIDs_</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a97f66faf1eab3ac385bd9d53d97fbdaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLocallyOwnedIDs_</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a58fb6f7c5a05c29f616ebe6d8d0a3681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRemoteSharedDOF_</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a223ef0d00482b5fdfeb36a0b95cedcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>proc_</name>
      <anchorfile>classfei_1_1RecordAttributeCounter.html</anchorfile>
      <anchor>a477392a8142ad29909da898590129586</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::RecordCollection</name>
    <filename>classsnl__fei_1_1RecordCollection.html</filename>
    <member kind="function">
      <type></type>
      <name>RecordCollection</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ab9aa6f9b8a2a07fcb07e86972e281ee3</anchor>
      <arglist>(int localProc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordCollection</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a3d0a7db711a4e41ab801fe07891b90ad</anchor>
      <arglist>(const RecordCollection &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordCollection</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ab8c211acd05325498912bf9b36a3d3c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIDMap</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ac5b3b32a00a160b49c58d85e956d8992</anchor>
      <arglist>(const int *localIDs_begin, const int *localIDs_end, const int *globalIDs_begin, const int *globalIDs_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRecords</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a4b47945bd3064e9a0b8b8967c503d64d</anchor>
      <arglist>(int numIDs, const int *IDs, std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks, int *recordLocalIDs=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRecords</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ab51f12bba646414d1d4a90d0e5d31f8c</anchor>
      <arglist>(int fieldID, int fieldSize, int numIDs, const int *IDs, std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks, int *recordLocalIDs=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwners_lowestSharing</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a4bf736e3287829760405e993b4c5d0b9</anchor>
      <arglist>(fei::SharedIDs&lt; int &gt; &amp;sharedIDs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwners_local</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a411daa931e559f37251b1b1ff5c9cfef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumRecords</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a89f94c7524ea55de0bd316f242bcd93f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, int &gt; &amp;</type>
      <name>getGlobalToLocalMap</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a4dd3b47bb508d97d5fee05b9cae1f302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; int, int &gt; &amp;</type>
      <name>getGlobalToLocalMap</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a3facf2ea762c7bb52e6f997a2eaa6447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; fei::Record&lt; int &gt; &gt; &amp;</type>
      <name>getRecords</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a58c862697fd6494384f99f905ad82817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; fei::Record&lt; int &gt; &gt; &amp;</type>
      <name>getRecords</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a9392c325d1188abd4d964ed5b8e3a8d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fei::Record&lt; int &gt; *</type>
      <name>getRecordWithID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>adc592afbf4bf846512aa357eda9a9ee2</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>const fei::Record&lt; int &gt; *</type>
      <name>getRecordWithID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a43a8e18a5dbf2d4ee061a47b896f6563</anchor>
      <arglist>(int ID) const </arglist>
    </member>
    <member kind="function">
      <type>fei::Record&lt; int &gt; *</type>
      <name>getRecordWithLocalID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ae217efd1c59a12712ef48e25cf4a684c</anchor>
      <arglist>(int lid)</arglist>
    </member>
    <member kind="function">
      <type>const fei::Record&lt; int &gt; *</type>
      <name>getRecordWithLocalID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>ab9c2f366bb9edb1c4ba6b081ad75e2a0</anchor>
      <arglist>(int lid) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a02676d68cb96ce6465914f1dc742f4bc</anchor>
      <arglist>(int global_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndex</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a155542e86b8a1e1631a879fabdd53209</anchor>
      <arglist>(int ID, int fieldID, int fieldSize, int fieldOffset, int whichComponentOfField, const int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndexLocalID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a64104d92efd31c337e8e04331b3dfa7c</anchor>
      <arglist>(int localID, int fieldID, int fieldSize, int fieldOffset, int whichComponentOfField, const int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalBlkIndex</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>acfa381deb599e1840511b00e4b4d3340</anchor>
      <arglist>(int ID, int &amp;globalBlkIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugOutput</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>af65e3ee2d3584fd8d681b3a730e11cd5</anchor>
      <arglist>(FEI_OSTREAM *dbgOut)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>aa4c519d7a58c3235e0caa2125d96f70f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a663629dbb5fe6837705b0a7309bd1404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::Record&lt; int &gt; &gt;</type>
      <name>m_records</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>aff93f6987b6061affe1939ebb0dfb477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>m_global_to_local</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a261562dc78ffcaf8d993583f415450cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_minID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a3021ce56013b9b7d28d4be9f26dfdb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_maxID</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a9e8a7fd0d6d7967670b99939b8fa4354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a871c91e72021e0e4f423e387318bf190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>debugOutput_</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>a7c0a21e682696d6f97667a8e9d063eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FEI_OSTREAM *</type>
      <name>dbgOut_</name>
      <anchorfile>classsnl__fei_1_1RecordCollection.html</anchorfile>
      <anchor>aa7620054aca3e55404bdb1767bf606ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::RecordMsgHandler</name>
    <filename>classsnl__fei_1_1RecordMsgHandler.html</filename>
    <base>MessageHandler&lt; int &gt;</base>
    <member kind="enumvalue">
      <name>_FieldMasks_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02fa9feac53fc63dff298a119f50377248cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_MaskIDs_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02faef697fd50e21faed7595998c02335ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_EqnNumbers_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02fa53465a1138d4751075031b87b2db43e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_FieldMasks_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02fa9feac53fc63dff298a119f50377248cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_MaskIDs_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02faef697fd50e21faed7595998c02335ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_EqnNumbers_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a05ced8a52485ee87fcb954ca8be4b02fa53465a1138d4751075031b87b2db43e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordMsgHandler</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>af63194cdbbaaf734e7adcd9287abcd1b</anchor>
      <arglist>(int localProc, RecordCollection *recordCollection, snl_fei::PointBlockMap &amp;ptBlkMap, std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks, std::vector&lt; int &gt; &amp;eqnNumbers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordMsgHandler</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>ac29fd6f5dcf03b1b98a2396a6cba1fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>af725ce60378277c655a7bd9f5641d88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a0f954e53012d1e9c0422d772fa3418ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a536a033e46ff0cf37c093a088c5f3a07</anchor>
      <arglist>(int destProc, int &amp;messageLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessage</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a77186508e24e442cc56f4acf386a17a9</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processRecvMessage</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a90e463e9dd2b3d4e719cb47244676183</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTask</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a931dd8efcb7feb39002053e67a2bf2b0</anchor>
      <arglist>(int task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendPattern</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a86efe203f5709a73dd0b0611e90ca7e0</anchor>
      <arglist>(fei::comm_map *pattern)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecvPattern</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>ad7bf8e30216c98fc383d4f66b60bd234</anchor>
      <arglist>(fei::comm_map *pattern)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>localFieldMaskMessageSize</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a7395c9b4d3365ca35100de5c09cb7c9d</anchor>
      <arglist>(std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>packLocalFieldMasks</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>af880ace60bf1a2687b4d904b4b227f80</anchor>
      <arglist>(std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks, std::vector&lt; int &gt; &amp;localFieldMasks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>addFieldMasks</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a33e4993c1ef0f63c0d415a4ba0ff60ab</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;msg, std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>packMaskIDs</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a014e86df90f018e562da5b6ee285fecd</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>mergeMaskIDs</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a38690febcce95f944d3c149997b459da</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>eqnNumbersMsgLength</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a15ef52f2ce46e2cdf9a4c4809eaa4619</anchor>
      <arglist>(int destProc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>packEqnNumbersMsg</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a9a51c6f7c61cd2de835d7fb7b6f14503</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeEqnNumbers</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>af3d4b5f925f35e232a70d61e9c1e81b4</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>sendPattern_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>aefcf924c868007eb374d39129f281714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>recvPattern_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a98ace7b91fc650d4ced98bde38a4f812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RecordCollection *</type>
      <name>recordCollection_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a7abd927577386cd72ca66b2b8419c88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::PointBlockMap &amp;</type>
      <name>ptBlkMap_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>ad3b0f3649432946d336a6a6d9657987f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; fei::FieldMask * &gt; &amp;</type>
      <name>fieldMasks_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a87555cf13b9f81f374ff2a13ea68b33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>whichTask_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a76db236185e8cd6a382458662bd9a376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sendProcs_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a6ec8ddab8954724e20aae104801435d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recvProcs_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>ae409063bec01e8fe94e9c466599e0b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>eqnNumbers_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a5462827faa416368d5e170f1327998a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classsnl__fei_1_1RecordMsgHandler.html</anchorfile>
      <anchor>a65737cbbb86a7c0b16815ae4c1d1d8de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Reducer</name>
    <filename>classfei_1_1Reducer.html</filename>
    <base protection="private">fei::Logger</base>
    <member kind="function">
      <type>void</type>
      <name>setLocalUnreducedEqns</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a9bf2271818405bde9cede57f58875b31</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;localUnreducedEqns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGraphEntries</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a845c5f9e5da9a519b0f59ad2c0f6c0d1</anchor>
      <arglist>(fei::SharedPtr&lt; fei::SparseRowGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGraphIndices</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a9dc1a8a153dffd9d2b6a997a326388fc</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, fei::Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSymmetricGraphIndices</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aaee9ef2b994a75b9d09d808d11e46ed4</anchor>
      <arglist>(int numIndices, const int *indices, bool diagonal, fei::Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addMatrixValues</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a6ce81a5066017cb154dfaa42f5156b14</anchor>
      <arglist>(int numRows, const int *rows, int numCols, const int *cols, const double *const *values, bool sum_into, fei::Matrix &amp;feimat, int format)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVectorValues</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a49e80a8321c63e8bdcbef8eb41421213</anchor>
      <arglist>(int numValues, const int *globalIndices, const double *values, bool sum_into, bool soln_vector, int vectorIndex, fei::Vector &amp;feivec)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutVectorValues</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a662e7daf8d2a2f15e73bd1c6b55a34ca</anchor>
      <arglist>(int numValues, const int *globalIndices, double *values, bool soln_vector, int vectorIndex, fei::Vector &amp;feivec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSlaveMasterEqns</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a1c8a03966ee9243c9c5e987af1dace84</anchor>
      <arglist>(int slaveEqn, std::vector&lt; int &gt; &amp;masterEqns)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSlaveEqn</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a93a96099e98ebc281e92b7113b7a5824</anchor>
      <arglist>(int unreducedEqn) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSlaveCol</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ab9254fc9ea0a5a521c5dd4f5d9bdda84</anchor>
      <arglist>(int unreducedEqn) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateToReducedEqn</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ab3b2845aa60799488e469a4c1c032bfa</anchor>
      <arglist>(int unreducedEqn) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateFromReducedEqn</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a89854f0f2e10c05c905d82bd69f589d4</anchor>
      <arglist>(int reduced_eqn) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assembleReducedGraph</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a0af002643c5caca3b9b74aa1eabd79c1</anchor>
      <arglist>(fei::Graph *graph, bool global_gather=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assembleReducedGraph</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aabd270963fa9e740388a7e2f88a5071d</anchor>
      <arglist>(fei::SparseRowGraph *srgraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assembleReducedMatrix</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ac7a819be1990a72ff0283015dbe255ed</anchor>
      <arglist>(fei::Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assembleReducedVector</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a5093ee6383e6f99e1f6680fa408f9166</anchor>
      <arglist>(bool soln_vector, fei::Vector &amp;feivec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getLocalReducedEqns</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aae7297b8c83cf0883e8564decca08016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aae2177c9d00db984253ac137d307d9f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>expand_work_arrays</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a3fbe7c2f0c639c5b65207ce359eaf8f3</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrD_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>addaa1a66cfb3fcbf3b76794c097b73ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>slavesPtr_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ab4d42eda11b498b554f3e71fd33910ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat</type>
      <name>Kii_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a780f8a5e512851f34c6ea307f257996d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat</type>
      <name>Kid_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a6a5567f62d70431237f13c524cc963cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat</type>
      <name>Kdi_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ac88dab0849ae1c12a3a9ab2f797ccc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat</type>
      <name>Kdd_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>acc9aa954b80a1dfc68777a80f00540b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKii</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a282a5c912b26f808975fd4b472fd86e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKid</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a6a188a3a5ceaf1593bfad2c043dc47fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdi</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a42abc1a96bfc4e17a16cfe3e7f3fd84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdd</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a290f8e0c95ba586d26317e4396476b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>fi_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a67d4cb023b29f95950240d8f25bc7a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>fd_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a6a326c0404aea50ae84529ea67fb214c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>csvec</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a0c7cd5f88bb82ba840b0baf361bc05de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>csvec_i</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ab9739a7274fb4c53082f11b827a93d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat1_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a85330a90c1fdb4ff4292a85f67558e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat2_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aaab8e7fb7e8f06bc0dc71e9001291494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>tmpVec1_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ab9097d9069cf8af70a648aef4f7848d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>tmpVec2_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a5053b31864d9962c973bce9b1a9f2318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec</type>
      <name>csg_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a96e8e19ead0bb948700df067dbac3c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>g_nonzero_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a52c1a70535b96933b1ee34d10f16a414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>localUnreducedEqns_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a71ce2661bd09a015df4c742e31c7c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>localReducedEqns_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a1b92dafb2a911c30ad308ab0a1d62816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>nonslaves_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a2baac651f441003823c14a0fd3019330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>reverse_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ae8e1f65846c57b3aaeccaf5283526579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool *</type>
      <name>isSlaveEqn_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a96c09823696289019c245642f9e8a2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalSlaves_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a1ec6aeeacc4478a69f9c6b619656749a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalSlaves_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ad4749993832102d3e23cfd001f92af14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalReducedEqn_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a9ee3109c25fefed0bdbd731f86266afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalReducedEqn_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a8f7a86350640f336fa983d81126a1af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lowestGlobalSlaveEqn_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a802f0736985c4bd23842e5510e4ab4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>highestGlobalSlaveEqn_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a47480ad1d3771a69741a7a583979cf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>afc0acc8833bc3d42f3eba620ab52998b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a273800c2370c9550a15a295dbf211dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ac6adb2c3ed0e3bf341166857d9bdc178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a9487b288384d831427c8ae9bb01bee72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>mat_counter_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>ad25422f5d9b92c5160f2054a31dd7901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>rhs_vec_counter_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a0b26e4fb96c26fd15fa8657144ef8a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool *</type>
      <name>bool_array_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a7990209febc41313a33f433a3aff83c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>int_array_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a1a733983d132bddbea8298f98cf019f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>double_array_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a117f6e1abb28bd03701e3a189ee1d886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>array_len_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a5c4eb76ca9497940000ef28517280c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>work_1D_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aefeca836f8d4585a50d4054ae8483376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const double * &gt;</type>
      <name>work_2D_</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a50333489b0b2abfe2fe60c50ed13e67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reducer</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>aa90d042ff3462e2d747acff2bd6e8d62</anchor>
      <arglist>(fei::SharedPtr&lt; FillableMat &gt; globalSlaveDependencyMatrix, fei::SharedPtr&lt; CSVec &gt; g_vector, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reducer</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a43738870144308f61d8ad6597bca5bce</anchor>
      <arglist>(fei::SharedPtr&lt; fei::MatrixGraph &gt; matrixGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Reducer</name>
      <anchorfile>classfei_1_1Reducer.html</anchorfile>
      <anchor>a5294fea50e9ff8199ea40f3d15465e04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::ReverseMapper</name>
    <filename>classfei_1_1ReverseMapper.html</filename>
    <member kind="function">
      <type></type>
      <name>ReverseMapper</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>a064e862fa743adb6bc82c4a46e46d82c</anchor>
      <arglist>(const VectorSpace &amp;vspace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReverseMapper</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>a6aa619398558d50c0b8c5829e6254f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnRecord</type>
      <name>getEqnRecord</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>a38b8ff6ff3e54e91f46f7f53025fe02f</anchor>
      <arglist>(int global_eqn, int option=0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ReverseMapper</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>ac95107e5be518291e3471e91026e8c9a</anchor>
      <arglist>(const ReverseMapper &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReverseMapper &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>a074a63a7ab55074f68291ef9eebb9d49</anchor>
      <arglist>(const ReverseMapper &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, EqnRecord &gt;</type>
      <name>eqnmap_</name>
      <anchorfile>classfei_1_1ReverseMapper.html</anchorfile>
      <anchor>a985bbba64fe0ce3a6602e269d15e0a88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>setIDLists</name>
    <filename>classsetIDLists.html</filename>
    <member kind="function">
      <type></type>
      <name>setIDLists</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>ad498930832aed4e14f0b91116ed1474b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~setIDLists</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>a9749b37bac139c76b497a0730dd4dd0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>matrixIDs</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>ad21894dbf587d50d037623155ec18693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numMatrices</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>accfe24c4bca99351ac3df2dd6330e076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>rhsIDs</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>a8d417c9a2bbc7474eafc637874faa3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRHSs</name>
      <anchorfile>classsetIDLists.html</anchorfile>
      <anchor>aa66bcb876e9bf4c6d99f7cf1d596d82e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::SetTraits</name>
    <filename>structsnl__fei_1_1SetTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>insert</name>
      <anchorfile>structsnl__fei_1_1SetTraits.html</anchorfile>
      <anchor>a736f1ca47a208eb45e598534fb8b1561</anchor>
      <arglist>(SET_TYPE *set_obj, typename SET_TYPE::key_type item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>snl_fei::SetTraits&lt; fei::ctg_set&lt; int &gt; &gt;</name>
    <filename>structsnl__fei_1_1SetTraits_3_01fei_1_1ctg__set_3_01int_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>insert</name>
      <anchorfile>structsnl__fei_1_1SetTraits_3_01fei_1_1ctg__set_3_01int_01_4_01_4.html</anchorfile>
      <anchor>aa5cfcb6239a05eb8f224a12671141ff0</anchor>
      <arglist>(fei::ctg_set&lt; int &gt; *set_obj, int item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::SharedIDs</name>
    <filename>classfei_1_1SharedIDs.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::map&lt; T, std::set&lt; int &gt; &gt;</type>
      <name>map_type</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a6ea80ec5cb10af48881f9d32bc707430</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a45d63c3a8aedfddd6235d333f6ba6c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>ab6b4aefac3d545b4637fd6df7691d4f3</anchor>
      <arglist>(const SharedIDs&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a95d73fa2531031553582977e2ab529c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSharedID</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a7898735fc7073efaf33e8d324d302102</anchor>
      <arglist>(const T &amp;ID, size_t numSharingProcs, const int *sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>map_type &amp;</type>
      <name>getSharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a87d5fa123bab9008861bca6ea1c32b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const map_type &amp;</type>
      <name>getSharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a9751100219b00ecec0edd1cbf755d73e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getOwningProcs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a598b4300717049d9c31966034d5bffeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getOwningProcs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>aaa70a5db068e27e2a0624ded64aa6b9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map_type</type>
      <name>sharedIDs_</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a1df01d9a09c3fb5e5c07b53c2fd993e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>owningProcs_</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>aa2cda5e1ecc72c758bb88b2555f8972b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedIDs&lt; int &gt;</name>
    <filename>classfei_1_1SharedIDs.html</filename>
    <member kind="typedef">
      <type>std::map&lt; int, std::set&lt; int &gt; &gt;</type>
      <name>map_type</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a6ea80ec5cb10af48881f9d32bc707430</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a45d63c3a8aedfddd6235d333f6ba6c06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>ab6b4aefac3d545b4637fd6df7691d4f3</anchor>
      <arglist>(const SharedIDs&lt; int &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a95d73fa2531031553582977e2ab529c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSharedID</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a7898735fc7073efaf33e8d324d302102</anchor>
      <arglist>(const int &amp;ID, size_t numSharingProcs, const int *sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>map_type &amp;</type>
      <name>getSharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a87d5fa123bab9008861bca6ea1c32b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const map_type &amp;</type>
      <name>getSharedIDs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a9751100219b00ecec0edd1cbf755d73e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getOwningProcs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a598b4300717049d9c31966034d5bffeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getOwningProcs</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>aaa70a5db068e27e2a0624ded64aa6b9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map_type</type>
      <name>sharedIDs_</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>a1df01d9a09c3fb5e5c07b53c2fd993e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>owningProcs_</name>
      <anchorfile>classfei_1_1SharedIDs.html</anchorfile>
      <anchor>aa2cda5e1ecc72c758bb88b2555f8972b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sharedNodes</name>
    <filename>classsharedNodes.html</filename>
    <member kind="function">
      <type></type>
      <name>sharedNodes</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>a44309e06d564b24c83d44657531e7ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sharedNodes</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>a440003037cdb8ccf97a2d60fb2390b29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>a7ddcfef3b57fd19ab6ee31efe66c88de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>a0fea1e68a4eff8cf16673d008067f63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>numProcsPerNode</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>ab745add10b413f159559cf0fe0825416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int **</type>
      <name>sharedProcIDs</name>
      <anchorfile>classsharedNodes.html</anchorfile>
      <anchor>a1c3d183ceab60a1dd23dead524625262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::SharedPtr</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(T *p=0)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(T *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; DataReader &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>DataReader</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(DataReader *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(DataReader *p=0)</arglist>
    </member>
    <member kind="function">
      <type>DataReader &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataReader *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataReader *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(DataReader *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DataReader *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; Epetra_Comm &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>Epetra_Comm</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(Epetra_Comm *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(Epetra_Comm *p=0)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Comm *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(Epetra_Comm *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Comm *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; Epetra_CrsGraph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>Epetra_CrsGraph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(Epetra_CrsGraph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(Epetra_CrsGraph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsGraph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsGraph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsGraph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(Epetra_CrsGraph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsGraph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; Epetra_CrsMatrix &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>Epetra_CrsMatrix</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(Epetra_CrsMatrix *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(Epetra_CrsMatrix *p=0)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(Epetra_CrsMatrix *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; Epetra_Map &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>Epetra_Map</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(Epetra_Map *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(Epetra_Map *p=0)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Map *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(Epetra_Map *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Map *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; Epetra_MultiVector &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>Epetra_MultiVector</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(Epetra_MultiVector *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(Epetra_MultiVector *p=0)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Epetra_MultiVector *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(Epetra_MultiVector *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MultiVector *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; FEI &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>FEI</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(FEI *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(FEI *p=0)</arglist>
    </member>
    <member kind="function">
      <type>FEI &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FEI *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FEI *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(FEI *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FEI *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::CSVec &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::CSVec</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::CSVec *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::CSVec *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::CSVec &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::CSVec *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::CSVec *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::CSVec *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSVec *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::Factory &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::Factory</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::Factory *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::Factory *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::Factory &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Factory *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Factory *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::Factory *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Factory *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::EqnComm &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::EqnComm</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::EqnComm *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::EqnComm *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::EqnComm &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::EqnComm *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::EqnComm *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::EqnComm *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::EqnComm *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::Graph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::Graph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::Graph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::Graph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Graph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Graph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Graph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::Graph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::Graph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::LinearSystem &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::LinearSystem</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::LinearSystem *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::LinearSystem *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::LinearSystem &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::LinearSystem *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::LinearSystem *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::LinearSystem *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::LinearSystem *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::Matrix &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::Matrix</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::Matrix *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::Matrix *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Matrix &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Matrix *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Matrix *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::Matrix *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::Matrix *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::MatrixGraph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::MatrixGraph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::MatrixGraph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::MatrixGraph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::MatrixGraph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::MatrixGraph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::MatrixGraph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::MatrixGraph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::MatrixGraph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::Reducer &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::Reducer</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::Reducer *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::Reducer *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Reducer &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Reducer *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Reducer *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::Reducer *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::Reducer *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::SparseRowGraph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::SparseRowGraph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::SparseRowGraph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::SparseRowGraph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::SparseRowGraph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::SparseRowGraph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::SparseRowGraph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::SparseRowGraph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::SparseRowGraph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::Vector &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::Vector</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::Vector *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::Vector *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Vector &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Vector *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::Vector *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::Vector *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::Vector *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::fei::VectorSpace &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::fei::VectorSpace</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::fei::VectorSpace *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::fei::VectorSpace *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::VectorSpace &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::VectorSpace *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::fei::VectorSpace *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::fei::VectorSpace *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::fei::VectorSpace *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::FillableMat &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::FillableMat</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::FillableMat *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::FillableMat *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::FillableMat &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::FillableMat *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::FillableMat *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::FillableMat *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::LinearProblemManager &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::LinearProblemManager</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::LinearProblemManager *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::LinearProblemManager *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearProblemManager &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearProblemManager *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearProblemManager *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::LinearProblemManager *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::LinearProblemManager *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::LinearSystem &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::LinearSystem</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::LinearSystem *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::LinearSystem *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearSystem &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearSystem *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::LinearSystem *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::LinearSystem *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::LinearSystem *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::Matrix &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::Matrix</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::Matrix *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::Matrix *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::Matrix &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Matrix *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Matrix *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::Matrix *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Matrix *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::MatrixGraph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::MatrixGraph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::MatrixGraph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::MatrixGraph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::MatrixGraph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::MatrixGraph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::MatrixGraph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::MatrixGraph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::MatrixGraph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::Reducer &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::Reducer</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::Reducer *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::Reducer *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::Reducer &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Reducer *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Reducer *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::Reducer *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Reducer *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::SparseRowGraph &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::SparseRowGraph</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::SparseRowGraph *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::SparseRowGraph *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::SparseRowGraph &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::SparseRowGraph *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::SparseRowGraph *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::SparseRowGraph *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SparseRowGraph *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::Vector &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::Vector</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::Vector *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::Vector *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::Vector &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Vector *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::Vector *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::Vector *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::Vector *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei::VectorSpace &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei::VectorSpace</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei::VectorSpace *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei::VectorSpace *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::VectorSpace &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::VectorSpace *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei::VectorSpace *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei::VectorSpace *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::VectorSpace *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei_trilinos::Aztec_BlockMap &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei_trilinos::Aztec_BlockMap</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei_trilinos::Aztec_BlockMap *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei_trilinos::Aztec_BlockMap *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_BlockMap &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_BlockMap *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_BlockMap *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei_trilinos::Aztec_BlockMap *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_trilinos::Aztec_BlockMap *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; fei_trilinos::Aztec_Map &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>fei_trilinos::Aztec_Map</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(fei_trilinos::Aztec_Map *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(fei_trilinos::Aztec_Map *p=0)</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_Map &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_Map *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fei_trilinos::Aztec_Map *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(fei_trilinos::Aztec_Map *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei_trilinos::Aztec_Map *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; FiniteElementData &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>FiniteElementData</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(FiniteElementData *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(FiniteElementData *p=0)</arglist>
    </member>
    <member kind="function">
      <type>FiniteElementData &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FiniteElementData *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FiniteElementData *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(FiniteElementData *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FiniteElementData *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; LibraryWrapper &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>LibraryWrapper</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(LibraryWrapper *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(LibraryWrapper *p=0)</arglist>
    </member>
    <member kind="function">
      <type>LibraryWrapper &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LibraryWrapper *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LibraryWrapper *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(LibraryWrapper *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LibraryWrapper *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; LinearSystemCore &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>LinearSystemCore</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(LinearSystemCore *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(LinearSystemCore *p=0)</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(LinearSystemCore *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearSystemCore *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SharedPtr&lt; snl_fei::snl_fei::Broker &gt;</name>
    <filename>classfei_1_1SharedPtr.html</filename>
    <member kind="typedef">
      <type>snl_fei::snl_fei::Broker</type>
      <name>element_type</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac4770c63a5fb9297d0d0414afe79117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>afad2a2441a6f7907dd4d249dfd813398</anchor>
      <arglist>(snl_fei::snl_fei::Broker *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad8a59fc89ffdda0b4877da6e6fc9a210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa04f35878be5d09a9e7212992936a16b</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a9874d9dc7e02ff82a87a5ee45b2ea74d</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac6c248f87712f6afafa28fcbcdb53987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a3345b70111b88d517dbfe6991d197a89</anchor>
      <arglist>(const SharedPtr&lt; Y &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SharedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a5370427758b9147ab6cc347b12b011bf</anchor>
      <arglist>(const SharedPtr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0cce56dc2d636ba354b63d30061fa072</anchor>
      <arglist>(snl_fei::snl_fei::Broker *p=0)</arglist>
    </member>
    <member kind="function">
      <type>snl_fei::snl_fei::Broker &amp;</type>
      <name>operator*</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>aa65e5c5fb01b8b3c6e820302b1ca5424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>snl_fei::snl_fei::Broker *</type>
      <name>operator-&gt;</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a1d18d5e137d8a184d5f1bdc1913d10a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>snl_fei::snl_fei::Broker *</type>
      <name>get</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a0296a552885744dbf7c81e29be463e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>use_count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a26d79923e382b42cb2a8fab468cad7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a653b3e338f9a87623c875b51ff932cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>share</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ad27873719f16e17c9057355130079499</anchor>
      <arglist>(snl_fei::snl_fei::Broker *xpointer, long *xcount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>ac25cf9cbd9843804de943be3bb2670df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::snl_fei::Broker *</type>
      <name>pointer</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a59fac8d99a69c442a591f0854c628026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long *</type>
      <name>count</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>a8d1814c7928700b31e90b76bfe651f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SharedPtr</name>
      <anchorfile>classfei_1_1SharedPtr.html</anchorfile>
      <anchor>adf66bfb5d9f0f374ec092232e6b43eb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SlaveVariable</name>
    <filename>classSlaveVariable.html</filename>
    <member kind="function">
      <type></type>
      <name>SlaveVariable</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a0914bd048c4143ada71ffa6ffa9483d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaveVariable</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a757d6916b0eb247ffc7a7c7f57d82603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalID</type>
      <name>getNodeID</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a1f8cbb6405e41fe460b5d045ac0e6976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeID</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a01989c84e19f9e95fb9bdf0cfcd0fd25</anchor>
      <arglist>(GlobalID nid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldID</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>ace41b6e62c3fd4583014e2863db90af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldID</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a4471bfbe16987bba42c62ce206113772</anchor>
      <arglist>(int fid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldOffset</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>aef28c8b80f6de872f2080f6f4b7a55ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldOffset</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a77908f3be6be89d4ad4d3159d8a78e67</anchor>
      <arglist>(int foff)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GlobalID &gt; *</type>
      <name>getMasterNodeIDs</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a8fe7e62ef3bb5b639caeddae10a0a851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; *</type>
      <name>getMasterFields</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a9c3812f3d9d005e8f2b12c929d9c2c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; *</type>
      <name>getWeights</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>aabec1318deb02c7df5098233363ae4c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMasterNodeID</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>afd58598c95e13fe831461113cfbe310f</anchor>
      <arglist>(GlobalID masterNode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMasterField</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a5777f28d1644fcc545cbfcb72ff02733</anchor>
      <arglist>(int masterField)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWeight</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a6449210702c8eb80c98202b3ae5dd445</anchor>
      <arglist>(double weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalID</type>
      <name>nodeID_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a435ba09cad1e72607e83c3b275b140b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fieldID_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a53b0b09f10e85b024f4148be7d1d1403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>offset_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>abd8bbdf02f9973340d093e00e69b2878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt; *</type>
      <name>masterNodes_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a4bcb01c1451461691284e3d03bc01a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt; *</type>
      <name>masterFields_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a90436e2c2fc72d896b001dae1c70e37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt; *</type>
      <name>weights_</name>
      <anchorfile>classSlaveVariable.html</anchorfile>
      <anchor>a920cd6291c60510b89b80008efb5aff9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SNL_FEI_Structure</name>
    <filename>classSNL__FEI__Structure.html</filename>
    <base>Lookup</base>
    <member kind="function">
      <type></type>
      <name>SNL_FEI_Structure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab1504cd634df845871a606ded85298bd</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNL_FEI_Structure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a33ae39d92ffdd18b3600d7352c8666d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parameters</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a20f2933eb5c4382f59edb6c1d145bfb3</anchor>
      <arglist>(int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initFields</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a034bbc57da4d410a15ed92ed06d08fb4</anchor>
      <arglist>(int numFields, const int *fieldSizes, const int *fieldIDs, const int *fieldTypes=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElemBlock</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac1e1d9b0a8a4cafe4921c74a19affe41</anchor>
      <arglist>(GlobalID elemBlockID, int numElements, int numNodesPerElement, const int *numFieldsPerNode, const int *const *nodalFieldIDs, int numElemDofFieldsPerElement, const int *elemDofFieldIDs, int interleaveStrategy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initElem</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a050dc221ced3a109687a217a80b08a73</anchor>
      <arglist>(GlobalID elemBlockID, GlobalID elemID, const GlobalID *elemConn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSlaveVariable</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a0c7cbe3054a767f89ba1ec5bd575148a</anchor>
      <arglist>(GlobalID slaveNodeID, int slaveFieldID, int offsetIntoSlaveField, int numMasterNodes, const GlobalID *masterNodeIDs, const int *masterFieldIDs, const double *weights, double rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deleteMultCRs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a15a41db0fb9a1ec3dd81e64bb3815beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSharedNodes</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8d4f43387b768ac31ed4b8c91d272d08</anchor>
      <arglist>(int numSharedNodes, const GlobalID *sharedNodeIDs, const int *numProcsPerNode, const int *const *sharingProcIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRMult</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4c8a132e4d4bb7927603021d00610796</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodes, const int *CRFields, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initCRPen</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa855f6f4cb9450296194ed0cd9be6677</anchor>
      <arglist>(int numCRNodes, const GlobalID *CRNodes, const int *CRFields, int &amp;CRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a29feb79daacef9fd92d2840f1638eb04</anchor>
      <arglist>(bool generateGraph=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getFieldIDs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaff0aa110a7c5b2c31df7f7c857550d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldIDsPtr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a83175187671f3097043c0629efc87709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getFieldSizesPtr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a57c6b8867582f8ea03726fdff10f21ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a645e6ab55c3aa5de5e955d7b268c0afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFieldSize</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a36cec5c39de493776f7c4b407b319c23</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>fei::FieldDofMap&lt; int &gt; &amp;</type>
      <name>getFieldDofMap</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>afa424263c1a02cfc5e73c590276668af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInLocalElement</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac5ba9c7c0b0de1080e3e2784029e9013</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getNumFieldsPerNode</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac21b71e8856ca22c5219627a1577b210</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>const int *const *</type>
      <name>getFieldIDsTable</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8385280567c16ffdd232d86b3c12110a</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumber</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a9a52d909e3af7ad1bdca457a49afadac</anchor>
      <arglist>(int nodeNumber, int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProcForEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aea327741b314343002786146f70f0c9f</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumElemBlocks</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2ec21504575dfdfcd9ed5d00b818e23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalID *</type>
      <name>getElemBlockIDs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2202ba1d402b5e17f1c290e211dd21ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getElemBlockInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a7c5dcb05031b48e4a33bbe2356886ee8</anchor>
      <arglist>(GlobalID blockID, int &amp;interleaveStrategy, int &amp;lumpingStrategy, int &amp;numElemDOF, int &amp;numElements, int &amp;numNodesPerElem, int &amp;numEqnsPerElem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBlock</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>af33319d431a4e6467163fa388b9bc2e0</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockDescriptor</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a6c321b73a3323e7bec091c5174b87e09</anchor>
      <arglist>(GlobalID blockID, BlockDescriptor *&amp;block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockDescriptor_index</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4e3426941a60d83062c39faebe9dddfd</anchor>
      <arglist>(int index, BlockDescriptor *&amp;block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOfBlock</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>af91a99742149b9e2039dcbdae560e9cd</anchor>
      <arglist>(GlobalID blockID) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlockID</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a535375006fdbbabf21d71673bb9c19d6</anchor>
      <arglist>(unsigned index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocateBlockConnectivity</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4aba2098d15b201acad85b33768cedb7</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyConnectivityTables</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a16f43facde141d9f89a8be832a7aacf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityTable &amp;</type>
      <name>getBlockConnectivity</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad0b2820443be06f25cf8e1a00751bddd</anchor>
      <arglist>(GlobalID blockID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScatterIndices_ID</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a472c64e1d8f1b744b1cdac0e1424251a</anchor>
      <arglist>(GlobalID blockID, GlobalID elemID, int interleaveStrategy, int *scatterIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScatterIndices_index</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aeebaf939c1ac60070a2307e6b6c79f1d</anchor>
      <arglist>(int blockIndex, int elemIndex, int interleaveStrategy, int *scatterIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkScatterIndices_index</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8b90efc26a77f5e61c02e5418fd1a439</anchor>
      <arglist>(int blockIndex, int elemIndex, int *scatterIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScatterIndices_ID</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a40069e0fa46dc1114579e23bce987d7e</anchor>
      <arglist>(GlobalID blockID, GlobalID elemID, int interleaveStrategy, int *scatterIndices, int *blkScatterIndices, int *blkSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScatterIndices_index</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a543e4b4926152afebd22de2d8d116ac4</anchor>
      <arglist>(int blockIndex, int elemIndex, int interleaveStrategy, int *scatterIndices, int *blkScatterIndices, int *blkSizes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharedNodes</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a962a9dfdfb2f6b974302f9ba4dfb5b17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getSharedNodeNumbers</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a17419bb83d7f3bd5fad06f7764c56d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>getSharedNodeProcs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a99b581049407040bb5f2c5d54789d7d9</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharingProcs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a61de12edcb9f10308bb64a1f99dab183</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubdomains</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a629574305186b65d70099b99e53c2717</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getSubdomainList</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abed7427ba5e0a5bf3e3b94c3546d39ca</anchor>
      <arglist>(int nodeNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateToReducedNodeNumber</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a87eefec866b2801d75d4cb4ac3a1a61c</anchor>
      <arglist>(int nodeNumber, int proc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedNodeNumber</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2d4a1367a97a4d0c5e832904a795653a</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAssociatedFieldID</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a73ba13486830e9c9b6bacd7ae26a6d5b</anchor>
      <arglist>(int eqnNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlyBlkEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aab80b7eda371c93d4f456d5950ee274c</anchor>
      <arglist>(int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ptEqnToBlkEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a900bb07f3d635e2e582772466a0230bc</anchor>
      <arglist>(int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffsetIntoBlkEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a04e13604d0c2ea37fee18ec67b600a24</anchor>
      <arglist>(int blkEqn, int ptEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkEqnSize</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a6bf2d21aa9d48a61cb3eb32908a0a5ee</anchor>
      <arglist>(int blkEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumActiveNodes</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad97a7577aec4caea8482af93794a9fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeDatabase &amp;</type>
      <name>getNodeDatabase</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aad45b730063c84593af849434e171e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; GlobalID, int &gt; &amp;</type>
      <name>getActiveNodeIDList</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2b1c9defa3537839f10d7963a661e6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getGlobalNodeOffsets</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8bfd32b7749a564b371862d94c7812bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getGlobalEqnOffsets</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad0a3d289eced69f7823dbeaab9a27948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getGlobalBlkEqnOffsets</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abb5196ba28f8e32cd46334868bf7f8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeCommMgr &amp;</type>
      <name>getNodeCommMgr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5b4c6e2d0c4d785ccae007b40f257979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnCommMgr &amp;</type>
      <name>getEqnCommMgr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>af9eed98eeb9ae086bdadcbe9aad0720d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeEqnCommMgr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a191f1fe3e3677800c336683ab952d898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEqnInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a0e4d779ccc208657d883e019bff54b06</anchor>
      <arglist>(int &amp;numGlobalEqns, int &amp;numLocalEqns, int &amp;localStartRow, int &amp;localEndRow)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumbers</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a281d188423aebdea68d8a23b26a088a9</anchor>
      <arglist>(GlobalID ID, int idType, int fieldID, int &amp;numEqns, int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEqnNumbers</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a7fbbe5e36cd76df8a31c32fe01aa15cf</anchor>
      <arglist>(int numIDs, const GlobalID *IDs, int idType, int fieldID, int &amp;numEqns, int *eqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEqnBlkInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa9ea65a58bbbb8fb4d6ce787c0e1c104</anchor>
      <arglist>(int &amp;numGlobalEqnBlks, int &amp;numLocalEqnBlks, int &amp;localBlkOffset)</arglist>
    </member>
    <member kind="function">
      <type>snl_fei::PointBlockMap &amp;</type>
      <name>getBlkEqnMapper</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a6a97250adf5294cf81e656db3f4fd0cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyMatIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5af9078632835b82fdd0213cd02faf99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMultConstRecords</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaee6fe89eb127786fc696365a59287bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; GlobalID, snl_fei::Constraint&lt; GlobalID &gt; * &gt; &amp;</type>
      <name>getMultConstRecords</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a937f00e204db91f918d372ceec1bef3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMultConstRecord</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad01484e4c9b2e6ff8b3ab8f19f75c9f8</anchor>
      <arglist>(int CRID, snl_fei::Constraint&lt; GlobalID &gt; *&amp;multCR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPenConstRecords</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a3cbf8685c314a6c41ae9c315a14efcc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; GlobalID, snl_fei::Constraint&lt; GlobalID &gt; * &gt; &amp;</type>
      <name>getPenConstRecords</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5f71174a0b79f00bc1446196a9270b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPenConstRecord</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8190b02fb2fd1f21a653685ab500b22d</anchor>
      <arglist>(int CRID, snl_fei::Constraint&lt; GlobalID &gt; *&amp;penCR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSlaveVariable</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8c18b55073d17c59ea5bd2e0ac9740f9</anchor>
      <arglist>(SlaveVariable *svar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculateSlaveEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5bf634e3be03778865e48f262aff3836</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>fei::FillableMat *</type>
      <name>getSlaveDependencies</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad73b82facadea78bab9695ccf8293e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EqnBuffer *</type>
      <name>getSlaveEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a91e0ea15ae7ad548596fff61935b6eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSlaveEquations</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac6574fbc9a2611df48eea9d734840ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSlaveEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a20f01a1e8bd714435535d670c38c01cd</anchor>
      <arglist>(int eqn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>translateToReducedEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aebf44063741a0bc4fe4a52563f33e309</anchor>
      <arglist>(int eqn, int &amp;reducedEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateToReducedEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2328b0e4ae8aed16fa725a91a4228612</anchor>
      <arglist>(EqnCommMgr &amp;eqnCommMgr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateToReducedEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abac74ca0246577248213a6be5fcbd07f</anchor>
      <arglist>(EqnBuffer &amp;eqnBuf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateToReducedEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4dea70f1b95d94bf88ce9bd9fc6da890</anchor>
      <arglist>(ProcEqns &amp;procEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateMatToReducedEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a01274abfbda479e3dd65fbfd92ac4011</anchor>
      <arglist>(fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>translateFromReducedEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a85629ec79ed54aed62ae4669e411ae81</anchor>
      <arglist>(int reducedEqn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMasterEqnNumbers</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abe85029b0e384afe96750695ff605f6c</anchor>
      <arglist>(int slaveEqn, std::vector&lt; int &gt; *&amp;masterEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMasterEqnCoefs</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a9b4c954ba0c952418d725e84bbcba1d6</anchor>
      <arglist>(int slaveEqn, std::vector&lt; double &gt; *&amp;masterCoefs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMasterEqnRHS</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a0eacbda36aab4d045913b2cad3b14b19</anchor>
      <arglist>(int slaveEqn, double &amp;rhsValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a7987011ee59d683315beca4436b9d452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1dcd7dc156a4ab726f93bb08d0799632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLocalEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac20043dcf532c83ce1df3f459563ecb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastLocalEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>af429605472e064b9a3ac56edab333e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstReducedEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a05126df29e4c4237ea307677dcced7df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastReducedEqn</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a7b1483a237ccc30ebcc5e46279951345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalEqnBlks</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a082b9fac8e3b77145680c4884b1e8b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalEqnBlks</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2b1d4773fc24b983447b6bb3a728c32f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalReducedEqnBlks</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a055f4a6a415e93f9031b5e7de2c62f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalMaxBlkSize</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ae33a478b5c4db5b00e82294d7a23f97c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalReducedEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8ce18107abd211ca0e0f24ff25f9a06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixRowLengths</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a683867ef5c3b59e946b1e21c1040c50e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;rowLengths)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a69be24b561758272613d29a2f427eec5</anchor>
      <arglist>(int **colIndices, std::vector&lt; int &gt; &amp;rowLengths)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMatrixStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abb8308d1d9c2a9135431ac6afff57727</anchor>
      <arglist>(int **ptColIndices, std::vector&lt; int &gt; &amp;ptRowLengths, int **blkColIndices, int *blkIndices_1D, std::vector&lt; int &gt; &amp;blkRowLengths, std::vector&lt; int &gt; &amp;numPtRowsPerBlkRow)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcTotalNumElemDOF</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1bf5888ac36978da1c6abaccf31482f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcNumMultCREqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a0b805337b82af667c6a7e49788b2cc95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>getCommunicator</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a9673fdcaeea4ae608909e73f4595d6b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDbgOut</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aee9a8b4c1cebdda48dbe515c984d415b</anchor>
      <arglist>(std::ostream &amp;ostr, const char *path, const char *feiName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>gatherSlaveEqns</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a0212d63dd63a9129c77bfededdb0a63e</anchor>
      <arglist>(MPI_Comm comm, EqnCommMgr *eqnCommMgr, EqnBuffer *slaveEqns)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>removeCouplings</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a948de49d2b7fc91b93cd68c6393efd85</anchor>
      <arglist>(EqnBuffer &amp;eqnbuf, int &amp;levelsOfCoupling)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeDescriptor *</type>
      <name>findNode</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ae0abe27470a5da6ac5c9ed6e1d279d52</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeDescriptor &amp;</type>
      <name>findNodeDescriptor</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a92726f84168a5982ed5c3c4a8cada30a</anchor>
      <arglist>(GlobalID nodeID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>writeEqn2NodeMap</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a6e96d115cdde4b03402a0fae07938b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getElemNodeDescriptors</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a19fcac9de8a87ce7e718ca992c8af5ae</anchor>
      <arglist>(int blockIndex, int elemIndex, NodeDescriptor **nodes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeIndices_simple</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaf0db6f4c3f9dc4ff892ebb57c2ec5f5</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int fieldID, int *scatterIndices, int &amp;offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeIndices_simple</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>afdfa2fee8c299b7e6833f3fd8d370f9c</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int fieldID, int *scatterIndices, int &amp;offset, int *blkScatterIndices, int *blkSizes, int &amp;blkOffset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeMajorIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>afe57bab50ba631902fb5a2d508222f63</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int **fieldIDs, int *fieldsPerNode, int *scatterIndices, int &amp;offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeBlkIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abd6fd12f635ff8afcd54831f249217d0</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int *scatterIndices, int &amp;offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeMajorIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac51ded090809e80ff13e5c1f8fc7972c</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int **fieldIDs, int *fieldsPerNode, int *scatterIndices, int &amp;offset, int *blkScatterIndices, int *blkSizes, int &amp;blkOffset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNodeMajorIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>acfcbc20a1a35b249304083b4c2abb3c5</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, std::vector&lt; int &gt; *fieldIDs, std::vector&lt; int &gt; &amp;fieldsPerNode, std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFieldMajorIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaba9dd3a9acfe6c17514c7e15a2124fc</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, int **fieldIDs, int *fieldsPerNode, int *scatterIndices, int &amp;offset)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getFieldMajorIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a78723121107743a74fd60a6e8424b399</anchor>
      <arglist>(NodeDescriptor **nodes, int numNodes, std::vector&lt; int &gt; *fieldIDs, std::vector&lt; int &gt; &amp;fieldsPerNode, std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calcGlobalEqnInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a64c3e2fe371b34a445941c5e661e664d</anchor>
      <arglist>(int numLocallyOwnedNodes, int numLocalEqns, int numLocalEqnBlks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>finalizeActiveNodes</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4858f246e0005aba3b2d23c24bb0834d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>finalizeNodeCommMgr</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a72d6150610dde9e3f4dd7dfeddfb6254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>activeNodesInitialized</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a229b9bea684a2d4c2ee008b3f63e2e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>formMatrixStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1341f19a217558f84249d8d354aea3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initElemBlockStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>afb3dc11251f75785da04b54a9ce7f64a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initMultCRStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5d4e9e5b3f4fd9b8957675e4580f374e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initPenCRStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa4e9bd10d5971435b1d568cb0c53c77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createMatrixPosition</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abdfb82ebd17fc109bb68fbb24c807d3e</anchor>
      <arglist>(int row, int col, const char *callingFunction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createMatrixPositions</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa9cb56b28b48ae492ca4eb6ef37ecf7f</anchor>
      <arglist>(int row, int numCols, int *cols, const char *callingFunction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createMatrixPositions</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aeef8303a6eb2196490c68fe4a583225e</anchor>
      <arglist>(fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createSymmEqnStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a33f122d048650aba08b20fbb5a4a5bd4</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createBlkSymmEqnStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a9f15453c19492b5fea51db840fcd53b9</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeElementScatterIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1107e012ac7602bae04ff24e1eec1e51</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeElementScatterIndices_noSlaves</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a72ecd2ef20628fedd542f5fa29f554dd</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>storeElementScatterBlkIndices_noSlaves</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aeabcd9b9268f2ec9051d7068d2e214e5</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;scatterIndices)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeLocalNodeIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac34c87c5b0cc2fd0bcea1b4d67b42de9</anchor>
      <arglist>(NodeDescriptor &amp;iNode, int iField, NodeDescriptor &amp;jNode, int jField)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalColumnIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa04df88aeee750cf8e8b1a7690f3e51d</anchor>
      <arglist>(int eqn, NodeDescriptor &amp;node, int fieldID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalRowIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2820b5896f9e316a71b364e149b8a228</anchor>
      <arglist>(NodeDescriptor &amp;node, int fieldID, int eqn)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalSendIndex</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa9ca6d688ed2a9e69c28ee929ee76681</anchor>
      <arglist>(NodeDescriptor &amp;node, int fieldID, int col)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>storeNodalSendIndices</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4d5b0c57debc08e088ad5c11b701993f</anchor>
      <arglist>(NodeDescriptor &amp;iNode, int iField, NodeDescriptor &amp;jNode, int jField)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleReducedStructure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa3998dccd890edcd2a92b33d433f71d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>nodalEqnsAllSlaves</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac80f5b6ba339156ad2515f61f21a62c8</anchor>
      <arglist>(const NodeDescriptor *node, std::vector&lt; int &gt; &amp;slaveEqns)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initializeBlkEqnMapper</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>adca0b50b2d99f9e65c180bd6cce108b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setNumNodesAndEqnsPerBlock</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ae49a5cb153707d62384b146d10405d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>destroyBlockRoster</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a39ced7c52ab36bf7a6b6ccb0ef4c2a0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::ostream &amp;</type>
      <name>dbgOut</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a252c1afc9fcef33c013167e78098c61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addCR</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac5c1922b0595a6a02f982e6fd2bfe440</anchor>
      <arglist>(int CRID, snl_fei::Constraint&lt; GlobalID &gt; *&amp;cr, std::map&lt; GlobalID, snl_fei::Constraint&lt; GlobalID &gt; * &gt; &amp;crDB)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setNodalEqnInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a697fe43f1295882d027e3498bf8bac5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setElemDOFEqnInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a74bf1737d1c0f16b7bf0fa7c92841b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setMultCREqnInfo</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a305ac913f7409db27b4f5f21ba9c9ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SNL_FEI_Structure</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8666551bbcdd0254b76ec83132784a0d</anchor>
      <arglist>(const SNL_FEI_Structure &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SNL_FEI_Structure &amp;</type>
      <name>operator=</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa1e3a018413978a91ceb01b5c45383eb</anchor>
      <arglist>(const SNL_FEI_Structure &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a6e2d807823fc173a0dce7182e623a91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a063d8bcdee520d32c0c80a2204a7fa0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>masterProc_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abdfb1e70ea26a7d47cc769d27012af28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1f65d327fbdf8fc7a6abb58d00c8323d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldIDs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad56359f272a4b96da084f00da28ecf07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldSizes_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a000fe7d1d0ba455ce7af2ef2cd2eea74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt; *</type>
      <name>fieldDatabase_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2f8f917607bed8179d3cb04741e7ec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FieldDofMap&lt; int &gt;</type>
      <name>fieldDofMap_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a018963eed9e5be121f3204ba66e09b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>workarray_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a20de4038aaa771a27afdb64caaffff52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GlobalID &gt;</type>
      <name>blockIDs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab2046fba8d028f826b31ef1371cca075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; BlockDescriptor * &gt;</type>
      <name>blocks_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5587b2f81116cccab267e03dd2a400d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ConnectivityTable * &gt;</type>
      <name>connTables_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>add6d38dc635e5dc2db6efb45b1d1e7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeDatabase *</type>
      <name>nodeDatabase_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab2ffcbc2362b6edaea42ff834ea4ca74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activeNodesInitialized_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5201c3407c9a548e6aae29948b308063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalNodeOffsets_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abc91af5f09bbe7f4698d1f5034d5d51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalEqnOffsets_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab960847f9917b0d42bc1952301d16f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalBlkEqnOffsets_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a70ad621e1880e174ca155a8c8c400231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SlaveVariable * &gt; *</type>
      <name>slaveVars_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4d0cad708b355570fcac2b18dd823fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnBuffer *</type>
      <name>slaveEqns_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a3ba8d604f6c4375781db2bcd8ed4827a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt; *</type>
      <name>slvEqnNumbers_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>af8eea661da2bd50b7a1fcae09235d1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSlvs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aab9d403c6a47b9940058adfcaed22ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lowestSlv_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a746b5f677e034367794ff95814c0a2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>highestSlv_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2a4c23590e3e3e409c0390b10097db91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>slaveMatrix_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a935fb05f8ca304cd2b223c953b91c97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalNumNodesVanished_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5960cee69065db4f3cee905b8edd0607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>localVanishedNodeNumbers_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad1ced90bf977690aacde47099e3e62f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeCommMgr *</type>
      <name>nodeCommMgr_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac244eb2087f506a59fadb63abca0de47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>eqnCommMgr_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1ccf73cd1b37b00b0204e55f8c7bd194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EqnCommMgr *</type>
      <name>slvCommMgr_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab5951a3810adc0ed1a7c6ff78a18eedd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqns_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a35c09458dd85cc24bc774d4d3d72360a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqns_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a9a44d33938c1fcbc2fa3d918e9fc51ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localStartRow_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a679ebc8e63ca4efaa3cd3d571de90db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localEndRow_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8d8e6599bfa2f10232f642fe87f351b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalNodalEqns_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abd0c570e50bd92c36e6830a17abe2533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalElemDOF_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8011a4f72a28de70b6759f6991d8cb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalMultCRs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>abb0a4d3b411af393ff5fb0335e2690bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedStartRow_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5c4d8147799fad19fb79afd79a1e5d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedEndRow_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a725fbcca8b46374cf47df76543a42e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalReducedRows_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa22d106432516920deb207f352959620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kid_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a13d02bf4e6e2fcfa29711ad30cb78e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kdi_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac40a6a7026d58ce4ae734f81c0281ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FillableMat *</type>
      <name>Kdd_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a39729eb8706e483e5d396ba06025c9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrD</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5d7978a146811d3f57cee99394c4db46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKid</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ace6c2e0e1a519d1183b5638295d4537e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdi</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ab07cd6acfa26b971230706ab6e81ae47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>csrKdd</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac42eb0419511aedd098be67bfe2c86ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat1_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaa4d671a97bd2a6983d7868ba239db4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::CSRMat</type>
      <name>tmpMat2_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a394fbd2daf52df292efb58a1a5a4fe71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedEqnCounter_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a2e548e578ac4eaf5755b48ea592dd5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reducedRHSCounter_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>afb46671cb92795459a89809a1a3ba7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>rSlave_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1f00f35dfd7d32553a7d339ebf7b051e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>cSlave_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac353fa56e4aacd55f643eabf02ae63df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NodeDescriptor * &gt;</type>
      <name>work_nodePtrs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a07c6aa16d4687f598944e5c32b23fc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>structureFinalized_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aaba85d04fa6891fab9b6bf9aeff7ede1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>generateGraph_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a629e1298925b7055efcf42b8a7a9e49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::ctg_set&lt; int &gt; *</type>
      <name>sysMatIndices_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa7f830eb67089f9f7270b4ae5d66e528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>blockMatrix_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8ad88ed8b573ab22fed8144c7ac03c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalEqnBlks_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a069913cde8f8f958b4ed3ec0b23077f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalEqnBlks_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a16069d53dfe4704c6f96af4825d08e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocalReducedEqnBlks_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad1596ad14e6fdb9505dd4a3c983d08c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localBlkOffset_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a85663df34961873e22b4edb492a112ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localReducedBlkOffset_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a205e5b0cbed98880fed89386e4f0a1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>globalMaxBlkSize_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a170e9f115de9c933508b0214de008e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalNodeNumber_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a615d0335bfabde0414f9edc42905765e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGlobalNodes_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1152016ff5b7bbf2079525bfd87a4449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::ctg_set&lt; int &gt; *</type>
      <name>sysBlkMatIndices_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aed88254670969d8947f8638058f2c7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>matIndicesDestroyed_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa95898dd0c4a5cc966bd9dee888e3529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>workSpace_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ad324b7df7cc004d3c3e392653e21d9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::PointBlockMap *</type>
      <name>blkEqnMapper_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a067a242f900a78f56035a19c857ce5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GlobalID, snl_fei::Constraint&lt; GlobalID &gt; * &gt;</type>
      <name>multCRs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a1e8b3ac467d4c948e027ca713a1f1a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GlobalID, snl_fei::Constraint&lt; GlobalID &gt; * &gt;</type>
      <name>penCRs_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aa8b010b3c06b6def6e291d31647967c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>checkSharedNodes_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a4ff9c91d5fb029454c0554777dcadca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>aad5bdf187269c675d664eecbce5ea85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>outputLevel_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a8543570bfc1418686f5a9b8818398cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>debugOutput_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a5ea584bc3ebb9ab1afe335ffbf3e2ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgPath_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a7a4a0f0a5eb6b1e8cef8d4bd208851b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>dbgOStreamPtr_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>a111d5478449f5ec9ab81a353b31ff01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setDbgOutCalled_</name>
      <anchorfile>classSNL__FEI__Structure.html</anchorfile>
      <anchor>ac33c17994df9d0676a103966fdbdf3e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei_tester</name>
    <filename>classsnl__fei__tester.html</filename>
    <base>feitester</base>
    <member kind="function">
      <type></type>
      <name>snl_fei_tester</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a5d2c4b2e183c56e79d7a1ee14bb9ac5b</anchor>
      <arglist>(fei::SharedPtr&lt; DataReader &gt; data_reader, MPI_Comm comm, int localProc, int numProcs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~snl_fei_tester</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a13b50da6eab25c8b32fb221c3417159e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a458a432bbcba1b004220b1d63a12f0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testInitialization</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a32804f2634880a2c95a18e818d043935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testLoading</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a96fceb13f9bc2a42ae7910483b281ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testSolve</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a72e7e71f954600a5cf8d760c165a74f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testCheckResult</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>ae5be0cfc5e1291227c311dccf9e54af8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpMatrixFiles</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>af09888ce95a97cc6a7f15cf5268bd463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a1f9e9a663c65de0bd9378e41b12c6455</anchor>
      <arglist>(const char *param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineFieldsAndIDTypes</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>adb4bc077f34abadcc1aee1a1eea0d70c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initElemBlocks</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>ae471c14b41d27b4b5f43d05340c341dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadElemBlocks</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a7936bdbb6d4ce21f6e507900c9525570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>initConstraints</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a87405636fe2b95b3f74c25a3665484ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>loadConstraints</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a1b9b7eb28e6fa9dad4a3cf8c2b33f895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>definePattern</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a4c746db2aae742256d989eeabd3bee35</anchor>
      <arglist>(ElemBlock &amp;eb, int &amp;patternID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>createLibraryInstance</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a19a1bbc804b9b953c617d4f8397df2f1</anchor>
      <arglist>(const char *solverName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_block_node_soln</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a00108857bb16cccaa715a9b98fd98a41</anchor>
      <arglist>(DataReader &amp;data, fei::Vector *vec, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_block_elem_soln</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a6ce78265e1252bda977f7b2fb9b75e6b</anchor>
      <arglist>(DataReader &amp;data, fei::Vector *vec, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>save_multiplier_soln</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a55d290a7448dbfec0e591512db2dd11d</anchor>
      <arglist>(DataReader &amp;data, fei::Vector *vec, const char *solnFileName, int numProcs, int localProc, int solveCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>checkSolution</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a7d64b5c33f54f453b2bd52bac6248817</anchor>
      <arglist>(int localProc, int numProcs, const char *solnFileName, const char *checkFileName, const char *extension, int solveCounter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a02122b311af2258a894c701f48c7352e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>factory_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a22dec31a3a91c6f339eb654596a256c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a0ba32c10ae0327ddb7e69bdc528d5c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>matrixGraph_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>aef7f2c752810d67dd5124933b241a819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>A_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>af186bb3089ee7ff572899c41d76d3662</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>x_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a4113251c9e1f80556ccb526fdf61dae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>b_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a634fc16bcc11cbdd38d4d179e70cd382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::LinearSystem &gt;</type>
      <name>linSys_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a34339efe392f3a22370eaf4401ce0d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearSystemCore *</type>
      <name>linSysCore_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a34fca01106b178c28d232c82194452d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FiniteElementData *</type>
      <name>feData_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a9d71eba5761718aff0f08cc08b21e512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; DataReader &gt;</type>
      <name>data_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a202af50a7617e7f05a717bd40acfa3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>idTypes_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a3477777fe6a70c8265ec003298966bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPatterns_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a9f2f2856d2ca999368a4bc0b3a7d9bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nodeTypeOffset_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>af5d81ab8b5fbbfda72b421a2381f282d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>elemTypeOffset_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a9dc88add4e0422ead286e01d3e99fbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>constraintTypeOffset_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a45dab937a79c4e968dd29e6686d7787e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>a477f9bf7192afae5d0bf3d869d19a51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classsnl__fei__tester.html</anchorfile>
      <anchor>ae7de5f448d71743bf84b33c7ace7e2b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Solver</name>
    <filename>classfei_1_1Solver.html</filename>
    <class kind="class">fei::Solver::Factory</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Solver</name>
      <anchorfile>classfei_1_1Solver.html</anchorfile>
      <anchor>a74fe41cb2d37ed02da2f3399445a8597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classfei_1_1Solver.html</anchorfile>
      <anchor>aa14bb748eb219c5def8bcf5fe01ad3c6</anchor>
      <arglist>(fei::LinearSystem *linearSystem, fei::Matrix *preconditioningMatrix, const fei::ParameterSet &amp;parameterSet, int &amp;iterationsTaken, int &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::SparseRowGraph</name>
    <filename>classfei_1_1SparseRowGraph.html</filename>
    <member kind="function">
      <type></type>
      <name>SparseRowGraph</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a4f652c7ffdb6fa2d897680208c2e7607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseRowGraph</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a3819e771a499f3e923616df198136d40</anchor>
      <arglist>(const SparseRowGraph &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SparseRowGraph</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>adfaba11469b956c853364bfdb07ba07a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a890ada4e4132cc2de0b44c7b98e97029</anchor>
      <arglist>(const fei::SparseRowGraph &amp;othergraph) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a604a5d28cde1ac758b99057ab3a68430</anchor>
      <arglist>(const fei::SparseRowGraph &amp;othergraph) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>rowNumbers</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a2a0db79f162f577178295f3e219cace7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>rowOffsets</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a689957ec963f5da2bfa5005bb851138b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>packedColumnIndices</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a2a9930c722cf23e72046a0357de05d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blockEntries</name>
      <anchorfile>classfei_1_1SparseRowGraph.html</anchorfile>
      <anchor>a4c02a1b991ce71cc689c3e08819df7d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>snl_fei::SubdMsgHandler</name>
    <filename>classsnl__fei_1_1SubdMsgHandler.html</filename>
    <base>MessageHandler&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>SubdMsgHandler</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>ad9a9d80f1769cf3460f74224d0e63bb3</anchor>
      <arglist>(RecordCollection *recordCollection, fei::SharedIDs&lt; int &gt; *sharedIDTable, fei::SharedIDs&lt; int &gt; *subdomainIDTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubdMsgHandler</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a4393a2444f44ea7c56dcec312cc9cab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getSendProcs</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a47b758dbd7fc6962a431c4a74f0bb405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getRecvProcs</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a06bde02b77c7df040bde8672dff7614a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessageLength</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>addf4047aaf7224e24268d262a935c406</anchor>
      <arglist>(int destProc, int &amp;messageLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSendMessage</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a0838400ca9e7d5f2305298d321751ba4</anchor>
      <arglist>(int destProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>processRecvMessage</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>ae442d424eac7408a53c1de8238e6ed7f</anchor>
      <arglist>(int srcProc, std::vector&lt; int &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendPattern</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>af2fa8ea3bd10c5ce984f50f6d205342e</anchor>
      <arglist>(fei::comm_map *pattern)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecvPattern</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a83961e95a6f04007988187ce30e81beb</anchor>
      <arglist>(fei::comm_map *pattern)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>sendPattern_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a5e9426fb35a5dd37ff268eac14029a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::comm_map *</type>
      <name>recvPattern_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a8f686e2cc8f2b1d15c6be05081484a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RecordCollection *</type>
      <name>recordCollection_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>abe2bc7ac69f3a78f6d5516e09a645d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedIDs&lt; int &gt; *</type>
      <name>sharedIDTable_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a6cdc42eddc4b25989a093d0849eeeb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedIDs&lt; int &gt; *</type>
      <name>subdomainIDTable_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a32a66372747fee34134913226104cc4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sendProcs_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>addd2a9a283369bed86a9713df94e6428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recvProcs_</name>
      <anchorfile>classsnl__fei_1_1SubdMsgHandler.html</anchorfile>
      <anchor>a911a02013c63dd35a1ae1f8df1213114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sumInElem</name>
    <filename>classsumInElem.html</filename>
    <member kind="function">
      <type></type>
      <name>sumInElem</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a9995733466a0b1f526f40959b92c178f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sumInElem</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a8ac09b3ecedaf2fd7236ff9ab4c88a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>elemBlockID</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>ae8f5cb4f2bb6bc35138c9ff1ff297a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID</type>
      <name>elemID</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>aaeace4333e726c831b93133e4394be0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>af56f77425fe7d8347aa93673324c4f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalID *</type>
      <name>nodeIDs</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a1073f6ea7737b2bb4ae392c7c0786493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRows</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a92094d52e5d678f9ff631bf783b8f572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>stiff1D</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a6c03c30eb5f2b24d95268268cbed49fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>stiffness</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a88210ef310df99930492df7bc6d4fe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>load</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a05fc6c8eab7cfbb5d9ec125b96008a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>elemFormat</name>
      <anchorfile>classsumInElem.html</anchorfile>
      <anchor>a14af9c340c4142244912654962156ada</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Algebraic</name>
    <filename>classtest__Algebraic.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Algebraic</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a5d757385dd0feace078dbdc44590f2e5</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Algebraic</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a529b53528da691b503d4e67d325ddd94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a8123649e2ec558ae3a3e30ac5d20a82d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a95d652afb80346de6e738b6a146f238c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a2e06208731ea0acd3ca2f28640a8a849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest2</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a0c2b59642ac39dae14315c586cc6b4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a3846f8d75eaefa41a1a75f346dbfafeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a4f127c340bec5ee2e3f40832c6ac8ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>a93b2c263387e4ee94ab385bbaa90ce3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Algebraic.html</anchorfile>
      <anchor>afbfbdd74ce4d7b4b0649f247002a0fe2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_AztecWrappers</name>
    <filename>classtest__AztecWrappers.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_AztecWrappers</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>ad44500c4f45c08866df5288f05a20f5c</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_AztecWrappers</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>a1759cc31fc09c00b1cc98738cc48b6c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>a0bfe8aa09ef5e4f3911533191ae4b3b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>aa35caf48f56698f89a884fb966fa34fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>afc08bbad0d8bd1734a3017f1de8c08ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>aac06101d9628b2f0339650449fbd24e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>a384f5e5d4d4d1500703529f42187466f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>a058edd15faf95e62e38bfee3018d1fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__AztecWrappers.html</anchorfile>
      <anchor>a2bfa4a331acc31bdd0fb4007c1d4bad3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_benchmarks</name>
    <filename>classtest__benchmarks.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_benchmarks</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a2ea1523e742afa43235742d9354578a5</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_benchmarks</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a5835fe362a2f765b26d745b8b2748cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a09aad7abc8e504d3a2828734c07b9932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>aa7bf87ba8806039c6dbe3d44a6827466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>abca3c1b78f1f818f41290f4b2d825046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a1b559d569fd593116b34faaf461c4ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a5c60b4ec065aa0ec47f42df7d0287b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a09cfe18abb500d8eebb6c261c6477fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test5</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a24aba921708000e1e02c8a2ebf47f9a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test6</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a38425d46d3ad3375e9339ac50b7290fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test7</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a817c076011dd1ac1079b0c4867038d14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test8</name>
      <anchorfile>classtest__benchmarks.html</anchorfile>
      <anchor>a60a271a5daa0f1559375cc72ae85415f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Database</name>
    <filename>classtest__Database.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Database</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a317c620835b5b94d80a77e27851e7f19</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Database</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>aefee0fea29f789f975c596dba906052c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>ad2e24e985c823e61b6ac4955a747ad9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a1ff726cac52f91a60a22399aa5cf0b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a892c7a44f902a1fb329f93bee41baf2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>ad6b33dcd8ecd57e531a8f22af0f97f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a6a068b2a2394e3ceb60014bf0ce5e54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>af8f71ae0493ecf7c24ad9f77301a712c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test5</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a175177645f119e9a92d6ba0abe9fd8ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test6</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a860b337768e2a6bae3da3790141af2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test7</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a5d8c5eaf1207ed8b850674f19eea2c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test8</name>
      <anchorfile>classtest__Database.html</anchorfile>
      <anchor>a1a675f434dbb7b181ce07866da47eea0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_EqnBuffer</name>
    <filename>classtest__EqnBuffer.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_EqnBuffer</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>ab32580723a787092b131ddffe7be86a4</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_EqnBuffer</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>a8325a2ac73be7864680d50ec150506bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>a9d77bc113a8dca313948fbdf8ce78a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>aa07e4b87a0045f8ad2677ecd570011a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>a5fd0548191bbd4ffb2507e97612a2193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>a5898867ede66c0781982d4eea7663d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>ac591a413dd3adfbb4cd50ce1ba3bde60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__EqnBuffer.html</anchorfile>
      <anchor>af7c47b51ffe73a9abe2d93733e98125e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_EqnCommMgr</name>
    <filename>classtest__EqnCommMgr.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_EqnCommMgr</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>a444336ef4c6beda5db2e6e7546e1b3a1</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_EqnCommMgr</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>ac4fe7aa8812a4490e362b18d5d4ef80a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>a58e7ef7660b739b3536422347bb0acfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>a7a954905e76191f722961c8d26fa70f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>a1cf96f504a2158935b0f04e1a4a1b838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>acec48c9035e562c5b64fc4a4f60fb3dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>aee9e05108240998b94053dc44c287e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__EqnCommMgr.html</anchorfile>
      <anchor>a69e0658b4d1941dde0ee350085ae9ce9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Factory</name>
    <filename>classtest__Factory.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Factory</name>
      <anchorfile>classtest__Factory.html</anchorfile>
      <anchor>a409b2025e911e98832bd932699f65efd</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Factory</name>
      <anchorfile>classtest__Factory.html</anchorfile>
      <anchor>acc935f909e8eb60d76857e6f995f1cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Factory.html</anchorfile>
      <anchor>af66a9d12ba44eee65c8749bff7e32f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Factory.html</anchorfile>
      <anchor>aac0fa1941500d3b1ba2f02afdb7a89c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factory_test1</name>
      <anchorfile>classtest__Factory.html</anchorfile>
      <anchor>a220b1e1df5ad7e390bfce4dbe831e7a1</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Factory &gt; factory)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Factory_helper</name>
    <filename>classtest__Factory__helper.html</filename>
    <member kind="function">
      <type></type>
      <name>test_Factory_helper</name>
      <anchorfile>classtest__Factory__helper.html</anchorfile>
      <anchor>a117c2cdb0c75a74a0229ce6d0131f5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Factory_helper</name>
      <anchorfile>classtest__Factory__helper.html</anchorfile>
      <anchor>a68b41ac1c2d33cdbc18979caf49c8e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dyncastMatrix</name>
      <anchorfile>classtest__Factory__helper.html</anchorfile>
      <anchor>ab05eb3a236610dc4d1be5b83debb3c79</anchor>
      <arglist>(fei::Matrix *matrix, const char *libname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dyncastVector</name>
      <anchorfile>classtest__Factory__helper.html</anchorfile>
      <anchor>a8d5311f80630663868490af7160583bd</anchor>
      <arglist>(fei::Vector *vector, const char *libname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_FEI</name>
    <filename>classtest__FEI.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_FEI</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>ae8e55db25561c41a58531bd88e6e288e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_FEI</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a3fb09eb642092bd52f6de97b7da50ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a1bba2ae29b82398d514371789352391b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a41e2db8f620e1b96d64c84ab0f4216c9</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a8040501a8777ffd34776f7bf67dc6134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>ae1428d5d5a9cb1fcbb3c288b0b0b6a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a08f63ef1c2563c0cdcb70fd168867b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>acaefdf13e0a40e9df942df1b3f8ba716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a618558a837466e1410a60315288c8843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fei::SharedPtr&lt; fei::ParameterSet &gt;</type>
      <name>get_test_parameters</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a1752e4bf6c035e91b289af93ec777243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>fully_qualified_name</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a003beea40a895729844330bd857e3d08</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>fileName_</name>
      <anchorfile>classtest__FEI.html</anchorfile>
      <anchor>a547d064130d7c85c1a49a871c85390b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_FEI_Impl</name>
    <filename>classtest__FEI__Impl.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_FEI_Impl</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a10f90f6ed838474890f3a5cb8ce8491c</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_FEI_Impl</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a99ef59896d6ff83be2d6b41a0467b20f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a04754fbb3e11ec243fcc4a386f053875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a2c647ebd4b6af5aa387d50c9b6152f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a8172556415a93a02ab819fd0e1fa7d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a3d9a629861993fa67d4ba13ec86d51e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a347759651d2ad552c79ebfcd19de197c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a2995b8462e20b4195fd04c207610a4bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>a9ed8a7060403339133d0d526f840e096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareCoefs</name>
      <anchorfile>classtest__FEI__Impl.html</anchorfile>
      <anchor>acd1a817ed95117f79af5c71748018686</anchor>
      <arglist>(int n, const double *const *coefs1, const double *const *coefs2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_FEI_Implementation</name>
    <filename>classtest__FEI__Implementation.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_FEI_Implementation</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a6880a8c11dd2422ace525af392e5ed7b</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_FEI_Implementation</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a0dd30dde759f894aad3523eea5a63414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>ab08cec68fc689d3376e2ffe17383bc0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a9912a5cf03ee5ec2b3e44fb6b3a4745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a31ae022bd20866f4172ac0735133c965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>ad0ce54d1bced28b1294e8961fdbd6b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a866093c8ab11e78d3494fc9d43ec2752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>ad9ed900abca9e18fe6f2e149262bb066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>a7f7a940902210daccb8915290ca88f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareCoefs</name>
      <anchorfile>classtest__FEI__Implementation.html</anchorfile>
      <anchor>abaafb85072f230e8f0f7defb20cc1629</anchor>
      <arglist>(int n, const double *const *coefs1, const double *const *coefs2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_LinearSystem</name>
    <filename>classtest__LinearSystem.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_LinearSystem</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a8c9def05bd9edf154330951c7f2a027e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_LinearSystem</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a13f8541274dd9b7106bd44e4905fb4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a94ca4f43a0122364407452e42cf39796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a6796286d2b11c26d2e3bf75bfd03afbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a34379eca595dac7704fa131261d8fd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a2f699f8a2974397653e98ee4fef811a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a017e1001580a46b14cdd216c4aa5132b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a352d9850b91c82719c6a3ebb615f5247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test5</name>
      <anchorfile>classtest__LinearSystem.html</anchorfile>
      <anchor>a27d753bb49aee996207a722c2ddc5a7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Matrix</name>
    <filename>classtest__Matrix.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Matrix</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a74fa4b04b1e5f0c1587840b42c53ebd6</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Matrix</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a42c7212c2d0ee7516b69d96c5266f5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a4c908707475c71737b06e6c6da7b11b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a45ed825b15ce27bc196e0a10d9bd0202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Matrix &gt;</type>
      <name>create_matrix</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a8ebf595f14ba3eb15f4dc2cf789eb339</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Factory &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix_test1</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>afea0ac7f9907d23723d808769c9d6806</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Matrix &gt; mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a481e89d36b39dcda70691d96477f801b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a0bd42111546eb6848a4758c7e9550740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>afc1b4016e1bd20b4fd2859a0f81eda18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a519291d5bc7b805f087cfbe9f1a39520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>af64cea2cbc476a2ab90177f6d06350b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest2</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a6034046f33f98ad46799cb95e9c0ff14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest3</name>
      <anchorfile>classtest__Matrix.html</anchorfile>
      <anchor>a8cd68129b66023d304d756e3090137fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_MatrixGraph</name>
    <filename>classtest__MatrixGraph.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_MatrixGraph</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a358602234aebee7fc2f023cc090c31cf</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_MatrixGraph</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a77c9ffb2c687aa3aa1cf01153befd61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>ae8c2491c5e00acef4c72c52f35ee012c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a420ca62647a2c5f24ecb3992ef6d0d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a73f3f6954f39857570f3dd51be179709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a0d5686d31549afe9b86a7ddabefa8cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a4e3c142ca8863c790bf4f3dcc72436d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a8e77e8a827f13c4af97f625e61986b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a4fec8bd500ed3444e59a317f683c4a0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test5</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a7f012df028232d9e3a3476afbc478df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fei::SharedPtr&lt; fei::MatrixGraph &gt;</type>
      <name>create_MatrixGraph</name>
      <anchorfile>classtest__MatrixGraph.html</anchorfile>
      <anchor>a12dd12a0a444b0bcee8f08eb1b98898f</anchor>
      <arglist>(testData *testdata, int localProc, int numProcs, bool bothFields, bool nonSymmetric, const char *name, fei::SharedPtr&lt; fei::VectorSpace &gt; vectorSpacePtr, fei::SharedPtr&lt; fei::Factory &gt; factory, const std::string &amp;path, bool turnOnDebugOutput=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_misc</name>
    <filename>classtest__misc.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_misc</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>aa5578a111fc7265e85669b7611300a3a</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_misc</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a157750c9d42de192bad3e941b8609e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a951197f188df5d3be401b9cc8823cdd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a17998bc5b369745a571c8f4b84efa053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>af9371610d272ff09985861c69db3a50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a8be74c4ccb5b892e7197cf37723ed1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a0bdf2427d4635f01dc4764cc1de977bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a80c7536d214195acfc15b32e6e1dd3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest0</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>acce01c27ec216c198b82cc64955263f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>ae74d3ad82924c4df123533caaecc6af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest2</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>aca8155d291de2443ce107c40d01145dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest3</name>
      <anchorfile>classtest__misc.html</anchorfile>
      <anchor>a640e16900e94dcdccd034f2c46a41b15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_PointBlockMap</name>
    <filename>classtest__PointBlockMap.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_PointBlockMap</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>af31238d18d06e236da7681a042087988</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_PointBlockMap</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>a16e8a828e6f0477e99b45f5fb0f11a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>ab1d16f034ef222a9c483f16eef2927ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>aaeff4a7c43ff46d7f913bd5eb864e1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>a95e985a70145aa06997b6b659ecd518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>a553adb911ad33806c60c3ecef0d5a50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>a91046e41ad66227c221ce5273d3c7775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__PointBlockMap.html</anchorfile>
      <anchor>a63f4c51b44e5d2c8ee9d68ec067b29c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Set</name>
    <filename>classtest__Set.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Set</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a1a9097df220dc82741d3965d8acbd6f0</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Set</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a08e4c5cdf85d7ad0e5df755f7c7b904b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>aa08a142bad73385ca89e0d0f0cf0c009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a2318b8b55aa3e19e57a6bfea57e3861b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>ac8b66600c3c8f96d85d1b382d6e5a03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a73b8d05ecc74dc4e2a3c13f2a9f21b53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a4fb6f1784a05c0f5122f0c54500d36b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a3f93278d31be63bd556b17ce03de1f6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test5</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a30840dc53adfe594a509fcec48dfa621</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test6</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a1a1a0ce2af4f5923d51d6077673ca56c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test7</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a45e986d29131ec931c940e1ed985caca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test8</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>a1ddef7c6045d3a588604b4a5a10c93fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test9</name>
      <anchorfile>classtest__Set.html</anchorfile>
      <anchor>aa098c99b8bd758db52a146f85f8a519f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_SNL_FEI_Structure</name>
    <filename>classtest__SNL__FEI__Structure.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_SNL_FEI_Structure</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>a2a59455964664249cef0d94b13a0663a</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_SNL_FEI_Structure</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>af5e05513a740be42e753903e9d1060ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>aabc17457624758c4caae789d7ce8c93c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>ad52e34ff30110dd68c9a2356cc68817b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>aba31ccc65398b28a13cc868422b15cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>ae1283b95bf1c55af0fce982a02ed9511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>a47ea1b8c30aede2b911d565d1e981fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__SNL__FEI__Structure.html</anchorfile>
      <anchor>aa742076cc7144d72748893ea6c57052b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Tables</name>
    <filename>classtest__Tables.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Tables</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>abda5acd332b1d0dc209961e89aa50be6</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Tables</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>a5db2ed4027c0f6bed49ec2248ad9c796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>a9158e652cea04761e7ede9a143d368fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>a3d88c8f04c0e4c0bb94094b57bfcc9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>a8a61ad1f9d828c7c00bd70ac0a8fc6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>a5df7910c85e1c81ae6d05c7e49b850a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>ac4ae7119d0a80b7ad8a0611934c359ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Tables.html</anchorfile>
      <anchor>aaf8bdfc0622b5e61300fc194702c8194</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Utils</name>
    <filename>classtest__Utils.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Utils</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>aa5dcf0de5096d79acbcb3cf7f58ae668</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Utils</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a35949655c131aa59be5f1a6dc99c8a2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a217980fad82fa60424a1aa383c914ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a9923aa2e7b1b0973de241ff8aef88c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a59a304ad0e53ab83f6d6fc74c47485ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a4e3bcd8fede93c9446b813b26bf968ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a1293fc1e2781118c685b29ade5954262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>af93b9f106a2cf38054e7d8cf8856d4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest0</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a1dc4e1a49db25f1c203b95eeaf1205dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest1</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a4b9cf26616ae64aa436c1d4d54a6f4ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest2</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a27524c67ed272ddfdce488a0303e7f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>serialtest3</name>
      <anchorfile>classtest__Utils.html</anchorfile>
      <anchor>a197e8762457395682d46c56ea17ddfe3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Utils_dummy</name>
    <filename>classtest__Utils__dummy.html</filename>
    <member kind="function">
      <type></type>
      <name>test_Utils_dummy</name>
      <anchorfile>classtest__Utils__dummy.html</anchorfile>
      <anchor>aa6406ddedc34ddd19f4246b27f61ceed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~test_Utils_dummy</name>
      <anchorfile>classtest__Utils__dummy.html</anchorfile>
      <anchor>a73994848ca14c5e0a2f73e5eb6b214da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_Vector</name>
    <filename>classtest__Vector.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_Vector</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>a676e17d70b151acc69a93eaad05e8dec</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_Vector</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>a3edf3c857ef3a2a2526285e58cf90158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>ad0c2cee2b6b9c28fc965060ff8380c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>aba7ed0ccd33b239dd3e599aa13ac12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>create_vector</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>a557031e63f54d59093dedfe8dde38ef5</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Factory &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_test1</name>
      <anchorfile>classtest__Vector.html</anchorfile>
      <anchor>a79bca7d9c4bb83dee9912452050a2313</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Vector &gt; fei_vec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>test_VectorSpace</name>
    <filename>classtest__VectorSpace.html</filename>
    <base>tester</base>
    <member kind="function">
      <type></type>
      <name>test_VectorSpace</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>aa973f6b5dfa36a4013841b3df6ed8873</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~test_VectorSpace</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>a5e96dea12a4bd4ff019004605263485f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>af5c17656b4b55039695aa860e9e2e5f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runtests</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>aa94a1795c59dd4012eb61985a0de9b0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test0</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>a1357f35fc13e2c3ccd6c0f2ac79a3bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test1</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>ac2572f8e17aac80ff5e361533567bca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test2</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>adf396a86aeb6894bbd9dba608d514509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test3</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>a2da9d34dd69ef04ddbf2f0a503c5bb9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>test4</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>acc3dfc8f995e4be37d2c9b377807e37e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>create_VectorSpace</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>a48af22c8146eb77f4b03738ac6fe3b25</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>create_VectorSpace</name>
      <anchorfile>classtest__VectorSpace.html</anchorfile>
      <anchor>adccc2c2d832ee0cf36513c9543681ab8</anchor>
      <arglist>(MPI_Comm comm, testData *testdata, int localProc, int numProcs, bool defineBothFields, bool initSolnBothFields, const char *name, fei::SharedPtr&lt; fei::Factory &gt; factory, bool turnOnDebugOutput=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>testData</name>
    <filename>classtestData.html</filename>
    <member kind="function">
      <type></type>
      <name>testData</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a16e7e5ccd432efd537be623804a40f1c</anchor>
      <arglist>(int localProc, int numProcs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~testData</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a9afe9e39efb66e9ed16cd76272ff965f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldIDs</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a536babe9d7178909e7fa97d4212ae6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>fieldSizes</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>ad9d3856f9ac95eae474464df9164b874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>idTypes</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a773039932e17376e915049231fc33221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>ids</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a4e68c6309ecf1d4bcd7b17a7f7fb12f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>sharedIDs</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>a655558f93af4d575ff85cc7c0c83b369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>numSharingProcsPerID</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>ad66f9ede54cb2414497498d7aef81777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>sharingProcs</name>
      <anchorfile>classtestData.html</anchorfile>
      <anchor>aecdffd4ce3ca4f3f51c609ad9ccf13ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tester</name>
    <filename>classtester.html</filename>
    <member kind="function">
      <type></type>
      <name>tester</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a55baf19772ce956fca2480959e84848f</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tester</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>ab79e99149907bf96d75d929f1dc49410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a5856bf4f2c6edd3ca78195e0d94d9e21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>runtests</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a7ceb21d617c6afd79b53d78799893a74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>aefd64c1a2ed8e34143b6f6c3a6c8530f</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a8a70b8bbf103c5b9c8e52b264c42b3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a81c2e36e6c0c9d23c6741fba23b01d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a96c4791aa2c965622753bfe81b694d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>path_</name>
      <anchorfile>classtester.html</anchorfile>
      <anchor>a544df99f977bbb7aabe36fa8b5a1ba3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Vector</name>
    <filename>classfei_1_1Vector.html</filename>
    <class kind="class">fei::Vector::Factory</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>ab5170c62a9ef27cd61ed1710ebdd468b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a646d7d15a8985fde8a419a5affba4a25</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a26e398a85c1a43dc29f402b77ccfae4c</anchor>
      <arglist>(double scalar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a95fe5767de21b5e5d2177435b4a67bdf</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>ae5436675ddc7a729c19bbee787a54d3f</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOut</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a2456ccb68c15cb2610ee17ee31d17238</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>update</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a4739b9e210b77f57acc2adb943005ca9</anchor>
      <arglist>(double a, const fei::Vector *x, double b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>scatterToOverlap</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a4616c794d14579d41dc5dcd8171ebfc5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a8d9b01199cac870030ab831f7b2e9d95</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>aa57af15909a09444343820f2418d70b2</anchor>
      <arglist>(bool accumulate=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getVectorSpace</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a57233dbab9e1c03c6cbdd3294e4ab1c1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorSpace</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a8ebac51cb111c1faeba42a596b68541d</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a6d028a2d78d8ceeb1e39837848e1c31e</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyInFieldData</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>af2d07fd2295ef673eccfb9b0ffc14bc9</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyInFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>aebed980addfa96ffcf6f2ef9477bfe13</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutFieldData</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>ab5a4a82e3ac54236661f0684775c0f51</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, double *data, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a9ef6cdc400b243b20aefc9d6ec43dab3</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Vector.html</anchorfile>
      <anchor>a9a16f030561d4d28b06eded1096189d2</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Vector_core</name>
    <filename>classfei_1_1Vector__core.html</filename>
    <base protection="protected">fei::Logger</base>
    <member kind="function">
      <type></type>
      <name>Vector_core</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a83be8c0a7e1801b53d18dd671976f7ae</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, int numLocalEqns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector_core</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a92673f18d5c651e4d17301c5c36b5426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOut</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a546ac1ce3c37cac81f9b23c55a02e04c</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>sumIntoFEVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a30a3edc7af572ad44b1351b4e6487013</anchor>
      <arglist>(int blockID, int connOffset, int numNodes, const int *nodeNumbers, const int *numIndicesPerNode, const int *dof_ids, const double *values)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>copyOut_FE</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a9785973a1fe61cb986864c95942af825</anchor>
      <arglist>(int nodeNumber, int dofOffset, double &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>giveToVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a65a06788bdc0b52c17e2e5134b663af6</anchor>
      <arglist>(int numValues, const int *indices, const double *values, bool sumInto=true, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>scatterToOverlap</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ac181a7db28274d03a78032da1498a324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlap</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aae29423e9f5e27c4bff41170a621d66f</anchor>
      <arglist>(int numRemoteEqns=0, const int *remoteEqns=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>assembleFieldData</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ae52cd981bef9279a94a0f0dc4cd11e67</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, bool sumInto=true, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>assembleFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a4c01cc712469a9e77f514df56662358a</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, bool sumInto=true, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a7b54185698d946393d6b41700c6d7b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a3e9673609640c6127599d95bbf2bef20</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>copyOutFieldData</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aca7bdac20e2ff5f51c8a8d6e62ce9a00</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>giveToUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a8c4169d6a9739d365f5fb83c1d668132</anchor>
      <arglist>(int numValues, const int *indices, const double *values, bool sumInto=true, int vectorIndex=0)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>copyOutOfUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aae32243e68fde8e03f95dc93558cc22e</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a6760cbf62f70f4e1a1ea512063d1fc51</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a9855b2af2dcbce2c80de16f5fc1690e9</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>get_vector_space</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a75427f4fc3d90d89b8de0154354a5ba9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_vector_space</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a96333b0e32525378038cfac355624740</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vspace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>firstLocalOffset</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aa78d69b93471304c27470e9992e89884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>lastLocalOffset</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ae43d909ae763c9ef8210d0328e9d62fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>work_indices</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a2ea32e5c7936aed9c24efa298333e836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>work_indices2</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a69d3cea54ccbcfcfe717c3baafeedf87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveFEVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a95e49964c158cd8886d1a9ee59ef69ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFEVector</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aeff5bdd2d596886bf03434b7d811d77d</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; CSVec * &gt; &amp;</type>
      <name>remotelyOwned</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a30719af4406b8d7a044c355517f93f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; CSVec * &gt; &amp;</type>
      <name>remotelyOwned</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ad55a5a5fbfdceb3eefdca57ddb896beb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>remotelyOwnedProcs</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a8229c2e50abddba5eeec4ebff54d1660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>remotelyOwnedProcs</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a80ed9c95660574d3f09b47d798393202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>fei::CSVec *</type>
      <name>getRemotelyOwned</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a54aa83225c95b98eb22e7824b1313980</anchor>
      <arglist>(int proc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const fei::CSVec *</type>
      <name>getRemotelyOwned</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a3c75e74abc3521c5f9870a34d3e2a035</anchor>
      <arglist>(int proc) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fei::SharedPtr&lt; fei::EqnComm &gt;</type>
      <name>eqnComm_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a213e0f25b2faac99e0687ae31a8c45b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pack_send_buffers</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a22dcf16d61aabc221155af792f83b9eb</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;sendProcs, const std::vector&lt; fei::CSVec * &gt; &amp;remotelyOwned, std::vector&lt; std::vector&lt; char &gt; &gt; &amp;send_chars, bool resize_buffer, bool zeroRemotelyOwnedAfterPacking)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a367fd60703921c3829b4573caedc43f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a2b754e0eaf32f37df9eb1caf64f69e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalOffset_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aa45943544e70800dd49bb2e65673c21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalOffset_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a00857c51d45107ba68a566e4b85ea52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLocal_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>af45dde907eb833419fd58ec8bb3cb27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>work_indices_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a934420a40270233a64c214ec60543059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>work_indices2_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a5746f98004c3c488e16ecfa838f9a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>haveFEVector_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a777cd5af13d81178545559b17ad23098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>remotelyOwnedProcs_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a6d06ec73b814e22e411c42ac454e1deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; CSVec * &gt;</type>
      <name>remotelyOwned_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>aaff82dc4a6db7a1e7b2730e925323430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>sendProcs_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ad1b1ff33401b3dd1f760c6898e7ecd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recvProcs_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a0ded9e64043922474bf87b7e38e8b579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>recv_sizes_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a24be16706b1b00fca5cd59f9a10365d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; char &gt; &gt;</type>
      <name>recv_chars_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>acba221a21d3cfd47d607c6e4909d4371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; char &gt; &gt;</type>
      <name>send_chars_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a7562fd4e3110fbb68d20d162f8c741ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sendRecvProcsNeedUpdated_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>a844c93d83cb6eca22b8fcdc02ebcbd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>overlapAlreadySet_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>ab25907e5aa5e13feb375b77192932708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1Vector__core.html</anchorfile>
      <anchor>af3b494794849d69a7ee21fbcc9d07318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Vector_Impl</name>
    <filename>classfei_1_1Vector__Impl.html</filename>
    <templarg>T</templarg>
    <base>fei::Vector</base>
    <base>fei::Vector_core</base>
    <member kind="function">
      <type></type>
      <name>Vector_Impl</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a7d6f5e879a3652e0ecf0e086567b2ad7</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace, T *vector, int numLocalEqns, bool isSolutionVector=false, bool deleteVector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector_Impl</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>ae06d7071ec90da718bb504c17260d679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a8a0cb837c05396a61ef861b21021ca93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a575c4ced1b8d722ac09ebddfcaabc7fb</anchor>
      <arglist>(double a, const fei::Vector *x, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatterToOverlap</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>aab665d2e0f8dbad80377dd4cf0d901bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>afd04e295f304b39f5c81a78daa235bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a3470a6f56fb07e28f935f7ecb7b205c1</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>aaff591fd0fd8836d707220de9fc256c9</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>aa1355f03c6a78a1b8561ae2b99aad8ca</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a23dc927468e11ed3ef71e1fa5728870a</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getVectorSpace</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a97aa9234c1138823584df53484eb398c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSpace</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a7ca68b5310706986260149391601db3c</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a3120fc669b79c7ae4a765783f6908f04</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldData</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a0d54a1ad4e9491f6dce27b1b21a5e0c0</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a93ba4786920e6c70060a25e889e76c09</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutFieldData</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a7553b4a144acc9ae71c273a484c03a74</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>ab5890e5aeacfec46cd5466b0061ee61b</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>acbddebd4e6fb65acd4ae92fd66a9bba6</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>ac46ac5aeb8cf4fe17625d8f5da483c01</anchor>
      <arglist>(T *vec)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a53fb44ff406368760dee8a2e5fe31d45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a81edf2b5b2f65ae986344f98148f6cb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOut</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>ac7b021a13c7da457a97f3e67081cc520</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOut_FE</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a3545362e8f5ce8b4e300321d8b932a8e</anchor>
      <arglist>(int nodeNumber, int dofOffset, double &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>ab85db298dd9cb34234341a9dc3d4168e</anchor>
      <arglist>(int numValues, const int *indices, const double *values, bool sumInto=true, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>copyOutOfUnderlyingVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a9b129ab059acd7ddee09bc5e15c37a02</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoFEVector</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a4d3611adcf956316921a9465e44c41bb</anchor>
      <arglist>(int blockID, int connOffset, int numNodes, const int *nodeNumbers, const int *numIndicesPerNode, const int *dof_ids, const double *values)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>vector_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a81b9785029bbc7953673e4fffe556988</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isSolution_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a631a53c7b845de8f6a19e367cee730be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>deleteVector_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a352a209d7f8897e62ec6770c4e4a1118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a4c711f95823dd5649db516b034128421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a5a4fb21039005927ddc42820aa128af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1Vector__Impl.html</anchorfile>
      <anchor>a192d9a7c91ed64cad0f91cebf6d4b67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::Vector_Local</name>
    <filename>classfei_1_1Vector__Local.html</filename>
    <base>fei::Vector</base>
    <member kind="function">
      <type></type>
      <name>Vector_Local</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>af49160cb815e917eaa0df2fa5907a5fa</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector_Local</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ab2ea398c6d5b09e7a4bed7c823c46e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ae232a000b96ad55fd45356c21e4e710f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>abaf5541e58a7e9b82e622ba0442f5bbb</anchor>
      <arglist>(double a, const fei::Vector *x, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatterToOverlap</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ad1f5408ab70145b9d2dddd3c833b35d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>aaa8d8ccdcb33fef760189a596a771c9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a05a77f5e2a3469d8655bbdcda1deebb8</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a73f4ca321a1a7e8aacfa54fbd3e77456</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ac7ec43b798675ddab38472e83f114601</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a2395530e017816ff4555fb8155331d58</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getVectorSpace</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ad5655f9aeb140caef1f3521d7d675775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSpace</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a87fea800e20951529a0eaee902c10216</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ad5faed540d33910cd63cb372177c5331</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldData</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ad77428ef6ede49ccd02dde860b7b9493</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>adc54b348781541b52b3e8bb377cd7306</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutFieldData</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>ae1a1a4bed3155256a7f5e138904bfaf5</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOut</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a531921ecb91adffe57f93d6bf17c76a5</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a22689d5cf03145799c273217ac859d25</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a5de0d9bd49b65cd36763e6b1020ecc4f</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getCoefs</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a5ef2446916211bda4388c38c2190b099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToVector</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a1982f33a4ac6cebfb1f6aab0c83a1335</anchor>
      <arglist>(int numValues, const int *indices, const double *values, bool sumInto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleFieldData</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a5c78d81998ba2fe6c6335a77035f0f49</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, bool sumInto, int vectorIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>assembleFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a6a3015f43ef135013fd3346b9f0a4984</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, bool sumInto, int vectorIndex)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>vecSpace_</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a444bc75bc0c24cbb3db95587e58d590f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>coefs_</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a8641c4b98b3fee6b5a6e79a189beda9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>global_to_local_</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>aef88735d386fc120a07fc6ff84c381d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>work_indices_</name>
      <anchorfile>classfei_1_1Vector__Local.html</anchorfile>
      <anchor>a334e3da65b55f072eb9facff408c8eb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::VectorReducer</name>
    <filename>classfei_1_1VectorReducer.html</filename>
    <base>fei::Vector</base>
    <member kind="function">
      <type></type>
      <name>VectorReducer</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a2c31b8d563073ca065e7ed8d51640c7a</anchor>
      <arglist>(fei::SharedPtr&lt; fei::Reducer &gt; reducer, fei::SharedPtr&lt; fei::Vector &gt; target, bool isSolutionVector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorReducer</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ac89a27659c7b031c743a7891518e7fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>getTargetVector</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a957694688499eecc57045f2fe1d2df93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typeName</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ad6b15296f9701a24a8adbcbbc47714da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>update</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a5d1bbda8aca9893b58d350ea37646feb</anchor>
      <arglist>(double a, const fei::Vector *x, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatterToOverlap</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a4042bafc188ac047a84bdc9822562698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommSizes</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a0ffae291aa6880b4d704c37d4de715e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherFromOverlap</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a6a84dd7c99dbc61ed5932e638db6b5c9</anchor>
      <arglist>(bool accumulate=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>putScalar</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>afeb921fbce523081e82a5a87543740ad</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumIn</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a43e4c4bfc47732da787cf17c82a3299e</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyIn</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a5f6b0b533a50ba018d6367ac52f0086a</anchor>
      <arglist>(int numValues, const int *indices, const double *values, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::VectorSpace &gt;</type>
      <name>getVectorSpace</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a26011ff8dea7ab7a3044a4f582b54bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSpace</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ac4f51900ccff7a43afb0a0ed7198b5da</anchor>
      <arglist>(fei::SharedPtr&lt; fei::VectorSpace &gt; vecSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumInFieldData</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a2efd3c670e37161187884cc21e0d91fd</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldData</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>aa487776c183fa94523cc8a59f8904a20</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyInFieldDataLocalIDs</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a86fab1dbfee49a8201716a96b5b07da7</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *localIDs, const double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOutFieldData</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a24a28d379aa2aea77575bd2f192aead8</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, double *data, int vectorIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToFile</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ab2ca9afed51d9a1d9d0308867ca575cb</anchor>
      <arglist>(const char *filename, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeToStream</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a35112c63ee2f8886d37da61d5b84bdfa</anchor>
      <arglist>(FEI_OSTREAM &amp;ostrm, bool matrixMarketFormat=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyOut</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ae77bb27acd9aed045d501815e2694350</anchor>
      <arglist>(int numValues, const int *indices, double *values, int vectorIndex=0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>copyOut_FE</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a29adca079c136ca73e5d06f7d4dbd596</anchor>
      <arglist>(int nodeNumber, int dofOffset, double &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>giveToUnderlyingVector</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a83e60f34c0f8dcdceca4f526f09fd17b</anchor>
      <arglist>(int numValues, const int *indices, const double *values, bool sumInto=true, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sumIntoFEVector</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a7e5a4a0f4fbd5c526c4e1feb467a8d20</anchor>
      <arglist>(int blockID, int connOffset, int numNodes, const int *nodeNumbers, const int *numIndicesPerNode, const double *values)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Reducer &gt;</type>
      <name>reducer_</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a0986572d5723c89afffc2928ffacd69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::SharedPtr&lt; fei::Vector &gt;</type>
      <name>target_</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>ad574a430fa506ebcb7c957064cac15b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isSolution_</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>acd045f8b1b580c6246ad118f7e7fcedd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>localProc_</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a05b16468937762dbb3de1bac4b56b555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numProcs_</name>
      <anchorfile>classfei_1_1VectorReducer.html</anchorfile>
      <anchor>a28e6810796955fefebf7a1b5bad60d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fei::VectorSpace</name>
    <filename>classfei_1_1VectorSpace.html</filename>
    <base protection="private">fei::Logger</base>
    <class kind="class">fei::VectorSpace::Factory</class>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a1772c97a52073c31e6eb8c61c61ff492</anchor>
      <arglist>(MPI_Comm comm, const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSpace</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aed9d5305ef5067300506ca6104af1340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a7d32400ceadd5c846a68f81e73d0fb83</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineFields</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad0dd169d7e54315ef09ec7eaae063336</anchor>
      <arglist>(int numFields, const int *fieldIDs, const int *fieldSizes, const int *fieldTypes=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineIDTypes</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>af9d1fa5384e8645cfddb92cd0cb4489a</anchor>
      <arglist>(int numIDTypes, const int *idTypes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIDMap</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a31723cfbdbf08518b45ccf3e2f5dae46</anchor>
      <arglist>(int idType, const int *localIDs_begin, const int *localIDs_end, const int *globalIDs_begin, const int *globalIDs_end)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDOFs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab54a6225de742127e079c37e7f79e4ce</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDOFs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a9749a10828acc681d8afe296a11238cd</anchor>
      <arglist>(int idType, int numIDs, const int *IDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a611c384edbab89621be195ac7e94e155</anchor>
      <arglist>(int numShared, int idType, const int *sharedIDs, const int *numSharingProcsPerID, const int *sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a57aa3f6c2e774d13105128a90039f4cb</anchor>
      <arglist>(int numShared, int idType, const int *sharedIDs, const int *numSharingProcsPerID, const int *const *sharingProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setOwners</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5198e5d9b131520620efcbf4bc85065e</anchor>
      <arglist>(int numShared, int idType, const int *sharedIDs, const int *owners)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVectorSpace</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab121a72373f5aa216b942cc9c8de26e0</anchor>
      <arglist>(fei::VectorSpace *inputSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initComplete</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3c58bd78b11537200038d395f8a8653a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initCompleteAlreadyCalled</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a983b0ecb58e2a8e08a71c771151415b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; fei::FieldMask * &gt;</type>
      <name>fieldMasks_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ac11d8359b774f5e35c4e4174eea1c496</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>fei::Lookup_Impl</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aee4cf57d45e74a00aefd2d479f16472c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab1b8245b6512449d92d2772e4753dd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>idTypes_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>af78f6f8fe9b1830612cd61cdbeff6d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, unsigned &gt;</type>
      <name>fieldDatabase_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3d8a22b57a5848d8dcea36fc80f1d72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fei::FieldDofMap&lt; int &gt;</type>
      <name>fieldDofMap_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>af2131af3d2d447e6d542785073b11bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxFieldSize_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a8049bc5d93882b46e1d77e9d916c9d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; snl_fei::RecordCollection * &gt;</type>
      <name>recordCollections_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a7ccf0e32f77c7b7ad151618f730cc34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::SharedIDs&lt; int &gt; &gt;</type>
      <name>sharedIDTables_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>afc92b4c44ce3171b471d36e5e556a81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::comm_map * &gt;</type>
      <name>ownerPatterns_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab9372bc126df6a457be0de35110b4123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, fei::comm_map * &gt;</type>
      <name>sharerPatterns_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a4c99db79d5eb52fb4e84690e5d4df6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sharedRecordsSynchronized_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a75664d866c3765295c6e954379260d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>snl_fei::PointBlockMap *</type>
      <name>ptBlkMap_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a022f9032703c336606fccc8014655bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalOffsets_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a2eb4aa0c1d25478cad889d0a8825b24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>globalIDOffsets_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>accd40985df15a7fb25a94b8f146a590f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>simpleProblem_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a2f6b9545bc956948c87927e0d5214a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>firstLocalOffset_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3d40c99fcac15d3754bfe67cd1e7572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lastLocalOffset_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>abd9e4d9364cf48e2412407aa0c5d1321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>eqnNumbers_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a050496ff7f9552bd69dada1a9c6dd352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newInitData_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad65d784493a1a989f45c332423aa019f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initCompleteAlreadyCalled_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa5aaa666a59c8838764e4b2667024ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>afd68e7bc236f860aa3eddda96b267247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>dbgprefix_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad81638b0ffcdeb8bd417f7779f1eeec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>checkSharedIDs_</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a21d87971ee51db8e86deb70367eeddc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>getCommunicator</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a2d5e3f053d42459937ca65ed2ba8c5e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad091d76dcdf0b5028fb7e7b0c43dbcae</anchor>
      <arglist>(int idType, int ID, int fieldID, int fieldOffset, int whichComponentOfField, int &amp;globalIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a45dcf28abae7d501dfc996ebca32bb20</anchor>
      <arglist>(int idType, int ID, int fieldID, int &amp;globalIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalBlkIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa172736a2c8bbce56b84e5c7ec9cfcc7</anchor>
      <arglist>(int idType, int ID, int &amp;globalBlkIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3a30c31bd14c89deb82fe54c4cf62148</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int fieldID, int *globalIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndicesLocalIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a78483d519ad6af8ab72916c45a2ee588</anchor>
      <arglist>(int numIDs, const int *localIDs, int idType, int fieldID, int *globalIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalBlkIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>af9d5337d256a1c5255a6815fadaad24d</anchor>
      <arglist>(int numIDs, const int *IDs, int idType, int *globalBlkIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a6302eb2c6187a038a807c8f62f337ac9</anchor>
      <arglist>(int numIDs, const int *IDs, const int *idTypes, const int *fieldIDs, int *globalIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a978abf48cd6d44b6de9dc587eae8d231</anchor>
      <arglist>(int idType, int ID, int &amp;globalIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDegreesOfFreedom</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab51e6e5ce49d1ba1e9f7da8acc1e6c66</anchor>
      <arglist>(int idType, int ID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>abec9b5f4c1be9b620ef40c306274aee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFields</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a834d808f97524d4360cd34b3e62ac740</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFields</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a19a4e805c3ad8e9e23132c5c74f3451c</anchor>
      <arglist>(int idType, int ID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFields</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a64e0fb9080a673fdb90826c9efe5e6f0</anchor>
      <arglist>(int idType, int ID, std::vector&lt; int &gt; &amp;fieldIDs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumIDTypes</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a939480e21047bf344169b7a228311df7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIDTypes</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a506e21f5de1195e1f469bda1d8d9bf38</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;idTypes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndexOffsets</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab91e703c264e05e3fdd1d072ae739c20</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;globalOffsets) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalBlkIndexOffsets</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a901ace1c30fa193eadde3a9eed2a13ef</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;globalBlkOffsets) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProcPtIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a814c7469ed9d4e6e9f6201895e6ea327</anchor>
      <arglist>(int globalIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerProcBlkIndex</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3fbb8c6fa45e84441113208760959151</anchor>
      <arglist>(int globalIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aaadbb5614e0f2d77a5df3b932fe09ef0</anchor>
      <arglist>(int idType, int ID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocallyOwned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a620b6fcba9650fdf7cde61c5e38902ae</anchor>
      <arglist>(int idType, int ID)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getFieldSize</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a194eeeee945adce78a9b9f021db66df6</anchor>
      <arglist>(int fieldID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOwnedAndSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a1af68df4a9916aa6bf284ba036b95a5b</anchor>
      <arglist>(int idType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOwnedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5f8f8b66719c4cdb8a724d915974c30d</anchor>
      <arglist>(int idType)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnedAndSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a87412b321d400359cf90403a321c303a</anchor>
      <arglist>(int idtype, int lenList, int *IDs, int &amp;numOwnedAndSharedIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ac0d6cf244d8a12b3d0f524b48581c58c</anchor>
      <arglist>(int idtype, int lenList, int *IDs, int &amp;numLocalIDs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices_SharedAndOwned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5a64422cf06379af35f5fc20d7b14882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndices_SharedAndOwned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a86e5dd7cc710f88ab2fc5a4479e85e32</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;globalIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlkIndices_SharedAndOwned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a1b322be2fdd62447eddedf6e2e1b3c09</anchor>
      <arglist>(int &amp;numBlkIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkIndices_SharedAndOwned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a45e6790ba136998db991f413bf0b06f3</anchor>
      <arglist>(int lenBlkIndices, int *globalBlkIndices, int *blkSizes, int &amp;numBlkIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIndices_Owned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5167e21023e8dd09a7300faff70b8769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndices_Owned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa93584ef37f91b9d183a0bae160f9a7e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;globalIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndices_Owned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aecea99d5e34f4f0c2118b9a330ef5bc0</anchor>
      <arglist>(int lenIndices, int *globalIndices, int &amp;numIndices) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBlkIndices_Owned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a4666a9287c055aebf10d10970106f9ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBlkIndices_Owned</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ada7014b2d628d2207f90cf05b8328f63</anchor>
      <arglist>(int lenBlkIndices, int *globalBlkIndices, int *blkSizes, int &amp;numBlkIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a012a0559569cd5e5754a71f4cc81a712</anchor>
      <arglist>(int idType, int &amp;numShared)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a1eb3a642440b33e90b858c5969a2c805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumBlkIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a27787eb14c2c6ecea24ee07311042406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecordCollection</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ae4ce2cf544ab22a2715acd480b8be6bb</anchor>
      <arglist>(int idType, snl_fei::RecordCollection *&amp;records)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecordCollection</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a25d76de7ce4d3b9729f0568b337d5ad6</anchor>
      <arglist>(int idType, const snl_fei::RecordCollection *&amp;records) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>getEqnNumbers</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aebdb45d7e6ac8fadd1e124f730fe9f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getEqnNumbers</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a2350af0a6311b251d11f407458d8fc3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>snl_fei::PointBlockMap *</type>
      <name>getPointBlockMap</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>abf9c8a692546304d1b23833b98f9420b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const snl_fei::PointBlockMap *</type>
      <name>getPointBlockMap</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a32a9cb58d4b77b859c5cf6d252f026df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fei::FieldDofMap&lt; int &gt; &amp;</type>
      <name>getFieldDofMap</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a775578a20b36336af37f86a74d0fd6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a2c7bdf0dac1549afee2bab1b7c5d739b</anchor>
      <arglist>(const fei::Pattern *pattern, const fei::Record&lt; int &gt; *const *records, std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndicesL</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a14515b76f8a1b59503242577990ad1f2</anchor>
      <arglist>(const fei::Pattern *pattern, const int *records, std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalBlkIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a20e4dc74fa35f461a6e27c2ee0c51b06</anchor>
      <arglist>(const fei::Pattern *pattern, const fei::Record&lt; int &gt; *const *records, std::vector&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa875e141e60b4b36075de8d723c34ffc</anchor>
      <arglist>(int numRecords, const fei::Record&lt; int &gt; *const *records, int fieldID, int fieldSize, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndicesL</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a4a8e2fe890306d0421a929667a3aae1a</anchor>
      <arglist>(int numRecords, const snl_fei::RecordCollection *const *recordCollections, const int *records, int fieldID, int fieldSize, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a64cf1674830ad66ad059c894950a9db3</anchor>
      <arglist>(int numRecords, const fei::Record&lt; int &gt; *const *records, const int *numFieldsPerID, const int *fieldIDs, const int *fieldSizes, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalIndicesL</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>abeb4497ac1d1d7d0b87b8995d413572d</anchor>
      <arglist>(int numRecords, const snl_fei::RecordCollection *const *recordCollections, const int *records, const int *numFieldsPerID, const int *fieldIDs, const int *fieldSizes, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalBlkIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a497105440711d153632ce23352060939</anchor>
      <arglist>(int numRecords, const fei::Record&lt; int &gt; *const *records, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalBlkIndicesL</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>af9eea7c3a370f68496d3ccb46d88a1d5</anchor>
      <arglist>(int numRecords, const snl_fei::RecordCollection *const *recordCollections, const int *records, int indicesAllocLen, int *indices, int &amp;numIndices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDOFs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>afbc62027d5d21471d3e53f3e2f7d8bd6</anchor>
      <arglist>(int fieldID, int idType, int numIDs, const int *IDs, int *records)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDOFs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aaeb30b32bbad5aa554ef3b82c65bafd5</anchor>
      <arglist>(int idType, int numIDs, const int *IDs, int *records)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSendProcs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ac83ec37b602647c16b109a782a463044</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;sendProcs) const </arglist>
    </member>
    <member kind="function">
      <type>fei::SharedIDs&lt; int &gt; &amp;</type>
      <name>getSharedIDs</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5820774d99726c536350393365cd7373</anchor>
      <arglist>(int idType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ab299b7ef50f86340628d6a1eaf1a5d87</anchor>
      <arglist>(const VectorSpace &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VectorSpace &amp;</type>
      <name>operator=</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a07a1cb5f11b4e05d5afd21e7601b6bd7</anchor>
      <arglist>(const VectorSpace &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_shared_ids</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa77632688ac87f1e8ea3cd89104d5d4d</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;global_min, const std::vector&lt; int &gt; &amp;global_max)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_version</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a3b12c21d1c319011f4991e3a03280689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setOwners_shared</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aae30f0013b9fde14e5ea9cd1f276849c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>calculateGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a919e4ac942c08946c797a1558d91a199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runRecords</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad6100bf629ef25d21dd4943a8cd325a6</anchor>
      <arglist>(fei::Record_Operator&lt; int &gt; &amp;record_op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runRecords</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a50a601cbcf63f1513e82293b8044811c</anchor>
      <arglist>(fei::Record_Operator&lt; int &gt; &amp;record_op, int recordIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>synchronizeSharedRecords</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa6948d8ba06b32f7c1df17a7f57a94fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>setLocalEqnNumbers</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>aa7dca00e0ad5f0b8ab15d060703699d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exchangeGlobalIndices</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a16c410384ff987799889bc4c7a1809b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>exchangeFieldInfo</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>ad93b131b5a301dd1c3cb9861cc65b1b6</anchor>
      <arglist>(fei::comm_map *ownerPattern, fei::comm_map *sharerPattern, snl_fei::RecordCollection *recordCollection, std::vector&lt; fei::FieldMask * &gt; &amp;fieldMasks)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classfei_1_1VectorSpace.html</anchorfile>
      <anchor>a5344f4df0a1d450ee710a376d51bcb57</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::VectorTraits</name>
    <filename>structfei_1_1VectorTraits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>a5033064a56f565d0e0f4a1a2f95f7d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>aafdb26f26d645f9440d5a6fbb136a9ee</anchor>
      <arglist>(T *vec, int firstLocalOffset, double scalar, bool isSolnVector=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>aa9205bdc654285122fad212ec774a422</anchor>
      <arglist>(T *vec, int firstLocalOffset, int numValues, const int *indices, const double *values, bool sum_into, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>ac26f8ae2a4e61106b28fb869bc5923dd</anchor>
      <arglist>(T *vec, int firstLocalOffset, int numValues, const int *indices, double *values, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double *</type>
      <name>getLocalCoefsPtr</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>a739a898d04d4a162540542ec106d699d</anchor>
      <arglist>(T *vec, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>update</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>a7116c1d0555ea0d50f98d4500ce9880b</anchor>
      <arglist>(T *vec, double a, const T *x, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1VectorTraits.html</anchorfile>
      <anchor>a9c3a637b1d388435ae19a5037bd8aeaa</anchor>
      <arglist>(T *vec)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::VectorTraits&lt; CSVec &gt;</name>
    <filename>structfei_1_1VectorTraits_3_01CSVec_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1VectorTraits_3_01CSVec_01_4.html</anchorfile>
      <anchor>a8428430f1f98e5d45b369f3d2cba4e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1VectorTraits_3_01CSVec_01_4.html</anchorfile>
      <anchor>af18ec7f3db3d1798fdff69c8c80b48d6</anchor>
      <arglist>(CSVec *vec, int firstLocalOffset, double scalar, bool isSolnVector=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1VectorTraits_3_01CSVec_01_4.html</anchorfile>
      <anchor>a27d73acef946916c949c5050130bb37e</anchor>
      <arglist>(CSVec *vec, int firstLocalOffset, int numValues, const int *indices, const double *values, bool sum_into, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structfei_1_1VectorTraits_3_01CSVec_01_4.html</anchorfile>
      <anchor>a44659e61badbbc364558f362f94571f0</anchor>
      <arglist>(CSVec *vec, int firstLocalOffset, int numValues, const int *indices, double *values, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>update</name>
      <anchorfile>structfei_1_1VectorTraits_3_01CSVec_01_4.html</anchorfile>
      <anchor>a33f8973b969bd2fea100c531fd88e2dd</anchor>
      <arglist>(CSVec *vec, double a, const CSVec *x, double b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::VectorTraits&lt; fei::LinearProblemManager &gt;</name>
    <filename>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a59269e25a35bbdbf79bae867769d2bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>aff8eea47dfbc17d91f464fe2938d34e2</anchor>
      <arglist>(fei::LinearProblemManager *vec, int firstLocalOffset, double scalar, bool isSolnVector=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a2920da14c7b695abbf10a1811e2278cd</anchor>
      <arglist>(fei::LinearProblemManager *vec, int firstLocalOffset, int numValues, const int *indices, const double *values, bool sum_into, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a81c18ce6fe149f1d8f970c30e54f1904</anchor>
      <arglist>(fei::LinearProblemManager *vec, int firstLocalOffset, int numValues, const int *indices, double *values, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>globalAssemble</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a23d69f93308f9cff102b2990c0cc9676</anchor>
      <arglist>(fei::LinearProblemManager *vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>update</name>
      <anchorfile>structfei_1_1VectorTraits_3_01fei_1_1LinearProblemManager_01_4.html</anchorfile>
      <anchor>a84adfe3754e12a555b187836af9680e6</anchor>
      <arglist>(fei::LinearProblemManager *vec, double a, const fei::LinearProblemManager *x, double b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::VectorTraits&lt; FiniteElementData &gt;</name>
    <filename>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a1b47a5460e739661d5285d8f10d88b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a03b9dfb4447db9111399b279d549d889</anchor>
      <arglist>(FiniteElementData *vec, int firstLocalOffset, double scalar, bool isSolnVector=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>afb3c7edaf8fc92d8906e144345057fdb</anchor>
      <arglist>(FiniteElementData *vec, int firstLocalOffset, int numValues, const int *indices, const double *values, bool sum_into, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>af5f04c038543eb2049f7a193383f87ce</anchor>
      <arglist>(FiniteElementData *vec, int firstLocalOffset, int numValues, const int *indices, double *values, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>update</name>
      <anchorfile>structfei_1_1VectorTraits_3_01FiniteElementData_01_4.html</anchorfile>
      <anchor>a1c7f57d11c5753a57a90e7763e8d641b</anchor>
      <arglist>(FiniteElementData *vec, double a, const FiniteElementData *x, double b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fei::VectorTraits&lt; LinearSystemCore &gt;</name>
    <filename>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeName</name>
      <anchorfile>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>adb94ab31c5a679812cdb29d68e3e894d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setValues</name>
      <anchorfile>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a63c689aeb503ea64e994fe7cadd91284</anchor>
      <arglist>(LinearSystemCore *vec, int firstLocalOffset, double scalar, bool isSolnVector=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>putValuesIn</name>
      <anchorfile>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>afb12663084b198e28d28c22771fa09bd</anchor>
      <arglist>(LinearSystemCore *vec, int firstLocalOffset, int numValues, const int *indices, const double *values, bool sum_into, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>copyOut</name>
      <anchorfile>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a634729f5fa3b9651a1da8c883a3e1dfa</anchor>
      <arglist>(LinearSystemCore *vec, int firstLocalOffset, int numValues, const int *indices, double *values, bool isSolnVector=false, int vectorIndex=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>update</name>
      <anchorfile>structfei_1_1VectorTraits_3_01LinearSystemCore_01_4.html</anchorfile>
      <anchor>a3daa4497020a7775bcdb47373a3a742e</anchor>
      <arglist>(LinearSystemCore *vec, double a, const LinearSystemCore *x, double b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fei</name>
    <filename>namespacefei.html</filename>
    <namespace>fei::impl_utils</namespace>
    <namespace>fei::utils</namespace>
    <class kind="class">fei::BlkIndexAccessor</class>
    <class kind="class">fei::BlockLinearProblemManager</class>
    <class kind="struct">fei::CommMap</class>
    <class kind="class">fei::ConnectivityBlock</class>
    <class kind="class">fei::CSRMat</class>
    <class kind="class">fei::CSVec</class>
    <class kind="class">fei::ctg_set</class>
    <class kind="class">fei::DirichletBCManager</class>
    <class kind="struct">fei::DirichletBCRecord</class>
    <class kind="class">fei::Dof</class>
    <class kind="class">fei::DofMapper</class>
    <class kind="class">fei::EqnComm</class>
    <class kind="struct">fei::EqnRecord</class>
    <class kind="class">fei::Factory</class>
    <class kind="class">fei::FEI_Impl</class>
    <class kind="class">fei::FieldDofMap</class>
    <class kind="class">fei::FieldMask</class>
    <class kind="class">fei::FillableMat</class>
    <class kind="class">fei::Graph</class>
    <class kind="class">fei::Graph_Impl</class>
    <class kind="class">fei::GraphReducer</class>
    <class kind="class">fei::IndexTable</class>
    <class kind="class">fei::less_DirichletBCRecord</class>
    <class kind="struct">fei::less_field_rank_id</class>
    <class kind="struct">fei::less_rank_id_field</class>
    <class kind="class">fei::LinearDecomposition</class>
    <class kind="class">fei::LinearProblemManager</class>
    <class kind="class">fei::LinearSystem</class>
    <class kind="class">fei::LogFile</class>
    <class kind="class">fei::Logger</class>
    <class kind="class">fei::LogManager</class>
    <class kind="class">fei::Lookup_Impl</class>
    <class kind="class">fei::Matrix</class>
    <class kind="class">fei::Matrix_core</class>
    <class kind="class">fei::Matrix_Impl</class>
    <class kind="class">fei::Matrix_Local</class>
    <class kind="class">fei::MatrixGraph</class>
    <class kind="class">fei::MatrixGraph_Impl2</class>
    <class kind="class">fei::MatrixReducer</class>
    <class kind="struct">fei::MatrixTraits</class>
    <class kind="struct">fei::MatrixTraits&lt; fei::LinearProblemManager &gt;</class>
    <class kind="struct">fei::MatrixTraits&lt; FillableMat &gt;</class>
    <class kind="struct">fei::MatrixTraits&lt; FiniteElementData &gt;</class>
    <class kind="struct">fei::MatrixTraits&lt; LinearSystemCore &gt;</class>
    <class kind="class">fei::MessageHandler</class>
    <class kind="class">fei::Param</class>
    <class kind="class">fei::ParameterSet</class>
    <class kind="class">fei::Pattern</class>
    <class kind="class">fei::Record</class>
    <class kind="class">fei::Record_Operator</class>
    <class kind="class">fei::RecordAttributeCounter</class>
    <class kind="class">fei::Reducer</class>
    <class kind="class">fei::ReverseMapper</class>
    <class kind="class">fei::SharedIDs</class>
    <class kind="class">fei::SharedPtr</class>
    <class kind="class">fei::Solver</class>
    <class kind="class">fei::SparseRowGraph</class>
    <class kind="class">fei::Vector</class>
    <class kind="class">fei::Vector_core</class>
    <class kind="class">fei::Vector_Impl</class>
    <class kind="class">fei::Vector_Local</class>
    <class kind="class">fei::VectorReducer</class>
    <class kind="class">fei::VectorSpace</class>
    <class kind="struct">fei::VectorTraits</class>
    <class kind="struct">fei::VectorTraits&lt; CSVec &gt;</class>
    <class kind="struct">fei::VectorTraits&lt; fei::LinearProblemManager &gt;</class>
    <class kind="struct">fei::VectorTraits&lt; FiniteElementData &gt;</class>
    <class kind="struct">fei::VectorTraits&lt; LinearSystemCore &gt;</class>
    <member kind="typedef">
      <type>snl_fei::RaggedTable&lt; std::map&lt; int, std::set&lt; int &gt; * &gt;, std::set&lt; int &gt; &gt;</type>
      <name>comm_map</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abc55f32e362d94836bd77f3544b2210e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, int &gt;</type>
      <name>MapIntInt</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acdecf6bf2ea8e61dbae63fd2126c367a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>snl_fei::Constraint&lt; fei::Record&lt; int &gt; * &gt;</type>
      <name>ConstraintType</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aef0d5bdbf26ccdc8ba1e0fb8214084e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputLevel</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa571dcdb2eaff2333bf499833d4e871c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287faaea15d9bbfeaf5f04685f968beb94b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX_FILES</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa8741c205ffeac1a111d7e0b6f825bb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BRIEF_LOGS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fad73e87816056137770f18a77012864a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_LOGS</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fafc262b7ee6c65705ae0bd5f51c1e12fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa3cf1e3b2acd02b2133db8b46f0a287fa8411efbe1239f31317336c51e58d1bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lowerBound</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a0efc4a8e242575239085dff260d5067e</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abc8f01488b2d10e91c73453e3067fc07</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertion_sort_with_companions</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>afcc5443b9ed0c896b6d0dbfba8fa6eca</anchor>
      <arglist>(int len, int *array, T *companions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a29656e9f9d21e1cbb0659f5c7db2187c</anchor>
      <arglist>(const T &amp;item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a89ab72509f596deeb7c844d088bd7dc8</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a70606676b37cc67b3432ed751deb13a7</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad0946cec4b73f857af5212104a46a8ad</anchor>
      <arglist>(const T &amp;item, const T *list, int, int start, int end, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab4b6c849ff3cdffb0845769c8abdbb2b</anchor>
      <arglist>(int numItems, const T *items, int *offsets, const T *list, int listLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acc28917fd0b26792db6d64ef5a52ce95</anchor>
      <arglist>(const T &amp;item, std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a41d157b4a60fe59dabe579287f1eb3d5</anchor>
      <arglist>(const T &amp;item, T *&amp;list, int &amp;len, int &amp;allocLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>listInsert</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaed8c8a03cb7d092ebb73ddc32eaca25</anchor>
      <arglist>(const T &amp;item, int offset, T *&amp;list, int &amp;usedLength, int &amp;allocatedLength, int allocChunkSize=200)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>searchList</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4c5bd8920f581c1ad21bc00afb030439</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemsToCommMap</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab140e04f0d8436d728c942b6c51fc060</anchor>
      <arglist>(int proc, size_t numItems, const T *items, typename CommMap&lt; T &gt;::Type &amp;comm_map, bool keep_sorted_and_unique=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localProc</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a0e3a06536098e9ff002247a35f1b6fa7</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae4de8e0030da28cb961a03df9d424a00</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af8f97c5d507e3e8bfba9d4af9a4dd27e</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorProcs</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a86d65d9b2a28cd11f1d72d2eb4844e11</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;toProcs, std::vector&lt; int &gt; &amp;fromProcs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mirrorCommPattern</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a71950510d0cccb162802f85f5cc40d04</anchor>
      <arglist>(MPI_Comm comm, comm_map *inPattern, comm_map *&amp;outPattern)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeIntData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaf9956842e18172ec5d3b6e21f00bb0e</anchor>
      <arglist>(MPI_Comm comm, const std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; int &gt; &amp;sendData, const std::vector&lt; int &gt; &amp;recvProcs, std::vector&lt; int &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allreduce</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac8327d1a3aa9c95c430136bb33f9da71</anchor>
      <arglist>(MPI_Comm comm, bool localBool, bool &amp;globalBool)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMax</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad3dc3c245361504fc96e8f10773d5d39</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMax</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1557e3aa42e2023a206f54b87b32f59d</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMin</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a51f8e9679eb87080cadd1dfafb18c597</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalMin</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4cf910b47415678f7cad553409fbe54f</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalSum</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae808d07911cdef542d4eaecdda341443</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;local, std::vector&lt; T &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalSum</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae4018feca418c8a9a25584156eed1f2b</anchor>
      <arglist>(MPI_Comm comm, T local, T &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allgatherv</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab5abe7c1735b40ec8f7a3bcaca1a8c53</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;sendbuf, std::vector&lt; int &gt; &amp;recvLengths, std::vector&lt; T &gt; &amp;recvbuf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Bcast</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab839d0bed53272c1a0a38745da038f9e</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; T &gt; &amp;sendbuf, int sourceProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeCommMapData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aaebe97d8eb96b7081e54210ed61f82b7</anchor>
      <arglist>(MPI_Comm comm, const typename CommMap&lt; T &gt;::Type &amp;sendCommMap, typename CommMap&lt; T &gt;::Type &amp;recvCommMap, bool recvProcsKnownOnEntry=false, bool recvLengthsKnownOnEntry=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>afde477350aef49c6a51744f4dd0a8935</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;sendData, std::vector&lt; int &gt; &amp;recvProcs, bool recvDataLengthsKnownOnEntry, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchangeData</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a82477847e017b847c3a86b426b5c01cc</anchor>
      <arglist>(MPI_Comm comm, std::vector&lt; int &gt; &amp;sendProcs, std::vector&lt; std::vector&lt; T &gt; * &gt; &amp;sendData, std::vector&lt; int &gt; &amp;recvProcs, bool recvLengthsKnownOnEntry, std::vector&lt; std::vector&lt; T &gt; * &gt; &amp;recvData)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exchange</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aae801b561aa12481968d657e479f1746</anchor>
      <arglist>(MPI_Comm comm, MessageHandler&lt; T &gt; *msgHandler)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>console_ostream_ptr</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a018fc2d6d1fc837d7360c00b4884e1bb</anchor>
      <arglist>(std::ostream *osptr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_console_ostream</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa1be28e3aae0dea3eb504f4913ea9a3f</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>console_out</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abd0fcf9f34f05ec5d0ffbfed82ab1588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad58b7ad63318699e0141fd7d819053fd</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab699a07c0dc1e4c2977fceaa97f79103</anchor>
      <arglist>(const CSRMat &amp;A, const CSVec &amp;x, CSVec &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b2c8c56cf90537d52fb2ab7e380c5c0</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply_trans_CSRMat_CSRMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b46a568705048eb31cac3de84db86b9</anchor>
      <arglist>(const CSRMat &amp;A, const CSRMat &amp;B, CSRMat &amp;C, bool storeResultZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSRMat_to_FillableMat</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab11d44f017277d321853e8da6de1628b</anchor>
      <arglist>(const CSRMat &amp;csrm, FillableMat &amp;fm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entries</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a857370635367b5bbadf335f3542fd10d</anchor>
      <arglist>(CSVec &amp;vec, int num, const int *eqns, const double *coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a012804085562509ad99607499d752a8f</anchor>
      <arglist>(CSVec &amp;vec, int eqn, double coef)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4cb602b46ec33e666d3eeb35a8664618</anchor>
      <arglist>(const CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a9b1a461e2aba12481791e2c7288f7e2c</anchor>
      <arglist>(CSVec &amp;vec, int eqn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ad5ec1c8fd2bd21c1328103a4bfe3ce5c</anchor>
      <arglist>(CSVec &amp;vec, double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_CSVec_CSVec</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a392fd8e0be3d07d974f76fbbe95b45f7</anchor>
      <arglist>(const CSVec &amp;u, CSVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aa80e47276ad89c207cdff2f797bd8636</anchor>
      <arglist>(CSVec &amp;vec, int eqn, double coef)</arglist>
    </member>
    <member kind="function">
      <type>FillableMat::feipoolmat::iterator</type>
      <name>insert_row</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af661219bb6bbf860151030cbb42b39d6</anchor>
      <arglist>(FillableMat::feipoolmat &amp;matdata, FillableMat::feipoolmat::iterator iter, int row, fei_Pool_alloc&lt; CSVec &gt; &amp;vecpool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ac00483ad6d37e3844769bdfb284182b5</anchor>
      <arglist>(std::ostream &amp;os, const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_nnz</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a08c3714f0c246baf7db5ddf6f156bc3e</anchor>
      <arglist>(const FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_row_numbers</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aee8cfd5729e1757e28030ea63d2833c1</anchor>
      <arglist>(const FillableMat &amp;mat, std::vector&lt; int &gt; &amp;rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dof_mappings</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a5692f393152cb9e2d3cf83bb6e3f87ff</anchor>
      <arglist>(GlobalOrdinal first_index, fei::DofMapper&lt; LocalOrdinal, GlobalOrdinal, DofOrder &gt; &amp;dof_mapper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_into_shared_ids</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4a85d52c1ef03874091b1a62f5e3f33d</anchor>
      <arglist>(const fei::CommMap&lt; int &gt;::Type &amp;procs_to_ids_and_sharing_procs, const snl_fei::RecordCollection &amp;records, fei::SharedIDs&lt; int &gt; &amp;sharedIDs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_remotelyowned_ids_into_CommMap</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>accc19e356491c873c719126bd6216c60</anchor>
      <arglist>(int myProc, const fei::LinearDecomposition&lt; int &gt; &amp;lindecomp, const snl_fei::RecordCollection &amp;records, fei::CommMap&lt; int &gt;::Type &amp;procs_to_shared_ids)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_shared_ids</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>acfd9d7b740be49b74758060400bbc2d6</anchor>
      <arglist>(MPI_Comm comm, const snl_fei::RecordCollection &amp;records, fei::SharedIDs&lt; int &gt; &amp;sharedIDs, int lowest_global_id, int highest_global_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ab28313070bead7c78e48ff62588ce894</anchor>
      <arglist>(const SharedPtr&lt; T &gt; &amp;a, const SharedPtr&lt; U &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abb300085ed1f292befee5d78db48e93a</anchor>
      <arglist>(const SharedPtr&lt; T &gt; &amp;a, const SharedPtr&lt; U &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_row_start</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a107a404246ef50d354a45a963ef3ff1e</anchor>
      <arglist>(int row, const SparseRowGraph &amp;srg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySetToArray</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a2db91d5c836c18200eae1ccef4da9418</anchor>
      <arglist>(const SET_TYPE &amp;set_obj, int lenList, int *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySetToVector</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a19002647ede8ef2bdfb6b87a34976315</anchor>
      <arglist>(const std::set&lt; T &gt; &amp;set_obj, std::vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyKeysToArray</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a945393d80f22fea79eee3f5ae398c411</anchor>
      <arglist>(const MAP_TYPE &amp;map_obj, unsigned lenList, int *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyKeysToVector</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a5c2a3aecb10f35366836022195b1bb58</anchor>
      <arglist>(const MAP_TYPE &amp;map_obj, std::vector&lt; int &gt; &amp;keyvector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyMapOfSetsToVectorOfVectors</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a05aa9aae813dce2a9f6a0d91d6c0279d</anchor>
      <arglist>(const std::map&lt; T, std::set&lt; U &gt; &gt; &amp;mapset, std::vector&lt; T &gt; &amp;keys, std::vector&lt; std::vector&lt; U &gt; &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToArrays</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4dedffe9e70d7a84174914f2a4c6eea3</anchor>
      <arglist>(MAP_TYPE &amp;map_obj, int lenList, int *keylist, int *vallist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyValues</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1af46d3341fe4568aa0e4d4fb6b5f1d7</anchor>
      <arglist>(MAP_TYPE &amp;map_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToStream</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aef0b2ab2927c884f26042856ac4d2efb</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, FEI_OSTREAM &amp;os, const char *lineprefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packRaggedTable</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4145cf7588399d3e1efb33290504054a</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, std::vector&lt; int &gt; &amp;intdata)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a73c9175e24ed6599b247a49a366e7cd2</anchor>
      <arglist>(const std::vector&lt; snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; * &gt; &amp;tables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af2aa95997091815bc7885f6af8fe703b</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table, fei::SparseRowGraph &amp;srg)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>createSparseRowGraph</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aacda491eedb68a90749b90e556879b57</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNonzeros</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a357a61ba7a10e3d6915632e10a09b3e7</anchor>
      <arglist>(snl_fei::RaggedTable&lt; MAP_TYPE, SET_TYPE &gt; &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; LibraryWrapper &gt;</type>
      <name>create_LibraryWrapper</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>adac3dc13d80c7bb052495bb5bc93c45d</anchor>
      <arglist>(MPI_Comm comm, const char *libraryName)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::Factory &gt;</type>
      <name>create_fei_Factory</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a90066727fac24dcfeef4085e0174caa7</anchor>
      <arglist>(MPI_Comm comm, const char *libraryName)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a9ff368bd5d98e546c2b68f84636a0ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6b86cf2a31f789b873ce203745f29072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a42edb6ae8cec41a9ffe89b336332b063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DISPLACEMENT_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>ae8ad4f3c0d9d66b61cb6f8eb998b5bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a199ec1e4b07af54a7ded48e9589030a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a1034d8c383c3ea1b0729a3e8c5137e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>abfcff51703d83aa06318c0422ee264b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ROTATION_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a8bb19aad27b2031eccad79265170e94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a98bb1de44c0be75e8399f528d545ead2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aabf68791afd1695a0efa2c3416544f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a3d605e9f24f289fec3d45d287f42aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>VELOCITY_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>af2478406c3a676760784ae7d05b628ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>aee2087954ff10742ee5f7543f026bc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_X</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a146dc17df29fd479a275313a7ca96077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_Y</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6176d0a0a6ce994d1dbdfa7f7f059c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PRESSURE_Z</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a4a1572483b78b78c2627f16a7e36ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>TEMPERATURE</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a655cdee12b848f7f3e07f42c423145ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UNKNOWN</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a6ee18b4411c13021a5aa10c049caa16b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>Set_end_val</name>
      <anchorfile>namespacefei.html</anchorfile>
      <anchor>a32b08d5111a96b124e47e23c23467af9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fei::impl_utils</name>
    <filename>namespacefei_1_1impl__utils.html</filename>
    <member kind="function">
      <type>void</type>
      <name>find_offsets</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a415e877d1b75600aa9c33cf57256cd1a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;sources, const std::vector&lt; int &gt; &amp;targets, std::vector&lt; int &gt; &amp;offsets)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a0c981eb935a43921a4f09a8e1008e569</anchor>
      <arglist>(const fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ac5f4582091cf4acdb50f5176ff57ba58</anchor>
      <arglist>(const fei::FillableMat &amp;mat, char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_FillableMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>aab0290114cd406ebdcff311e33909f8d</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::FillableMat &amp;mat, bool clear_mat_on_entry, bool overwrite_entries)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unpack_CSRMat</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a62121dda1e616232d47391d77e5b3eaa</anchor>
      <arglist>(const char *buffer_begin, const char *buffer_end, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_bytes_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a16a6257b5cb62b48d8211568021fa1e9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ae30641570ddd80a0012df85142144e12</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;indices, const std::vector&lt; double &gt; &amp;coefs, std::vector&lt; char &gt; &amp;buffer, bool resize_buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_indices_coefs</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>ad845d7df9fb4358ede8bee27efd7e98b</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;buffer, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate_BC_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a46bcf8f2ec00763867da9d24de54c065</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::vector&lt; int &gt; &amp;bcEqns, std::vector&lt; double &gt; &amp;bcVals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_col_to_row_map</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>acbe20c4d77eab1d8b0a6a5c0f33b5a08</anchor>
      <arglist>(const fei::FillableMat &amp;mat, std::multimap&lt; int, int &gt; &amp;crmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_couplings</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a99f1589d73ceb673db168995a12c84e2</anchor>
      <arglist>(fei::FillableMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a20b9ff07427b3ea8384ba013031719ba</anchor>
      <arglist>(MPI_Comm comm, const fei::FillableMat &amp;localMatrix, fei::FillableMat &amp;globalUnionMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_union</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a3e6cc6dd6ea256f43c8fd43cf7e7af84</anchor>
      <arglist>(MPI_Comm comm, const fei::CSVec &amp;localVec, fei::CSVec &amp;globalUnionVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a25f39ad03f7cc0326dfe7528de350880</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSRMat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate_to_reduced_eqns</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>adb3d33f599dea2668cf4cf6459b4fcfc</anchor>
      <arglist>(const fei::Reducer &amp;reducer, fei::CSVec &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_graph</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>af9c1e67f80a805b235e251083e89246e</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, fei::Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_matrix</name>
      <anchorfile>namespacefei_1_1impl__utils.html</anchorfile>
      <anchor>a4eb12f05d39516db52be8bacb6adb594</anchor>
      <arglist>(const fei::CSRMat &amp;inmat, bool sum_into, fei::Matrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fei::utils</name>
    <filename>namespacefei_1_1utils.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ace8702f5572dc849bb7c4b301cf2c367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpu_time</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ad42d9849bbc0ac7a38ea31e562005eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fei::OutputLevel</type>
      <name>string_to_output_level</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>acfb2c2f71b1c3beb6bdf85c932c83aa7</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>LinearSystemCore *</type>
      <name>get_LinearSystemCore</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a759d7563f164956bba6ea17d38ef6647</anchor>
      <arglist>(fei::Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConnectivityArrays</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a3a9c942efcfacdbab37cd1e37b3bc030</anchor>
      <arglist>(fei::MatrixGraph &amp;matrixGraph, std::vector&lt; int &gt; &amp;nodes, std::vector&lt; int &gt; &amp;elem_offsets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>char_ptrs_to_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a67b94945ba99c04edba4a0dfb3ba4eb8</anchor>
      <arglist>(int numStrings, const char *const *charstrings, std::vector&lt; std::string &gt; &amp;stdstrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strings_to_char_ptrs</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>ad89751e19c5c7ce7fc8ce465def6af26</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;stdstrings, int &amp;numStrings, const char **&amp;charPtrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a0659cd5e66f4dd3e3eb533971e0d8af4</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;stdstrings, const char *separator_string, fei::ParameterSet &amp;paramset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_ParameterSet_to_strings</name>
      <anchorfile>namespacefei_1_1utils.html</anchorfile>
      <anchor>a12904d2a23a2cf952736441d5d8a786f</anchor>
      <arglist>(const fei::ParameterSet *paramset, std::vector&lt; std::string &gt; &amp;paramStrings)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fei_test_utils</name>
    <filename>namespacefei__test__utils.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>construct_filename</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a60bf3aa8af2ca7ac02783a76fe096f87</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initialize_mpi</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a51faa95dd543b6b4d7de8d4f8be696b5</anchor>
      <arglist>(int argc, char **argv, int &amp;localProc, int &amp;numProcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bool_arg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa2e0be9300ec4b2043debb850425e742</anchor>
      <arglist>(const char *flag, int argc, char **argv, bool default_result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_arg_value</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>afa5e98fe19c58cc985c9ad9dc5967aa1</anchor>
      <arglist>(const char *flag, int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast_string</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac09056191b19f63f8a5dfbe1ed499736</anchor>
      <arglist>(MPI_Comm comm, int root, std::string &amp;strg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_file_lines_into_strings</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ae4ff60d62fd35369aea16ede19ddf5ed</anchor>
      <arglist>(const char *filename, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_filename_and_read_input</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a603040461e8ede9ebb995f20367d2580</anchor>
      <arglist>(int argc, char **argv, MPI_Comm comm, int localProc, std::vector&lt; std::string &gt; &amp;stdstrings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_input_file</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac919a3b67e6f777b095c54ae6ea5a5c0</anchor>
      <arglist>(const char *filename, MPI_Comm comm, std::vector&lt; std::string &gt; &amp;file_contents)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ac8257ddf2c09eab1bbd2d26331cf3765</anchor>
      <arglist>(const char *filename, const char *testname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>within_percentage_margin</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aade5423196a53cfa5474c5c73ca374b1</anchor>
      <arglist>(double value1, double value2, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>whichArg</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a33e6d60554e72fd2051efe87da0c7526</anchor>
      <arglist>(int argc, const char *const *argv, const char *findarg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_and_cout_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a72bc58728decd11bd5283a7f7bdaf634</anchor>
      <arglist>(std::string testname, double value, double file_value, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>check_test_result</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa5102548a1363fcf4b081fb27a59ec40</anchor>
      <arglist>(double value, double goldvalue, unsigned margin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare_with_file_benchmark</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa44613e6541abb9076a5083fc39e0a8b</anchor>
      <arglist>(const char *name, double benchmark, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dirname</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a656f9b7c5511b912b6cdc0a756cf09c1</anchor>
      <arglist>(const char *name, char *&amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_args</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a325b0253ba48fedb765f2fb7d4b64b1f</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMatrices</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa608d9647e4f07bcabce22ea8943cc36</anchor>
      <arglist>(fei::FillableMat &amp;mat1, fei::FillableMat &amp;mat2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aaca2723d76507fc54839726839e2a92f</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>aa87eede44f196f10740849f30e1d103c</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeMatrix</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>a6baa66bf9dd0582c065ae1d752846961</anchor>
      <arglist>(const char *fileName, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copy_feiMatrix_to_FillableMat</name>
      <anchorfile>namespacefei__test__utils.html</anchorfile>
      <anchor>ade864ba02d3723524d684cbb3e608c74</anchor>
      <arglist>(fei::Matrix &amp;feimat, fei::FillableMat &amp;fmat)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fei_trilinos</name>
    <filename>namespacefei__trilinos.html</filename>
    <class kind="class">fei_trilinos::Aztec_BlockMap</class>
    <class kind="class">fei_trilinos::Aztec_LinSysCore</class>
    <class kind="class">fei_trilinos::Aztec_LSVector</class>
    <class kind="class">fei_trilinos::Aztec_Map</class>
    <class kind="class">fei_trilinos::AztecDVBR_Matrix</class>
  </compound>
  <compound kind="namespace">
    <name>fei_VERSION</name>
    <filename>namespacefei__VERSION.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>namespacefei__VERSION.html</anchorfile>
      <anchor>af03563026b62bbefc1c6b1de55bc3963</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HexBeam_Functions</name>
    <filename>namespaceHexBeam__Functions.html</filename>
    <member kind="function">
      <type>int</type>
      <name>print_cube_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae8fa06aa0c3d885cb34fcd385ad8265e</anchor>
      <arglist>(HexBeam &amp;hexcube, int numProcs, int localProc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a1c69f14e5e1c7533f1842ad354a6630f</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af32c66110b13e0cd69630233516566a7</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a7f02e04ff74b06a12139371be63c07f6</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86fba5eed8e0e18f1868107304c4201c</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a3b9570e9e880859faf7c2fe59b164b42</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ac1e98418141eb8b2ca2e4c4b784e86f8</anchor>
      <arglist>(FEI *fei, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_elem_connectivities</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ae3172575b7a2f831e4e5d96f79b932a6</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_shared_nodes</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a180bc7f044ec7d2d27a3f4d835779bbc</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a610a0a25fbb5dcb5940227d61044559f</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube, int localProc, int &amp;firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init_slave_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>ad9a75cc25c7d525ef1426125f5f3c7f5</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_elem_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>add5ca0fdb5eaae74718002a8fd7b0967</anchor>
      <arglist>(fei::MatrixGraph *matrixGraph, fei::Matrix *mat, fei::Vector *rhs, HexBeam &amp;hexcube)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_constraints</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>af95f63269bdf1ca971bf91631a96d001</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube, int firstLocalCRID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>load_BC_data</name>
      <anchorfile>namespaceHexBeam__Functions.html</anchorfile>
      <anchor>a86de078d84f387bb6a4d163d74b95508</anchor>
      <arglist>(fei::LinearSystem *linSys, HexBeam &amp;hexcube)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>snl_fei</name>
    <filename>namespacesnl__fei.html</filename>
    <class kind="class">snl_fei::BlkSizeMsgHandler</class>
    <class kind="struct">snl_fei::BlockMatrixTraits</class>
    <class kind="class">snl_fei::Broker</class>
    <class kind="class">snl_fei::Broker_FEData</class>
    <class kind="class">snl_fei::Broker_LinSysCore</class>
    <class kind="class">snl_fei::Constraint</class>
    <class kind="class">snl_fei::Factory</class>
    <class kind="struct">snl_fei::FEMatrixTraits</class>
    <class kind="struct">snl_fei::FEMatrixTraits&lt; FiniteElementData &gt;</class>
    <class kind="struct">snl_fei::FEVectorTraits</class>
    <class kind="struct">snl_fei::FEVectorTraits&lt; FiniteElementData &gt;</class>
    <class kind="class">snl_fei::LinearSystem_FEData</class>
    <class kind="class">snl_fei::LinearSystem_General</class>
    <class kind="class">snl_fei::MapContig</class>
    <class kind="struct">snl_fei::MapTraits</class>
    <class kind="class">snl_fei::PointBlockMap</class>
    <class kind="class">snl_fei::RaggedTable</class>
    <class kind="class">snl_fei::RaggedTable&lt; MapContig&lt; fei::ctg_set&lt; int &gt; * &gt;, fei::ctg_set&lt; int &gt; &gt;</class>
    <class kind="class">snl_fei::RecordCollection</class>
    <class kind="class">snl_fei::RecordMsgHandler</class>
    <class kind="struct">snl_fei::SetTraits</class>
    <class kind="struct">snl_fei::SetTraits&lt; fei::ctg_set&lt; int &gt; &gt;</class>
    <class kind="class">snl_fei::SubdMsgHandler</class>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>getFieldSize</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>afb7d5b937ee0d57a38df4ad841d9d349</anchor>
      <arglist>(int fieldID, fei::VectorSpace *space1, fei::VectorSpace *space2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ac8f5da518a78b5e581854c1302fe6008</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertion_sort_with_companions</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a03bdabd780995aafffb0301647cbc9f6</anchor>
      <arglist>(int len, int *array, T *companions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lowerBound</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a2867e8b2fa4d5f4e79cf88edb56e3526</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aeb3ed46ce9084dbaa9d31b3e3bf6516e</anchor>
      <arglist>(const T &amp;item, const T *list, int len, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a3d63e9ae3fc516eaa0448848b7a1f506</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ac165b7a74bdfc2f4a70150944a87f241</anchor>
      <arglist>(const T &amp;item, const std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a96656ae6edd7fbb4b28d35640a1c4933</anchor>
      <arglist>(const T &amp;item, const T *list, int, int start, int end, int &amp;insertPoint)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>binarySearch</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a27cbd41e6c3bc058dd30be4410c6b3ee</anchor>
      <arglist>(int numItems, const T *items, int *offsets, const T *list, int listLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>abdb6ce13effe875381e1e325b157c80c</anchor>
      <arglist>(const T &amp;item, std::vector&lt; T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sortedListInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>abfab2f19759dc233ff760ad75a794a89</anchor>
      <arglist>(const T &amp;item, T *&amp;list, int &amp;len, int &amp;allocLen)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>listInsert</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa04187008feb964e5adf123557fa34c6</anchor>
      <arglist>(const T &amp;item, int offset, T *&amp;list, int &amp;usedLength, int &amp;allocatedLength, int allocChunkSize=200)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>searchList</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a07ba321cb3a6092d5111d5b818ce8d19</anchor>
      <arglist>(const T &amp;item, const T *list, int len)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aba9f0471b2f6c2a9ea9f60b024341572</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ad9b365bd3c3659a8303a217cf2293032</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ad414139eac8f498e7bf352247e41e2c1</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;params, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a04ca2e990268bc1a944f3649bd2e8a8f</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, int &amp;foundOffset, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a636dab415f18b5fbe17433585514e9e3</anchor>
      <arglist>(const char *key, int numParams, const char *const *params, int &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDoubleParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa4c81ad8f1aacd32deb0e929b3fb2dcc</anchor>
      <arglist>(const char *key, int numParams, const char *const *params, double &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDoubleParamValue</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>aa9d7311e037db5789a30b540ac1181b2</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;params, double &amp;paramValue)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a5cdeb88bd202e9d4056e29e55f5d2776</anchor>
      <arglist>(const char *key, int numParams, const char *const *paramStrings, int &amp;foundOffset)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParam</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a853e8abe8f10665bd0e748096dd69068</anchor>
      <arglist>(const char *key, std::vector&lt; std::string &gt; &amp;paramStrings, int &amp;foundOffset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>storeNamedAttribute</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a6a5f014421a51b6571fbc9eaf2aaf4e0</anchor>
      <arglist>(const char *name, void *attribute, std::vector&lt; char * &gt; &amp;attributeNames, std::vector&lt; void * &gt; &amp;attributes)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>retrieveNamedAttribute</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>adc7825009f09d19b36608175f2f2c42c</anchor>
      <arglist>(const char *name, std::vector&lt; char * &gt; &amp;attributeNames, std::vector&lt; void * &gt; &amp;attributes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate_string</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a2295b426491e012637ebabb22b3d7db3</anchor>
      <arglist>(const char *input_string, const char *substring, const char *&amp;before_substring, int &amp;len_before_substring, const char *&amp;after_substring, int &amp;len_after_substring)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>leading_substring_length</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a9c8434d033013bde939d2ae265607f43</anchor>
      <arglist>(const char *string)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>skipSeparator</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a734b36a5dbca3ccdc5733657089b7fd5</anchor>
      <arglist>(const char *paramString, char separator=&apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mergeStringLists</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a1da8891b3c348a7bf30be0edc6a167cc</anchor>
      <arglist>(char **&amp;strings, int &amp;numStrings, const char *const *stringsToMerge, int numStringsToMerge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolveConflictingCRs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a646097e7fcba3b85a3bcb86b2a227369</anchor>
      <arglist>(fei::MatrixGraph &amp;matrixGraph, fei::Matrix &amp;bcEqns, const std::vector&lt; int &gt; &amp;bcEqnNumbers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherRemoteEssBCs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a5d7463c9083616d78e28748082cc29cf</anchor>
      <arglist>(fei::CSVec &amp;essBCs, fei::SparseRowGraph *remoteGraph, fei::Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>fei::SharedPtr&lt; fei::SparseRowGraph &gt;</type>
      <name>mergeSparseRowGraphs</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>a8c08378fbbf713eecab8dc762dd32db0</anchor>
      <arglist>(const fei::SparseRowGraph *srg1, const fei::SparseRowGraph *srg2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2DBlockDiagToColumnContig</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>acc968b013302a03b8d72da21876e0f3b</anchor>
      <arglist>(int numBlocks, const int *blockSizes, const double *const *values2d, int format, double *colcontigvalues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2DToColumnContig</name>
      <anchorfile>namespacesnl__fei.html</anchorfile>
      <anchor>ae42a2c51436256fd0736a86bc295d8cd</anchor>
      <arglist>(int numrows, int numcols, const double *const *values2d, int format, double *colcontigvalues)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SolnCheck</name>
    <filename>namespaceSolnCheck.html</filename>
    <member kind="function">
      <type>int</type>
      <name>readSoln</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>a6aba51a1d37b749fed2f029ab5f72e6f</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareSoln</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ac179752fd49643f666427414c0adb50b</anchor>
      <arglist>(fei::FillableMat &amp;solution1, fei::FillableMat &amp;solution2, double tol=1.e-3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readMatrix</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ad807151a990c3e879e175bcf96cc7fb0</anchor>
      <arglist>(const char *baseName, int np, fei::FillableMat &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareMatrices</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>a921d72e4925d665cd6b159bc1112952f</anchor>
      <arglist>(fei::FillableMat &amp;mat1, fei::FillableMat &amp;mat2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkSolution</name>
      <anchorfile>namespaceSolnCheck.html</anchorfile>
      <anchor>ac73b70347deae47a8cec18fe26659cf3</anchor>
      <arglist>(int localProc, int numProcs, const char *solnFileName, const char *checkFileName, const char *extension, int solveCounter)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Trilinos_Helpers</name>
    <filename>namespaceTrilinos__Helpers.html</filename>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterset</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>a892e398c7d778be4655905428ddc0817</anchor>
      <arglist>(const fei::ParameterSet &amp;paramset, Teuchos::ParameterList &amp;paramlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_parameterlist</name>
      <anchorfile>namespaceTrilinos__Helpers.html</anchorfile>
      <anchor>ab6fbc134d8796be002aa2dfbaa063d43</anchor>
      <arglist>(const Teuchos::ParameterList &amp;paramlist, fei::ParameterSet &amp;paramset)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>FEI Package Browser (Single Doxygen Collection)</title>
    <filename>index</filename>
  </compound>
</tagfile>
